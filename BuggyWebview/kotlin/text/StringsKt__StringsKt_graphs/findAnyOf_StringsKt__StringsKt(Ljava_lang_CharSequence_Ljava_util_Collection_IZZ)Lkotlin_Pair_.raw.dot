digraph "CFG forkotlin.text.StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/util\/Collection;IZZ)Lkotlin\/Pair;" {
Node_136 [shape=record,label="{136\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_138 [shape=record,label="{138\:\ 0x0000|0x0000: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('$this$findAnyOf' java.lang.CharSequence)])  (LINE:993)\l0x0002: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)]) \l0x0004: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_139 [shape=record,label="{139\:\ 0x0005|0x0005: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:150:0x0038 \l}"];
Node_140 [shape=record,label="{140\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r20 I:java.util.Collection A[D('strings' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_141 [shape=record,label="{141\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:150:0x0038 \l}"];
Node_142 [shape=record,label="{142\:\ 0x000e|0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('strings' java.util.Collection)])  (LINE:994)\l0x0010: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Iterable) type: STATIC call: kotlin.collections.CollectionsKt.single(java.lang.Iterable):java.lang.Object A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):T (m)]\l0x0016: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0017: CHECK_CAST (r9 I:java.lang.String) = (java.lang.String) (r9 I:??[OBJECT, ARRAY]) \l0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:995)\l0x001a: CONST  (r4 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x001b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('$this$findAnyOf' java.lang.CharSequence)]) \l0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('string' java.lang.String)]) \l0x001f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)]) \l}"];
Node_143 [shape=record,label="{143\:\ 0x0021|0x0021: IF  (r23 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('last' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:145:0x0028 \l}"];
Node_144 [shape=record,label="{144\:\ 0x0023|0x0023: INVOKE  (r0 I:int) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.String), (r2 I:int), (r3 I:boolean), (r4 I:int), (r5 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_146 [shape=record,label="{146\:\ 0x002c|0x002c: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:148:0x002f  (LINE:996)\l}"];
Node_148 [shape=record,label="{148\:\ 0x002f|0x002f: INVOKE  (r1 I:java.lang.Integer) = (r0 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0033: INVOKE  (r8 I:kotlin.Pair) = (r1 I:java.lang.Object), (r9 I:java.lang.Object A[D('string' java.lang.String)]) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l}"];
Node_149 [shape=record,label="{149\:\ 0x0037|RETURN\lORIG_RETURN\l|0x0037: RETURN  (r8 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_137 [shape=record,label="{137\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_203 [shape=record,label="{203\:\ ?|SYNTHETIC\lRETURN\l|0x0037: RETURN  (r8 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) A[SYNTHETIC]\l}"];
Node_145 [shape=record,label="{145\:\ 0x0028|0x0028: INVOKE  (r0 I:int) = (r0 I:java.lang.CharSequence), (r1 I:java.lang.String), (r2 I:int), (r3 I:boolean), (r4 I:int), (r5 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.lastIndexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_150 [shape=record,label="{150\:\ 0x0038|0x0038: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:999)\l}"];
Node_151 [shape=record,label="{151\:\ 0x0039|0x0039: IF  (r23 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('last' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:153:0x004b \l}"];
Node_152 [shape=record,label="{152\:\ 0x003b|0x003b: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x003d: INVOKE  (r0 I:int) = (r7 I:int), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0041: INVOKE  (r2 I:int) = (r19 I:java.lang.CharSequence A[D('$this$findAnyOf' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0045: INVOKE  (r1 I:kotlin.ranges.IntRange), (r0 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0048: CHECK_CAST (r1 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_154 [shape=record,label="{154\:\ 0x0057|0x0057: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0058: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY]) java.lang.String  (LINE:1001)\l}"];
Node_155 [shape=record,label="{155\:\ 0x005a|0x005a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:175:0x00b3 \l}"];
Node_156 [shape=record,label="{156\:\ 0x005c|0x005c: INVOKE  (r0 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getFirst():int A[MD:():int (m)] (LINE:1002)\l0x0060: INVOKE  (r10 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getLast():int A[MD:():int (m)]\l0x0064: INVOKE  (r11 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getStep():int A[MD:():int (m)]\l}"];
Node_157 [shape=record,label="{157\:\ 0x0068|0x0068: IF  (r11 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:159:0x006c \l}"];
Node_158 [shape=record,label="{158\:\ 0x006a|0x006a: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \<= (r10 I:??[int, byte, short, char])  \-\> B:161:0x0070 \l}"];
Node_161 [shape=record,label="{161\:\ 0x0070|0x0070: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:1003)\l}"];
Node_162 [shape=record,label="{162\:\ 0x0071|LOOP_START\lLOOP:0: B:162:0x0071\-\>B:174:0x00b1\l|0x0071: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('strings' java.util.Collection)]) \l0x0073: CHECK_CAST (r13 I:java.lang.Iterable) = (java.lang.Iterable) (r13 I:??[OBJECT, ARRAY]) \l0x0075: CONST  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0076: INVOKE  (r15 I:java.util.Iterator) = (r13 I:java.lang.Iterable A[D('$this$firstOrNull$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1622)\l}"];
Node_163 [shape=record,label="{163\:\ 0x007a|LOOP_START\lLOOP:1: B:163:0x007a\-\>B:166:0x009b\l|0x007a: INVOKE  (r0 I:boolean) = (r15 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_164 [shape=record,label="{164\:\ 0x007e|0x007e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:198:0x009e \l}"];
Node_165 [shape=record,label="{165\:\ 0x0080|0x0080: INVOKE  (r16 I:java.lang.Object) = (r15 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0084: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0086: CHECK_CAST (r17 I:java.lang.String) = (java.lang.String) (r17 I:??[OBJECT, ARRAY]) \l0x0088: CONST  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x008a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1003)\l0x008b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x008c: CHECK_CAST (r2 I:java.lang.String) = (java.lang.String) (r2 I:??[OBJECT, ARRAY]) \l0x008e: INVOKE  (r4 I:int) = (r17 I:java.lang.String A[D('it' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0092: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY] A[D('it' java.lang.String)]) \l0x0094: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x0095: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0097: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:int), (r2 I:java.lang.String), (r3 I:int), (r4 I:int), (r5 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatches(java.lang.String, int, java.lang.String, int, int, boolean):boolean A[MD:(java.lang.String, int, java.lang.String, int, int, boolean):boolean (m)]\l}"];
Node_166 [shape=record,label="{166\:\ 0x009b|LOOP_END\lLOOP:1: B:163:0x007a\-\>B:166:0x009b\l|0x009b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:163:0x007a \l}"];
Node_197 [shape=record,label="{197\:\ 0x00a0|SYNTHETIC\l}"];
Node_169 [shape=record,label="{169\:\ 0x00a0|0x00a0: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:1003)\l0x00a2: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_170 [shape=record,label="{170\:\ 0x00a4|0x00a4: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchingString' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:173:0x00af  (LINE:1004)\l}"];
Node_173 [shape=record,label="{173\:\ 0x00af|0x00af: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:196:0x010b  (LINE:1002)\l}"];
Node_174 [shape=record,label="{174\:\ 0x00b1|LOOP_END\lLOOP:0: B:162:0x0071\-\>B:174:0x00b1\l|0x00b1: ARITH  (r12 I:int) = (r12 I:int A[D('index' int)]) + (r11 I:int) \l}"];
Node_196 [shape=record,label="{196\:\ 0x010b|SYNTHETIC\l}"];
Node_194 [shape=record,label="{194\:\ 0x010b|RETURN\l|0x010b: RETURN  (r8 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>)  (LINE:1015)\l}"];
Node_195 [shape=record,label="{195\:\ 0x00a6|SYNTHETIC\l}"];
Node_171 [shape=record,label="{171\:\ 0x00a6|0x00a6: INVOKE  (r1 I:java.lang.Integer) = (r12 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:1005)\l0x00aa: INVOKE  (r1 I:kotlin.Pair) = (r1 I:java.lang.Object), (r0 I:java.lang.Object A[D('matchingString' java.lang.String)]) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l}"];
Node_172 [shape=record,label="{172\:\ 0x00ae|RETURN\l|0x00ae: RETURN  (r1 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_198 [shape=record,label="{198\:\ 0x009e|SYNTHETIC\l}"];
Node_168 [shape=record,label="{168\:\ 0x009e|0x009e: MOVE  (r16 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) = (r8 I:??[OBJECT, ARRAY])  (LINE:1623)\l}"];
Node_159 [shape=record,label="{159\:\ 0x006c|0x006c: IF  (r11 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:194:0x010b \l}"];
Node_160 [shape=record,label="{160\:\ 0x006e|0x006e: IF  (r10 I:??[int, byte, short, char]) \> (r0 I:??[int, byte, short, char] A[D('index' int)])  \-\> B:194:0x010b \l}"];
Node_175 [shape=record,label="{175\:\ 0x00b3|0x00b3: INVOKE  (r0 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getFirst():int A[MD:():int (m)] (LINE:1008)\l0x00b7: INVOKE  (r10 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getLast():int A[MD:():int (m)]\l0x00bb: INVOKE  (r11 I:int) = (r9 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getStep():int A[MD:():int (m)]\l}"];
Node_176 [shape=record,label="{176\:\ 0x00bf|0x00bf: IF  (r11 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:178:0x00c3 \l}"];
Node_177 [shape=record,label="{177\:\ 0x00c1|0x00c1: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \<= (r10 I:??[int, byte, short, char])  \-\> B:180:0x00c7 \l}"];
Node_180 [shape=record,label="{180\:\ 0x00c7|0x00c7: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:1009)\l}"];
Node_181 [shape=record,label="{181\:\ 0x00c8|LOOP_START\lLOOP:2: B:181:0x00c8\-\>B:193:0x0109\l|0x00c8: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('strings' java.util.Collection)]) \l0x00ca: CHECK_CAST (r13 I:java.lang.Iterable) = (java.lang.Iterable) (r13 I:??[OBJECT, ARRAY]) \l0x00cc: CONST  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00cd: INVOKE  (r15 I:java.util.Iterator) = (r13 I:java.lang.Iterable A[D('$this$firstOrNull$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1624)\l}"];
Node_182 [shape=record,label="{182\:\ 0x00d1|LOOP_START\lLOOP:3: B:182:0x00d1\-\>B:185:0x00f3\l|0x00d1: INVOKE  (r0 I:boolean) = (r15 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_183 [shape=record,label="{183\:\ 0x00d5|0x00d5: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:202:0x00f6 \l}"];
Node_184 [shape=record,label="{184\:\ 0x00d7|0x00d7: INVOKE  (r16 I:java.lang.Object) = (r15 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x00db: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x00dd: CHECK_CAST (r17 I:java.lang.String) = (java.lang.String) (r17 I:??[OBJECT, ARRAY]) \l0x00df: CONST  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00e1: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY] A[D('it' java.lang.String)])  (LINE:1009)\l0x00e3: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x00e5: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00e6: INVOKE  (r4 I:int) = (r17 I:java.lang.String A[D('it' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x00ea: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('$this$findAnyOf' java.lang.CharSequence)]) \l0x00ec: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x00ed: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x00ef: INVOKE  (r0 I:boolean) = (r0 I:java.lang.CharSequence), (r1 I:int), (r2 I:java.lang.CharSequence), (r3 I:int), (r4 I:int), (r5 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean A[MD:(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean (m)]\l}"];
Node_185 [shape=record,label="{185\:\ 0x00f3|LOOP_END\lLOOP:3: B:182:0x00d1\-\>B:185:0x00f3\l|0x00f3: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:182:0x00d1 \l}"];
Node_201 [shape=record,label="{201\:\ 0x00f8|SYNTHETIC\l}"];
Node_188 [shape=record,label="{188\:\ 0x00f8|0x00f8: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:1009)\l0x00fa: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_189 [shape=record,label="{189\:\ 0x00fc|0x00fc: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchingString' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:192:0x0107  (LINE:1010)\l}"];
Node_192 [shape=record,label="{192\:\ 0x0107|0x0107: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:199:0x010b  (LINE:1008)\l}"];
Node_193 [shape=record,label="{193\:\ 0x0109|LOOP_END\lLOOP:2: B:181:0x00c8\-\>B:193:0x0109\l|0x0109: ARITH  (r12 I:int) = (r12 I:int A[D('index' int)]) + (r11 I:int) \l}"];
Node_199 [shape=record,label="{199\:\ 0x010b|SYNTHETIC\l}"];
Node_200 [shape=record,label="{200\:\ 0x00fe|SYNTHETIC\l}"];
Node_190 [shape=record,label="{190\:\ 0x00fe|0x00fe: INVOKE  (r1 I:java.lang.Integer) = (r12 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:1011)\l0x0102: INVOKE  (r1 I:kotlin.Pair) = (r1 I:java.lang.Object), (r0 I:java.lang.Object A[D('matchingString' java.lang.String)]) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l}"];
Node_191 [shape=record,label="{191\:\ 0x0106|RETURN\l|0x0106: RETURN  (r1 I:kotlin.Pair\<java.lang.Integer, java.lang.String\>) \l}"];
Node_202 [shape=record,label="{202\:\ 0x00f6|SYNTHETIC\l}"];
Node_187 [shape=record,label="{187\:\ 0x00f6|0x00f6: MOVE  (r16 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) = (r8 I:??[OBJECT, ARRAY])  (LINE:1625)\l}"];
Node_178 [shape=record,label="{178\:\ 0x00c3|0x00c3: IF  (r11 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:194:0x010b \l}"];
Node_179 [shape=record,label="{179\:\ 0x00c5|0x00c5: IF  (r10 I:??[int, byte, short, char]) \> (r0 I:??[int, byte, short, char] A[D('index' int)])  \-\> B:194:0x010b \l}"];
Node_153 [shape=record,label="{153\:\ 0x004b|0x004b: INVOKE  (r1 I:int) = (r19 I:java.lang.CharSequence A[D('$this$findAnyOf' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x004f: INVOKE  (r1 I:int) = (r7 I:int), (r1 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l0x0053: INVOKE  (r1 I:kotlin.ranges.IntProgression) = (r1 I:int), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.downTo(int, int):kotlin.ranges.IntProgression A[MD:(int, int):kotlin.ranges.IntProgression (m)]\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.lang.Integer, java.lang.String\> kotlin.text.StringsKt__StringsKt.findAnyOf$StringsKt__StringsKt((r19 I:java.lang.CharSequence A[D('$this$findAnyOf' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:java.util.Collection\<java.lang.String\> A[D('strings' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:boolean A[D('last' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:146:0x002c \-\> B:149:0x0037, CROSS_EDGE: B:145:0x0028 \-\> B:146:0x002c, BACK_EDGE: B:166:0x009b \-\> B:163:0x007a, CROSS_EDGE: B:172:0x00ae \-\> B:137:?, BACK_EDGE: B:174:0x00b1 \-\> B:162:0x0071, CROSS_EDGE: B:194:0x010b \-\> B:137:?, CROSS_EDGE: B:168:0x009e \-\> B:169:0x00a0, CROSS_EDGE: B:160:0x006e \-\> B:194:0x010b, CROSS_EDGE: B:159:0x006c \-\> B:194:0x010b, CROSS_EDGE: B:158:0x006a \-\> B:161:0x0070, CROSS_EDGE: B:157:0x0068 \-\> B:159:0x006c, BACK_EDGE: B:185:0x00f3 \-\> B:182:0x00d1, CROSS_EDGE: B:191:0x0106 \-\> B:137:?, BACK_EDGE: B:193:0x0109 \-\> B:181:0x00c8, CROSS_EDGE: B:192:0x0107 \-\> B:194:0x010b, CROSS_EDGE: B:187:0x00f6 \-\> B:188:0x00f8, CROSS_EDGE: B:179:0x00c5 \-\> B:194:0x010b, CROSS_EDGE: B:178:0x00c3 \-\> B:194:0x010b, CROSS_EDGE: B:177:0x00c1 \-\> B:180:0x00c7, CROSS_EDGE: B:176:0x00bf \-\> B:178:0x00c3, CROSS_EDGE: B:153:0x004b \-\> B:154:0x0057, CROSS_EDGE: B:139:0x0005 \-\> B:150:0x0038\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x0038: r0 'index' I\l  0x0019\-0x0038: r9 'string' Ljava\/lang\/String;\l  0x0060\-0x0071: r0 'index' I\l  0x0088\-0x009b: r17 'it' Ljava\/lang\/String;\l  0x008a\-0x009b: r18 '$i$a$\-firstOrNull\-StringsKt__StringsKt$findAnyOf$matchingString$1' I\l  0x0084\-0x009e: r16 'element$iv' Ljava\/lang\/Object;\l  0x0075\-0x00a0: r13 '$this$firstOrNull$iv' Ljava\/lang\/Iterable;\l  0x0076\-0x00a0: r14 '$i$f$firstOrNull' I\l  0x00a4\-0x00af: r0 'matchingString' Ljava\/lang\/String;\l  0x0071\-0x00b3: r12 'index' I\l  0x00b7\-0x00c8: r0 'index' I\l  0x00df\-0x00f3: r17 'it' Ljava\/lang\/String;\l  0x00e1\-0x00f3: r18 '$i$a$\-firstOrNull\-StringsKt__StringsKt$findAnyOf$matchingString$2' I\l  0x00db\-0x00f6: r16 'element$iv' Ljava\/lang\/Object;\l  0x00cc\-0x00f8: r13 '$this$firstOrNull$iv' Ljava\/lang\/Iterable;\l  0x00cd\-0x00f8: r14 '$i$f$firstOrNull' I\l  0x00fc\-0x0107: r0 'matchingString' Ljava\/lang\/String;\l  0x00c8\-0x010b: r12 'index' I\l  0x0058\-0x010b: r9 'indices' Lkotlin\/ranges\/IntProgression;\l  \-1 \-0x010b: r19 '$this$findAnyOf' Ljava\/lang\/CharSequence;\l  \-1 \-0x010b: r20 'strings' Ljava\/util\/Collection;\l  \-1 \-0x010b: r21 'startIndex' I\l  \-1 \-0x010b: r22 'ignoreCase' Z\l  \-1 \-0x010b: r23 'last' Z\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/util\/Collection\<Ljava\/lang\/String;\>;IZZ)Lkotlin\/Pair\<Ljava\/lang\/Integer;Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_136;Node_136 -> Node_138;
Node_138 -> Node_139;
Node_139 -> Node_140[style=dashed];
Node_139 -> Node_150;
Node_140 -> Node_141;
Node_141 -> Node_142[style=dashed];
Node_141 -> Node_150;
Node_142 -> Node_143;
Node_143 -> Node_144[style=dashed];
Node_143 -> Node_145;
Node_144 -> Node_146;
Node_146 -> Node_148;
Node_146 -> Node_203[style=dashed];
Node_148 -> Node_149;
Node_149 -> Node_137;
Node_203 -> Node_137;
Node_145 -> Node_146;
Node_150 -> Node_151;
Node_151 -> Node_152[style=dashed];
Node_151 -> Node_153;
Node_152 -> Node_154;
Node_154 -> Node_155;
Node_155 -> Node_156[style=dashed];
Node_155 -> Node_175;
Node_156 -> Node_157;
Node_157 -> Node_158[style=dashed];
Node_157 -> Node_159;
Node_158 -> Node_159[style=dashed];
Node_158 -> Node_161;
Node_161 -> Node_162;
Node_162 -> Node_163;
Node_163 -> Node_164;
Node_164 -> Node_165[style=dashed];
Node_164 -> Node_198;
Node_165 -> Node_166;
Node_166 -> Node_163;
Node_166 -> Node_197[style=dashed];
Node_197 -> Node_169;
Node_169 -> Node_170;
Node_170 -> Node_173;
Node_170 -> Node_195[style=dashed];
Node_173 -> Node_174[style=dashed];
Node_173 -> Node_196;
Node_174 -> Node_162;
Node_196 -> Node_194;
Node_194 -> Node_137;
Node_195 -> Node_171;
Node_171 -> Node_172;
Node_172 -> Node_137;
Node_198 -> Node_168;
Node_168 -> Node_169;
Node_159 -> Node_160[style=dashed];
Node_159 -> Node_194;
Node_160 -> Node_161[style=dashed];
Node_160 -> Node_194;
Node_175 -> Node_176;
Node_176 -> Node_177[style=dashed];
Node_176 -> Node_178;
Node_177 -> Node_178[style=dashed];
Node_177 -> Node_180;
Node_180 -> Node_181;
Node_181 -> Node_182;
Node_182 -> Node_183;
Node_183 -> Node_184[style=dashed];
Node_183 -> Node_202;
Node_184 -> Node_185;
Node_185 -> Node_182;
Node_185 -> Node_201[style=dashed];
Node_201 -> Node_188;
Node_188 -> Node_189;
Node_189 -> Node_192;
Node_189 -> Node_200[style=dashed];
Node_192 -> Node_193[style=dashed];
Node_192 -> Node_199;
Node_193 -> Node_181;
Node_199 -> Node_194;
Node_200 -> Node_190;
Node_190 -> Node_191;
Node_191 -> Node_137;
Node_202 -> Node_187;
Node_187 -> Node_188;
Node_178 -> Node_179[style=dashed];
Node_178 -> Node_194;
Node_179 -> Node_180[style=dashed];
Node_179 -> Node_194;
Node_153 -> Node_154;
}

