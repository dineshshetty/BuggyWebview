digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSurrounding(Ljava\/lang\/String;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/String;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"prefix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"suffix\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|if (r4.length() \< (r5.length() + r6.length())) goto L10\l}"];
Node_26 [shape=record,label="{26\:\ 0x001e}"];
Node_27 [shape=record,label="{27\:\ 0x0028|if (kotlin.text.StringsKt.startsWith$default(r4, r5, false, 2, null) == false) goto L10\l}"];
Node_28 [shape=record,label="{28\:\ 0x002a}"];
Node_29 [shape=record,label="{29\:\ 0x0031|if (kotlin.text.StringsKt.endsWith$default(r4, r6, false, 2, null) == false) goto L10\l}"];
Node_30 [shape=record,label="{30\:\ 0x0033|java.lang.String r0 = r4.substring(r5.length(), r4.length() \- r6.length())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\")\l}"];
Node_31 [shape=record,label="{31\:\ 0x0049|RETURN\l|return r0\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x004a|RETURN\l|return r4\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.removeSurrounding((r4v0 '$this$removeSurrounding' java.lang.String A[D('$this$removeSurrounding' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'prefix' java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'suffix' java.lang.CharSequence A[D('suffix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x004a \-\> B:23:?, CROSS_EDGE: B:27:0x0028 \-\> B:32:0x004a, CROSS_EDGE: B:25:0x001c \-\> B:32:0x004a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_32;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_23;
}

