digraph "CFG forkotlin.text.StringsKt__StringsKt.trimEnd(Ljava\/lang\/CharSequence;[C)Ljava\/lang\/CharSequence;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trimEnd' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$trimEnd' java.lang.CharSequence)])  (LINE:166)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r2 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1575)\l0x0010: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|0x0012: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:34:0x002c \l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|LOOP_START\lLOOP:0: B:30:0x0014\-\>B:33:0x002a\l|0x0014: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0017: INVOKE  (r4 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]), (r3 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1576)\l0x001b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: INVOKE  (r4 I:boolean A[D('it' char)]) = (r7 I:char[] A[D('chars' char[])]), (r4 I:char A[D('it' char)]) type: STATIC call: kotlin.collections.ArraysKt.contains(char[], char):boolean A[MD:(char[], char):boolean (m)] (LINE:166)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|0x0020: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002a \l}"];
Node_33 [shape=record,label="{33\:\ 0x002a|LOOP_END\lLOOP:0: B:30:0x0014\-\>B:33:0x002a\l|0x002a: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x0014  (LINE:1575)\l}"];
Node_37 [shape=record,label="{37\:\ 0x002c|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0022|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1577)\l0x0023: ARITH  (r4 I:int) = (r3 I:int A[D('index$iv' int)]) + (1 int) \l0x0025: INVOKE  (r2 I:java.lang.CharSequence) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]), (r2 I:int), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r2 I:java.lang.CharSequence) A[SYNTHETIC] (LINE:166)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|0x002c: CONST_STR  (r2 I:java.lang.String) =  \"\"  (LINE:1579)\l0x002e: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN  (r2 I:java.lang.CharSequence)  (LINE:166)\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimEnd((r6 I:java.lang.CharSequence A[D('$this$trimEnd' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x002a \-\> B:30:0x0014, CROSS_EDGE: B:34:0x002c \-\> B:35:0x0030, CROSS_EDGE: B:29:0x0012 \-\> B:34:0x002c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0020: r4 'it' C\l  0x001c\-0x0020: r5 '$i$a$\-trimEnd\-StringsKt__StringsKt$trimEnd$1' I\l  0x0015\-0x002c: r3 'index$iv' I\l  0x000b\-0x0030: r0 '$this$trimEnd$iv' Ljava\/lang\/CharSequence;\l  0x000c\-0x0030: r1 '$i$f$trimEnd' I\l  \-1 \-0x0030: r6 '$this$trimEnd' Ljava\/lang\/CharSequence;\l  \-1 \-0x0030: r7 'chars' [C\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_36[style=dashed];
Node_33 -> Node_30;
Node_33 -> Node_37[style=dashed];
Node_37 -> Node_34;
Node_36 -> Node_32;
Node_32 -> Node_38;
Node_38 -> Node_27;
Node_34 -> Node_35;
Node_35 -> Node_27;
}

