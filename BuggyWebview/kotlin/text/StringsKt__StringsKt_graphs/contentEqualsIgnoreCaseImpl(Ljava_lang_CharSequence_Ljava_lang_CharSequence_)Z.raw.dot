digraph "CFG forkotlin.text.StringsKt__StringsKt.contentEqualsIgnoreCaseImpl(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Z" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)]) java.lang.String  (LINE:1423)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0014 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0005|0x0005: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) java.lang.String \l}"];
Node_57 [shape=record,label="{57\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0014 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)])  (LINE:1424)\l0x000a: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l0x000c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) \l0x000d: CHECK_CAST (r2 I:java.lang.String) = (java.lang.String) (r2 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.String), (r1 I:boolean) type: STATIC call: kotlin.text.StringsKt.equals(java.lang.String, java.lang.String, boolean):boolean A[MD:(java.lang.String, java.lang.String, boolean):boolean (m)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:boolean) \l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_60 [shape=record,label="{60\:\ 0x0014|0x0014: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.CharSequence)])  \-\> B:62:0x0017  (LINE:1427)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:boolean) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0017|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1428)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0018|0x0018: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x0041 \l}"];
Node_64 [shape=record,label="{64\:\ 0x001a|0x001a: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x0041 \l}"];
Node_65 [shape=record,label="{65\:\ 0x001c|0x001c: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0020: INVOKE  (r3 I:int) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_66 [shape=record,label="{66\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0027 \l}"];
Node_68 [shape=record,label="{68\:\ 0x0027|0x0027: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1430)\l0x0028: INVOKE  (r3 I:int) = (r6 I:java.lang.CharSequence A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x002c|LOOP_START\lLOOP:0: B:69:0x002c\-\>B:73:0x003d\l|0x002c: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:77:0x0040 \l}"];
Node_70 [shape=record,label="{70\:\ 0x002e|0x002e: INVOKE  (r4 I:char) = \l  (r6 I:java.lang.CharSequence A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence)])\l  (r2 I:int A[D('i' int)])\l type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1431)\l0x0032: INVOKE  (r5 I:char) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0036: INVOKE  (r4 I:boolean) = (r4 I:char), (r5 I:char), (r1 I:boolean) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)]\l}"];
Node_71 [shape=record,label="{71\:\ 0x003a|0x003a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x003d \l}"];
Node_73 [shape=record,label="{73\:\ 0x003d|LOOP_END\lLOOP:0: B:69:0x002c\-\>B:73:0x003d\l|0x003d: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:1430)\l}"];
Node_76 [shape=record,label="{76\:\ 0x003c|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x003c|RETURN\l|0x003c: RETURN  (r0 I:boolean)  (LINE:1432)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0040|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0040|RETURN\l|0x0040: RETURN  (r1 I:boolean)  (LINE:1436)\l}"];
Node_75 [shape=record,label="{75\:\ 0x0041|RETURN\l|0x0041: RETURN  (r0 I:boolean)  (LINE:1428)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.contentEqualsIgnoreCaseImpl((r6 I:java.lang.CharSequence A[D('$this$contentEqualsIgnoreCaseImpl' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x0016 \-\> B:53:?, CROSS_EDGE: B:72:0x003c \-\> B:53:?, BACK_EDGE: B:73:0x003d \-\> B:69:0x002c, CROSS_EDGE: B:74:0x0040 \-\> B:53:?, CROSS_EDGE: B:75:0x0041 \-\> B:53:?, CROSS_EDGE: B:64:0x001a \-\> B:75:0x0041, CROSS_EDGE: B:63:0x0018 \-\> B:75:0x0041, CROSS_EDGE: B:55:0x0003 \-\> B:60:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0040: r2 'i' I\l  \-1 \-0x0041: r6 '$this$contentEqualsIgnoreCaseImpl' Ljava\/lang\/CharSequence;\l  \-1 \-0x0041: r7 'other' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_60;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_60;
Node_58 -> Node_59;
Node_59 -> Node_53;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_53;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_75;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_75;
Node_65 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_75[style=dashed];
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_77;
Node_70 -> Node_71;
Node_71 -> Node_73;
Node_71 -> Node_76[style=dashed];
Node_73 -> Node_69;
Node_76 -> Node_72;
Node_72 -> Node_53;
Node_77 -> Node_74;
Node_74 -> Node_53;
Node_75 -> Node_53;
}

