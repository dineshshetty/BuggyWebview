digraph "CFG forkotlin.text.StringsKt__StringsKt.split(Ljava\/lang\/CharSequence;[Ljava\/lang\/String;ZI)Ljava\/util\/List;" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$split' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"delimiters\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('delimiters' java.lang.String[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: ARRAY_LENGTH  (r0 I:int) = (r11 I:??[] A[D('delimiters' java.lang.String[])])  (LINE:1302)\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0023 \l}"];
Node_40 [shape=record,label="{40\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1303)\l0x000f: AGET  (r2 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY][] A[D('delimiters' java.lang.String[])]), (r0 I:??[int, short, byte, char]) \l0x0011: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('delimiter' java.lang.String)])  (LINE:1304)\l0x0012: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x0014: INVOKE  (r3 I:int) = (r3 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x001b \l}"];
Node_43 [shape=record,label="{43\:\ 0x001b|0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x001c|0x001c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0023 \l}"];
Node_45 [shape=record,label="{45\:\ 0x001e|0x001e: INVOKE  (r0 I:java.util.List) = \l  (r10 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r2 I:java.lang.String A[D('delimiter' java.lang.String)])\l  (r12 I:boolean A[D('ignoreCase' boolean)])\l  (r13 I:int A[D('limit' int)])\l type: STATIC call: kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(java.lang.CharSequence, java.lang.String, boolean, int):java.util.List A[MD:(java.lang.CharSequence, java.lang.String, boolean, int):java.util.List\<java.lang.String\> (m)] (LINE:1305)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x0023|0x0023: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1309)\l0x0024: CONST  (r8 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0025: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$split' java.lang.CharSequence)]) \l0x0027: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('delimiters' java.lang.String[])]) \l0x0028: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0029: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)]) \l0x002a: INVOKE  (r0 I:kotlin.sequences.Sequence) = \l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.String[])\l  (r5 I:int)\l  (r6 I:boolean)\l  (r7 I:int)\l  (r8 I:int)\l  (r9 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence, java.lang.String[], int, boolean, int, int, java.lang.Object):kotlin.sequences.Sequence A[MD:(java.lang.CharSequence, java.lang.String[], int, boolean, int, int, java.lang.Object):kotlin.sequences.Sequence (m)]\l0x002e: INVOKE  (r0 I:java.lang.Iterable) = (r0 I:kotlin.sequences.Sequence) type: STATIC call: kotlin.sequences.SequencesKt.asIterable(kotlin.sequences.Sequence):java.lang.Iterable A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.lang.Iterable\<T\> (m)]\l0x0032: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:1627)\l0x0035: CONST  (r3 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x0037: INVOKE  (r3 I:int) = (r0 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r3 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x003b: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x003e: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x0040: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x0041: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0042: INVOKE  (r5 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1628)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0046|LOOP_START\lLOOP:0: B:48:0x0046\-\>B:50:0x004c\l|0x0046: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x004a|0x004a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x005c \l}"];
Node_50 [shape=record,label="{50\:\ 0x004c|LOOP_END\lLOOP:0: B:48:0x0046\-\>B:50:0x004c\l|0x004c: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0050: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:1629)\l0x0051: CHECK_CAST (r7 I:kotlin.ranges.IntRange) = (kotlin.ranges.IntRange) (r7 I:??[OBJECT, ARRAY]) \l0x0053: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0054: INVOKE  (r7 I:java.lang.String A[D('it' kotlin.ranges.IntRange)]) = \l  (r10 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r7 I:kotlin.ranges.IntRange A[D('it' kotlin.ranges.IntRange)])\l type: STATIC call: kotlin.text.StringsKt.substring(java.lang.CharSequence, kotlin.ranges.IntRange):java.lang.String A[MD:(java.lang.CharSequence, kotlin.ranges.IntRange):java.lang.String (m)] (LINE:1309)\l0x0058: INVOKE  \l  (r2 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r7 I:java.lang.Object A[D('it' kotlin.ranges.IntRange)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x005c|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x005c|0x005d: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0060|RETURN\l|0x0060: RETURN  (r2 I:java.util.List\<java.lang.String\>)  (LINE:1309)\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split((r10 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String[] A[D('delimiters' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:50:0x004c \-\> B:48:0x0046, CROSS_EDGE: B:52:0x0060 \-\> B:37:?, CROSS_EDGE: B:41:0x0018 \-\> B:44:0x001c, CROSS_EDGE: B:39:0x000c \-\> B:47:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0023: r2 'delimiter' Ljava\/lang\/String;\l  0x0053\-0x0058: r7 'it' Lkotlin\/ranges\/IntRange;\l  0x0054\-0x0058: r8 '$i$a$\-map\-StringsKt__StringsKt$split$1' I\l  0x0050\-0x005c: r6 'item$iv$iv' Ljava\/lang\/Object;\l  0x0040\-0x005d: r2 'destination$iv$iv' Ljava\/util\/Collection;\l  0x0041\-0x005d: r3 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0042\-0x005d: r4 '$i$f$mapTo' I\l  0x0032\-0x0060: r0 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x0033\-0x0060: r1 '$i$f$map' I\l  \-1 \-0x0060: r10 '$this$split' Ljava\/lang\/CharSequence;\l  \-1 \-0x0060: r11 'delimiters' [Ljava\/lang\/String;\l  \-1 \-0x0060: r12 'ignoreCase' Z\l  \-1 \-0x0060: r13 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;[Ljava\/lang\/String;ZI)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_47;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_44[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_47;
Node_45 -> Node_46;
Node_46 -> Node_37;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_53;
Node_50 -> Node_48;
Node_53 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_37;
}

