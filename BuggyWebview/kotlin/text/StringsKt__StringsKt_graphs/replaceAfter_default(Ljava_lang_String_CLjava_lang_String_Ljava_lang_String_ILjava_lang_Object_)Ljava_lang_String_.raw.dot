digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceAfter$default(Ljava\/lang\/String;CLjava\/lang\/String;Ljava\/lang\/String;ILjava\/lang\/Object;)Ljava\/lang\/String;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:692)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0005 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:char), (r2 I:java.lang.String), (r3 I:java.lang.String) type: STATIC call: kotlin.text.StringsKt.replaceAfter(java.lang.String, char, java.lang.String, java.lang.String):java.lang.String A[MD:(java.lang.String, char, java.lang.String, java.lang.String):java.lang.String (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:java.lang.String) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ java.lang.String kotlin.text.StringsKt__StringsKt.replaceAfter$default((r0 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:char A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0002 \-\> B:19:0x0005\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_15;
}

