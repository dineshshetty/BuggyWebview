digraph "CFG forkotlin.text.StringsKt__StringsKt.regionMatchesImpl(Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;IIZ)Z" {
Node_42 [shape=record,label="{42\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$regionMatchesImpl' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('other' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:821)\l}"];
Node_45 [shape=record,label="{45\:\ 0x000b|0x000b: IF  (r7 I:??[int, byte, short, char] A[D('otherOffset' int)]) \< (0 ??[int, byte, short, char])  \-\> B:60:0x0039 \l}"];
Node_46 [shape=record,label="{46\:\ 0x000d|0x000d: IF  (r5 I:??[int, byte, short, char] A[D('thisOffset' int)]) \< (0 ??[int, byte, short, char])  \-\> B:60:0x0039 \l}"];
Node_47 [shape=record,label="{47\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('$this$regionMatchesImpl' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0013: ARITH  (r1 I:int) = (r1 I:int) \- (r8 I:int A[D('length' int)]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0014|0x0014: IF  (r5 I:??[int, byte, short, char] A[D('thisOffset' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:60:0x0039 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0016|0x0016: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x001a: ARITH  (r1 I:int) = (r1 I:int) \- (r8 I:int A[D('length' int)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x001b|0x001b: IF  (r7 I:??[int, byte, short, char] A[D('otherOffset' int)]) \<= (r1 I:??[int, byte, short, char])  \-\> B:52:0x001e \l}"];
Node_52 [shape=record,label="{52\:\ 0x001e|0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:825)\l}"];
Node_53 [shape=record,label="{53\:\ 0x001f|LOOP_START\lLOOP:0: B:53:0x001f\-\>B:57:0x0034\l|0x001f: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r8 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:62:0x0037 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r5 I:int A[D('thisOffset' int)]) + (r1 I:int A[D('index' int)])  (LINE:826)\l0x0023: INVOKE  (r2 I:char) = (r4 I:java.lang.CharSequence A[D('$this$regionMatchesImpl' java.lang.CharSequence)]), (r2 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0027: ARITH  (r3 I:int) = (r7 I:int A[D('otherOffset' int)]) + (r1 I:int A[D('index' int)]) \l0x0029: INVOKE  (r3 I:char) = (r6 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x002d: INVOKE  (r2 I:boolean) = (r2 I:char), (r3 I:char), (r9 I:boolean A[D('ignoreCase' boolean)]) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0031|0x0031: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0034 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0034|LOOP_END\lLOOP:0: B:53:0x001f\-\>B:57:0x0034\l|0x0034: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:825)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0033|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0033|RETURN\l|0x0033: RETURN  (r0 I:boolean)  (LINE:827)\l}"];
Node_43 [shape=record,label="{43\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0037|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0037|RETURN\l|0x0037: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:829)\l0x0038: RETURN  (r0 I:boolean) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0039|RETURN\l|0x0039: RETURN  (r0 I:boolean)  (LINE:822)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.regionMatchesImpl((r4 I:java.lang.CharSequence A[D('$this$regionMatchesImpl' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('thisOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('otherOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:57:0x0034 \-\> B:53:0x001f, CROSS_EDGE: B:59:0x0038 \-\> B:43:?, CROSS_EDGE: B:60:0x0039 \-\> B:43:?, CROSS_EDGE: B:48:0x0014 \-\> B:60:0x0039, CROSS_EDGE: B:46:0x000d \-\> B:60:0x0039, CROSS_EDGE: B:45:0x000b \-\> B:60:0x0039\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0037: r1 'index' I\l  \-1 \-0x0039: r4 '$this$regionMatchesImpl' Ljava\/lang\/CharSequence;\l  \-1 \-0x0039: r5 'thisOffset' I\l  \-1 \-0x0039: r6 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0039: r7 'otherOffset' I\l  \-1 \-0x0039: r8 'length' I\l  \-1 \-0x0039: r9 'ignoreCase' Z\l}"];
MethodNode -> Node_42;Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_60;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_60;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_60;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_60[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_62;
Node_54 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_61[style=dashed];
Node_57 -> Node_53;
Node_61 -> Node_56;
Node_56 -> Node_43;
Node_62 -> Node_58;
Node_58 -> Node_43;
Node_60 -> Node_43;
}

