digraph "CFG forkotlin.text.StringsKt__StringsKt.contentEqualsImpl(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Z" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('$this$contentEqualsImpl' java.lang.CharSequence)]) java.lang.String  (LINE:1440)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x000d \l}"];
Node_58 [shape=record,label="{58\:\ 0x0004|0x0004: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) java.lang.String \l}"];
Node_59 [shape=record,label="{59\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x000d \l}"];
Node_60 [shape=record,label="{60\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = \l  (r6 I:java.lang.Object A[D('$this$contentEqualsImpl' java.lang.CharSequence)])\l  (r7 I:java.lang.Object A[D('other' java.lang.CharSequence)])\l type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:1441)\l}"];
Node_61 [shape=record,label="{61\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:boolean) \l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x000d|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1444)\l}"];
Node_63 [shape=record,label="{63\:\ 0x000e|0x000e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$contentEqualsImpl' java.lang.CharSequence)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.CharSequence)])  \-\> B:65:0x0011 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:boolean) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1445)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0012|0x0012: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$contentEqualsImpl' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0037 \l}"];
Node_67 [shape=record,label="{67\:\ 0x0014|0x0014: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0037 \l}"];
Node_68 [shape=record,label="{68\:\ 0x0016|0x0016: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence A[D('$this$contentEqualsImpl' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x001a: INVOKE  (r3 I:int) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x001e|0x001e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x0021 \l}"];
Node_71 [shape=record,label="{71\:\ 0x0021|0x0021: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1447)\l0x0022: INVOKE  (r3 I:int) = (r6 I:java.lang.CharSequence A[D('$this$contentEqualsImpl' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_72 [shape=record,label="{72\:\ 0x0026|LOOP_START\lLOOP:0: B:72:0x0026\-\>B:76:0x0033\l|0x0026: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:80:0x0036 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0028|0x0028: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence A[D('$this$contentEqualsImpl' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1448)\l0x002c: INVOKE  (r5 I:char) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l}"];
Node_74 [shape=record,label="{74\:\ 0x0030|0x0030: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0033 \l}"];
Node_76 [shape=record,label="{76\:\ 0x0033|LOOP_END\lLOOP:0: B:72:0x0026\-\>B:76:0x0033\l|0x0033: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:1447)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0032|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0032|RETURN\l|0x0032: RETURN  (r1 I:boolean)  (LINE:1449)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0036|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0036|RETURN\l|0x0036: RETURN  (r0 I:boolean)  (LINE:1453)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:boolean)  (LINE:1445)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.contentEqualsImpl((r6 I:java.lang.CharSequence A[D('$this$contentEqualsImpl' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:64:0x0010 \-\> B:55:?, CROSS_EDGE: B:75:0x0032 \-\> B:55:?, BACK_EDGE: B:76:0x0033 \-\> B:72:0x0026, CROSS_EDGE: B:77:0x0036 \-\> B:55:?, CROSS_EDGE: B:78:0x0037 \-\> B:55:?, CROSS_EDGE: B:67:0x0014 \-\> B:78:0x0037, CROSS_EDGE: B:66:0x0012 \-\> B:78:0x0037, CROSS_EDGE: B:57:0x0002 \-\> B:62:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x0036: r2 'i' I\l  \-1 \-0x0037: r6 '$this$contentEqualsImpl' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r7 'other' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_62;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_62;
Node_60 -> Node_61;
Node_61 -> Node_55;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_55;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_78;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_78;
Node_68 -> Node_69;
Node_69 -> Node_71;
Node_69 -> Node_78[style=dashed];
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_80;
Node_73 -> Node_74;
Node_74 -> Node_76;
Node_74 -> Node_79[style=dashed];
Node_76 -> Node_72;
Node_79 -> Node_75;
Node_75 -> Node_55;
Node_80 -> Node_77;
Node_77 -> Node_55;
Node_78 -> Node_55;
}

