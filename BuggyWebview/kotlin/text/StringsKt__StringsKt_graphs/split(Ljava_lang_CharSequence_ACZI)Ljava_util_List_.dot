digraph "CFG forkotlin.text.StringsKt__StringsKt.split(Ljava\/lang\/CharSequence;[CZI)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"delimiters\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|if (r10.length != 1) goto L6\l}"];
Node_30 [shape=record,label="{30\:\ 0x000e}"];
Node_31 [shape=record,label="{31\:\ 0x0019|RETURN\l|return split$StringsKt__StringsKt(r9, java.lang.String.valueOf(r10[0]), r11, r12)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|java.lang.Iterable r0 = kotlin.sequences.SequencesKt.asIterable(rangesDelimitedBy$StringsKt__StringsKt$default(r9, r10, 0, r11, r12, 2, null))\ljava.util.Collection r2 = new java.util.ArrayList(kotlin.collections.CollectionsKt.collectionSizeOrDefault(r0, 10))\ljava.util.Iterator r5 = r0.iterator()\l}"];
Node_33 [shape=record,label="{33\:\ 0x003d|LOOP_START\lLOOP:0: B:33:0x003d\-\>B:35:0x0043\l}"];
Node_34 [shape=record,label="{34\:\ 0x0041|if (r5.hasNext() == false) goto L10\l}"];
Node_35 [shape=record,label="{35\:\ 0x0043|LOOP_END\lLOOP:0: B:33:0x003d\-\>B:35:0x0043\l|java.lang.Object r6 = r5.next()\lkotlin.ranges.IntRange r7 = (kotlin.ranges.IntRange) r6\lr2.add(kotlin.text.StringsKt.substring(r9, r7))\l}"];
Node_38 [shape=record,label="{38\:\ 0x0053|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0053}"];
Node_37 [shape=record,label="{37\:\ 0x0057|RETURN\l|return (java.util.List) r2\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split((r9v0 '$this$split' java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'delimiters' char[] A[D('delimiters' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0043 \-\> B:33:0x003d, CROSS_EDGE: B:37:0x0057 \-\> B:27:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;[CZI)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_33;
Node_38 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_27;
}

