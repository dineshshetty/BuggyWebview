digraph "CFG forkotlin.text.StringsKt__StringsKt.padEnd(Ljava\/lang\/CharSequence;IC)Ljava\/lang\/CharSequence;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$padEnd' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0005|0x0005: IF  (r5 I:??[int, byte, short, char] A[D('length' int)]) \< (0 ??[int, byte, short, char])  \-\> B:48:0x0041  (LINE:252)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:254)\l}"];
Node_39 [shape=record,label="{39\:\ 0x000b|0x000b: IF  (r5 I:??[int, byte, short, char] A[D('length' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:42:0x0017 \l}"];
Node_40 [shape=record,label="{40\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:255)\l0x000e: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0012: INVOKE  (r0 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:257)\l0x0019: INVOKE  (r0 I:java.lang.StringBuilder), (r5 I:int A[D('length' int)]) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x001c: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder A[MD:(java.lang.CharSequence):java.lang.StringBuilder (c)] (LINE:258)\l0x001f: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:259)\l0x0021: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0022: INVOKE  (r3 I:int) = (r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0026: ARITH  (r3 I:int) = (r5 I:int A[D('length' int)]) \- (r3 I:int) \l0x0028: INVOKE  (r1 I:kotlin.ranges.IntRange), (r2 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x002b: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r1 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x002f|LOOP_START\lLOOP:0: B:43:0x002f\-\>B:45:0x0035\l|0x002f: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0033|0x0033: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x003d \l}"];
Node_45 [shape=record,label="{45\:\ 0x0035|LOOP_END\lLOOP:0: B:43:0x002f\-\>B:45:0x0035\l|0x0035: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0039: INVOKE  (r0 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)]), (r6 I:char A[D('padChar' char)]) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)] (LINE:260)\l}"];
Node_50 [shape=record,label="{50\:\ 0x003d|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x003d|0x003d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('sb' java.lang.StringBuilder)])  (LINE:261)\l0x003e: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0040|RETURN\l|0x0040: RETURN  (r1 I:java.lang.CharSequence) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0041|0x0041: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('sb' java.lang.StringBuilder)]) =  java.lang.IllegalArgumentException  (LINE:253)\l0x0043: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0045: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0048: CONST_STR  (r2 I:java.lang.String) =  \"Desired length \" \l0x004a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('length' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0050: CONST_STR  (r2 I:java.lang.String) =  \" is less than zero.\" \l0x0052: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0055: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0059: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x005c|0x005c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.padEnd((r4 I:java.lang.CharSequence A[D('$this$padEnd' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:char A[D('padChar' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0035 \-\> B:43:0x002f, CROSS_EDGE: B:47:0x0040 \-\> B:35:?, CROSS_EDGE: B:49:0x005c \-\> B:35:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0039\-0x003d: r2 'i' I\l  0x001c\-0x0041: r0 'sb' Ljava\/lang\/StringBuilder;\l  \-1 \-0x005c: r4 '$this$padEnd' Ljava\/lang\/CharSequence;\l  \-1 \-0x005c: r5 'length' I\l  \-1 \-0x005c: r6 'padChar' C\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_48;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_35;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_43;
Node_50 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_35;
Node_48 -> Node_49;
Node_49 -> Node_35;
}

