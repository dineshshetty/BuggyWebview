digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/String;[C)Ljava\/lang\/String;" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"chars\")\ljava.lang.CharSequence r2 = r10\lr4 = 0\lint r5 = r2.length() + (\-1)\lr6 = false\l}"];
Node_57 [shape=record,label="{57\:\ 0x0018|LOOP_START\lLOOP:0: B:57:0x0018\-\>B:77:0x0018\lPHI: r4 r5 r6 \l  PHI: (r4v1 'startIndex$iv$iv' int) = (r4v0 'startIndex$iv$iv' int), (r4v3 'startIndex$iv$iv' int) binds: [B:56:0x0000, B:77:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 'endIndex$iv$iv' int) = (r5v1 'endIndex$iv$iv' int), (r5v3 'endIndex$iv$iv' int) binds: [B:56:0x0000, B:77:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 'startFound$iv$iv' boolean) = (r6v0 'startFound$iv$iv' boolean), (r6v3 'startFound$iv$iv' boolean) binds: [B:56:0x0000, B:77:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \> r5) goto L25\l}"];
Node_58 [shape=record,label="{58\:\ 0x001a|if (r6 != false) goto L24\l}"];
Node_59 [shape=record,label="{59\:\ 0x001c|r7 = r4\l}"];
Node_61 [shape=record,label="{61\:\ 0x001f|PHI: r7 \l  PHI: (r7v2 'index$iv$iv' int) = (r7v1 'index$iv$iv' int), (r7v3 'index$iv$iv' int) binds: [B:60:0x001e, B:59:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|char r8 = r2.charAt(r7)\lboolean r8 = kotlin.collections.ArraysKt.contains(r11, r8)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0028|if (r6 != false) goto L7\l}"];
Node_72 [shape=record,label="{72\:\ 0x0031|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0031|if (r8 != false) goto L9\l}"];
Node_68 [shape=record,label="{68\:\ 0x0034|int r5 = r5 + (\-1)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0018|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0018|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0018\-\>B:77:0x0018\lPHI: r4 r5 r6 \l  PHI: (r4v3 'startIndex$iv$iv' int) = (r4v1 'startIndex$iv$iv' int), (r4v2 'startIndex$iv$iv' int), (r4v1 'startIndex$iv$iv' int) binds: [B:80:0x0018, B:79:0x0018, B:78:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 'endIndex$iv$iv' int) = (r5v2 'endIndex$iv$iv' int), (r5v2 'endIndex$iv$iv' int), (r5v4 'endIndex$iv$iv' int) binds: [B:80:0x0018, B:79:0x0018, B:78:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 'startFound$iv$iv' boolean) = (r6v2 'startFound$iv$iv' boolean), (r6v1 'startFound$iv$iv' boolean), (r6v1 'startFound$iv$iv' boolean) binds: [B:80:0x0018, B:79:0x0018, B:78:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0038|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0038|java.lang.String r0 = r2.subSequence(r4, r5 + 1).toString()\l}"];
Node_70 [shape=record,label="{70\:\ 0x0042|RETURN\l|return r0\l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,label="{76\:\ 0x002a|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x002a|if (r8 != false) goto L18\l}"];
Node_73 [shape=record,label="{73\:\ 0x002e|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x002e|int r4 = r4 + 1\l}"];
Node_79 [shape=record,label="{79\:\ 0x0018|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x002c|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x002c|r6 = true\l}"];
Node_80 [shape=record,label="{80\:\ 0x0018|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x001e|r7 = r5\l}"];
Node_71 [shape=record,label="{71\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.trim((r10v0 '$this$trim' java.lang.String A[D('$this$trim' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'chars' char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x002c \-\> B:57:0x0018, BACK_EDGE: B:65:0x002e \-\> B:57:0x0018, BACK_EDGE: B:68:0x0034 \-\> B:57:0x0018, CROSS_EDGE: B:60:0x001e \-\> B:61:0x001f, CROSS_EDGE: B:57:0x0018 \-\> B:69:0x0038\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_71;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_72;
Node_62 -> Node_76[style=dashed];
Node_72 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_75[style=dashed];
Node_68 -> Node_78;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_75 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_76 -> Node_63;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_73 -> Node_65;
Node_65 -> Node_79;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_64 -> Node_80;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

