digraph "CFG forkotlin.text.StringsKt__StringsKt.ifEmpty(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"defaultValue\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x0009|if (r1.length() != 0) goto L10\l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|r0 = true\l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v6 boolean) binds: [B:27:0x000d, B:26:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L8\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return r2.invoke()\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0015}"];
Node_31 [shape=record,label="{31\:\ 0x0016|RETURN\lORIG_RETURN\l|return r1\l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|r0 = false\l}"];
MethodNode[shape=record,label="{private static final R kotlin.text.StringsKt__StringsKt.ifEmpty((r1v0 C extends java.lang.CharSequence & R A[D('$this$ifEmpty' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'defaultValue' kotlin.jvm.functions.Function0\<? extends R\> A[D('defaultValue' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0015 \-\> B:31:0x0016, CROSS_EDGE: B:27:0x000d \-\> B:28:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, C extends java.lang.CharSequence & R]\lSIGNATURE: \<C::Ljava\/lang\/CharSequence;:TR;R:Ljava\/lang\/Object;\>(TC;Lkotlin\/jvm\/functions\/Function0\<+TR;\>;)TR;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r1v0, resolved type: C extends java.lang.CharSequence & R\}\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_32;
Node_32 -> Node_23;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_27 -> Node_28;
}

