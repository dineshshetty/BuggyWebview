digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trim' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:79)\l0x000c: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:80)\l0x0010: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:81)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0013|LOOP_START\lLOOP:0: B:57:0x0013\-\>B:77:0x0013\l|0x0013: IF  (r1 I:??[int, byte, short, char] A[D('startIndex' int)]) \> (r2 I:??[int, byte, short, char] A[D('endIndex' int)])  \-\> B:71:0x003c  (LINE:83)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0019  (LINE:84)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0017|0x0017: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x001a|0x001a: INVOKE  (r5 I:char) = (r6 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence)]), (r4 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:85)\l0x001e: INVOKE  (r5 I:java.lang.Character) = (r5 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0022: INVOKE  (r5 I:java.lang.Object) = (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0026: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x002c|0x002c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0035  (LINE:87)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0035|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0035|0x0035: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0038  (LINE:93)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0038|0x0038: ARITH  (r2 I:int) = (r2 I:int A[D('endIndex' int)]) + (\-1 int) \l}"];
Node_78 [shape=record,label="{78\:\ 0x0013|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0013|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0013\-\>B:77:0x0013\l}"];
Node_75 [shape=record,label="{75\:\ 0x003c|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x003c|0x003c: ARITH  (r4 I:int) = (r2 I:int A[D('endIndex' int)]) + (1 int)  (LINE:100)\l0x003e: INVOKE  (r4 I:java.lang.CharSequence) = (r6 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence)]), (r1 I:int A[D('startIndex' int)]), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x0042|RETURN\l|0x0042: RETURN  (r4 I:java.lang.CharSequence) \l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,label="{76\:\ 0x002e|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x002e|0x002e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0032  (LINE:88)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0032|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0032|0x0032: ARITH  (r1 I:int) = (r1 I:int A[D('startIndex' int)]) + (1 int) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0013|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0030|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0030|0x0030: CONST  (r3 I:??[boolean, int, float, short, byte, char] A[D('startFound' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:89)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0013|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0019|0x0019: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('endIndex' int)]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x003c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r6 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x0030 \-\> B:57:0x0013, BACK_EDGE: B:65:0x0032 \-\> B:57:0x0013, BACK_EDGE: B:68:0x0038 \-\> B:57:0x0013, CROSS_EDGE: B:60:0x0019 \-\> B:61:0x001a, CROSS_EDGE: B:57:0x0013 \-\> B:69:0x003c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x003b: r4 'index' I\l  0x002c\-0x003b: r5 'match' Z\l  0x000b\-0x0042: r0 '$i$f$trim' I\l  0x000c\-0x0042: r1 'startIndex' I\l  0x0012\-0x0042: r2 'endIndex' I\l  0x0013\-0x0042: r3 'startFound' Z\l  \-1 \-0x0042: r6 '$this$trim' Ljava\/lang\/CharSequence;\l  \-1 \-0x0042: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_71;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_72;
Node_62 -> Node_76[style=dashed];
Node_72 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_75[style=dashed];
Node_68 -> Node_78;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_75 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_76 -> Node_63;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_73 -> Node_65;
Node_65 -> Node_79;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_64 -> Node_80;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

