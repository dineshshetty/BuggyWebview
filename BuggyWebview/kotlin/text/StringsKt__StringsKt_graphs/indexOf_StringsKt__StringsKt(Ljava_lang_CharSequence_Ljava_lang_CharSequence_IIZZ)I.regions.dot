digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;IIZZ)I" {
subgraph cluster_Region_1959526748 {
label = "R(3:(1:41)(1:3)|4|(2:(2:8|(2:(2:(1:(2:(1:17)|(1:15)))|20)|(1:23)))|(2:25|(2:(2:(1:(2:(1:34)|(1:32)))|36)|(1:39))))) | DECL_VAR: kotlin.ranges.IntRange null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1557943800 {
label = "IF [B:89:0x0001] THEN: R(1:41) ELSE: R(1:3)";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0001|if (r15 != false) goto L41\l}"];
subgraph cluster_Region_1294381294 {
label = "R(1:41)";
node [shape=record,color=blue];
Node_91 [shape=record,label="{91\:\ 0x0017|kotlin.ranges.IntProgression r1 = kotlin.ranges.RangesKt.downTo(kotlin.ranges.RangesKt.coerceAtMost(r12, kotlin.text.StringsKt.getLastIndex(r10)), kotlin.ranges.RangesKt.coerceAtLeast(r13, 0))\l}"];
}
subgraph cluster_Region_830311655 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x0003|kotlin.ranges.IntProgression r1 = new kotlin.ranges.IntRange(kotlin.ranges.RangesKt.coerceAtLeast(r12, 0), kotlin.ranges.RangesKt.coerceAtMost(r13, r10.length()))\l}"];
}
}
Node_92 [shape=record,label="{92\:\ 0x0027|PHI: r1 \l  PHI: (r1v3 kotlin.ranges.IntProgression) = (r1v2 kotlin.ranges.IntProgression), (r1v19 kotlin.ranges.IntRange) binds: [B:91:0x0017, B:90:0x0003] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.ranges.IntProgression r0 = r1\l}"];
subgraph cluster_Region_1111672853 {
label = "R(2:(2:8|(2:(2:(1:(2:(1:17)|(1:15)))|20)|(1:23)))|(2:25|(2:(2:(1:(2:(1:34)|(1:32)))|36)|(1:39))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1357590321 {
label = "IF [B:93:0x002a, B:95:0x002e] THEN: R(2:8|(2:(2:(1:(2:(1:17)|(1:15)))|20)|(1:23))) ELSE: null";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x002a|if ((r10 instanceof java.lang.String) != false) goto L6\l}"];
Node_95 [shape=record,label="{95\:\ 0x002e|ADDED_TO_REGION\l|if ((r11 instanceof java.lang.String) != false) goto L8\l}"];
subgraph cluster_Region_1280115726 {
label = "R(2:8|(2:(2:(1:(2:(1:17)|(1:15)))|20)|(1:23)))";
node [shape=record,color=blue];
Node_96 [shape=record,label="{96\:\ 0x0030|int int r1 = r0.getFirst()\lint int r2 = r0.getLast()\lint int r3 = r0.getStep()\l}"];
subgraph cluster_Region_900353821 {
label = "R(2:(2:(1:(2:(1:17)|(1:15)))|20)|(1:23))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1429924980 {
label = "IF [B:97:0x003c, B:98:0x003e, B:99:0x0040, B:100:0x0042] THEN: R(2:(1:(2:(1:17)|(1:15)))|20) ELSE: null";
node [shape=record,color=blue];
Node_97 [shape=record,label="{97\:\ 0x003c|if (r3 \> 0) goto L10\l}"];
Node_98 [shape=record,label="{98\:\ 0x003e|ADDED_TO_REGION\l|if (r1 \<= r2) goto L11\l}"];
Node_99 [shape=record,label="{99\:\ 0x0040|ADDED_TO_REGION\l|if (r3 \< 0) goto L22\l}"];
Node_100 [shape=record,label="{100\:\ 0x0042|ADDED_TO_REGION\l|if (r2 \<= r1) goto L11\l}"];
subgraph cluster_Region_997221847 {
label = "R(2:(1:(2:(1:17)|(1:15)))|20)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1847280252 {
label = "LOOP:0: (1:(2:(1:17)|(1:15)))";
node [shape=record,color=blue];
Node_102 [shape=record,label="{102\:\ 0x0055|if (kotlin.text.StringsKt.regionMatches((java.lang.String) r11, 0, (java.lang.String) r10, r1, r11.length(), r14) == false) goto L14\l}"];
subgraph cluster_Region_199733189 {
label = "R(1:(2:(1:17)|(1:15)))";
node [shape=record,color=blue];
subgraph cluster_Region_1597099212 {
label = "R(2:(1:17)|(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_429404188 {
label = "IF [B:104:0x0058] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_104 [shape=record,label="{104\:\ 0x0058|if (r1 == r2) goto L16\l}"];
subgraph cluster_Region_1445651132 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_127 [shape=record,label="{127\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_1269644516 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_105 [shape=record,label="{105\:\ 0x005a|LOOP_END\lLOOP:0: B:101:0x0044\-\>B:105:0x005a\l|r1 += r3\l}"];
}
}
}
}
Node_103 [shape=record,label="{103\:\ 0x0057|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_832544195 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_124 [shape=record,label="{124\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
}
}
}
subgraph cluster_Region_882146473 {
label = "R(2:25|(2:(2:(1:(2:(1:34)|(1:32)))|36)|(1:39)))";
node [shape=record,color=blue];
Node_106 [shape=record,label="{106\:\ 0x005c|int int r1 = r0.getFirst()\lint int r2 = r0.getLast()\lint int r3 = r0.getStep()\l}"];
subgraph cluster_Region_120620466 {
label = "R(2:(2:(1:(2:(1:34)|(1:32)))|36)|(1:39))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2105671407 {
label = "IF [B:107:0x0068, B:108:0x006a, B:109:0x006c, B:110:0x006e] THEN: R(2:(1:(2:(1:34)|(1:32)))|36) ELSE: null";
node [shape=record,color=blue];
Node_107 [shape=record,label="{107\:\ 0x0068|if (r3 \> 0) goto L27\l}"];
Node_108 [shape=record,label="{108\:\ 0x006a|ADDED_TO_REGION\l|if (r1 \<= r2) goto L28\l}"];
Node_109 [shape=record,label="{109\:\ 0x006c|ADDED_TO_REGION\l|if (r3 \< 0) goto L38\l}"];
Node_110 [shape=record,label="{110\:\ 0x006e|ADDED_TO_REGION\l|if (r2 \<= r1) goto L28\l}"];
subgraph cluster_Region_967433144 {
label = "R(2:(1:(2:(1:34)|(1:32)))|36)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1497950245 {
label = "LOOP:1: (1:(2:(1:34)|(1:32)))";
node [shape=record,color=blue];
Node_112 [shape=record,label="{112\:\ 0x007d|if (kotlin.text.StringsKt.regionMatchesImpl(r11, 0, r10, r1, r11.length(), r14) == false) goto L31\l}"];
subgraph cluster_Region_1446411828 {
label = "R(1:(2:(1:34)|(1:32)))";
node [shape=record,color=blue];
subgraph cluster_Region_1460160844 {
label = "R(2:(1:34)|(1:32))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1311684241 {
label = "IF [B:114:0x0080] THEN: R(1:34) ELSE: null";
node [shape=record,color=blue];
Node_114 [shape=record,label="{114\:\ 0x0080|if (r1 == r2) goto L33\l}"];
subgraph cluster_Region_448051179 {
label = "R(1:34)";
node [shape=record,color=blue];
Node_128 [shape=record,label="{128\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_1775486056 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_115 [shape=record,label="{115\:\ 0x0082|LOOP_END\lLOOP:1: B:111:0x0070\-\>B:115:0x0082\l|r1 += r3\l}"];
}
}
}
}
Node_113 [shape=record,label="{113\:\ 0x007f|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_422226970 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_126 [shape=record,label="{126\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
}
}
}
}
Node_86 [shape=record,color=red,label="{86\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_88 [shape=record,color=red,label="{88\:\ 0x0000}"];
Node_94 [shape=record,color=red,label="{94\:\ 0x002c}"];
Node_120 [shape=record,color=red,label="{120\:\ 0x0044|SYNTHETIC\l}"];
Node_101 [shape=record,color=red,label="{101\:\ 0x0044|LOOP_START\lLOOP:0: B:101:0x0044\-\>B:105:0x005a\lPHI: r1 \l  PHI: (r1v15 'index' int) = (r1v12 'index' int), (r1v17 'index' int) binds: [B:120:0x0044, B:105:0x005a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_119 [shape=record,color=red,label="{119\:\ 0x0084|SYNTHETIC\l}"];
Node_87 [shape=record,color=red,label="{87\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_118 [shape=record,color=red,label="{118\:\ 0x0057|SYNTHETIC\l}"];
Node_116 [shape=record,color=red,label="{116\:\ 0x0084|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|return \-1\l}"];
Node_123 [shape=record,color=red,label="{123\:\ 0x0070|SYNTHETIC\l}"];
Node_111 [shape=record,color=red,label="{111\:\ 0x0070|LOOP_START\lLOOP:1: B:111:0x0070\-\>B:115:0x0082\lPHI: r1 \l  PHI: (r1v8 'index' int) = (r1v5 'index' int), (r1v10 'index' int) binds: [B:123:0x0070, B:115:0x0082] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_121 [shape=record,color=red,label="{121\:\ 0x0084|SYNTHETIC\l}"];
Node_122 [shape=record,color=red,label="{122\:\ 0x007f|SYNTHETIC\l}"];
Node_125 [shape=record,color=red,label="{125\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return \-1\l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt((r10v0 '$this$indexOf' java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'endIndex' int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'last' boolean A[D('last' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:105:0x005a \-\> B:101:0x0044, CROSS_EDGE: B:117:0x0085 \-\> B:87:?, CROSS_EDGE: B:100:0x0042 \-\> B:116:0x0084, CROSS_EDGE: B:99:0x0040 \-\> B:116:0x0084, CROSS_EDGE: B:98:0x003e \-\> B:101:0x0044, CROSS_EDGE: B:97:0x003c \-\> B:99:0x0040, CROSS_EDGE: B:113:0x007f \-\> B:87:?, BACK_EDGE: B:115:0x0082 \-\> B:111:0x0070, CROSS_EDGE: B:114:0x0080 \-\> B:116:0x0084, CROSS_EDGE: B:110:0x006e \-\> B:116:0x0084, CROSS_EDGE: B:109:0x006c \-\> B:116:0x0084, CROSS_EDGE: B:108:0x006a \-\> B:111:0x0070, CROSS_EDGE: B:107:0x0068 \-\> B:109:0x006c, CROSS_EDGE: B:93:0x002a \-\> B:106:0x005c, CROSS_EDGE: B:91:0x0017 \-\> B:92:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_86;Node_89 -> Node_90[style=dashed];
Node_89 -> Node_91;
Node_91 -> Node_92;
Node_90 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94;
Node_93 -> Node_106[style=dashed];
Node_95 -> Node_96;
Node_95 -> Node_106[style=dashed];
Node_96 -> Node_97;
Node_97 -> Node_98;
Node_97 -> Node_99[style=dashed];
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_120;
Node_99 -> Node_100;
Node_99 -> Node_116[style=dashed];
Node_100 -> Node_120;
Node_100 -> Node_124[style=dashed];
Node_102 -> Node_104;
Node_102 -> Node_118[style=dashed];
Node_104 -> Node_105[style=dashed];
Node_104 -> Node_119;
Node_127 -> Node_87;
Node_105 -> Node_101;
Node_103 -> Node_87;
Node_124 -> Node_87;
Node_106 -> Node_107;
Node_107 -> Node_108;
Node_107 -> Node_109[style=dashed];
Node_108 -> Node_109[style=dashed];
Node_108 -> Node_123;
Node_109 -> Node_110;
Node_109 -> Node_125[style=dashed];
Node_110 -> Node_123;
Node_110 -> Node_126[style=dashed];
Node_112 -> Node_114;
Node_112 -> Node_122[style=dashed];
Node_114 -> Node_115[style=dashed];
Node_114 -> Node_121;
Node_128 -> Node_87;
Node_115 -> Node_111;
Node_113 -> Node_87;
Node_126 -> Node_87;
Node_86 -> Node_88;
Node_88 -> Node_89;
Node_94 -> Node_95;
Node_120 -> Node_101;
Node_101 -> Node_102;
Node_119 -> Node_127;
Node_118 -> Node_103;
Node_116 -> Node_87;
Node_123 -> Node_111;
Node_111 -> Node_112;
Node_121 -> Node_128;
Node_122 -> Node_113;
Node_125 -> Node_87;
}

