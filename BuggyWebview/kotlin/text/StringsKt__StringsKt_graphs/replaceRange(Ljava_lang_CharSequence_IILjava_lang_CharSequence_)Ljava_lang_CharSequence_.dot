digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceRange(Ljava\/lang\/CharSequence;IILjava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"replacement\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|if (r5 \< r4) goto L6\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r3, 0, r4)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this.append(value, startIndex, endIndex)\")\lr0.append(r6)\lr0.append(r3, r5, r3.length())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this.append(value, startIndex, endIndex)\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|RETURN\l|return r0\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"End index (\")\lr1.append(r5)\lr1.append(\") is less than start index (\")\lr1.append(r4)\lr1.append(\").\")\l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|throw new java.lang.IndexOutOfBoundsException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.replaceRange((r3v0 '$this$replaceRange' java.lang.CharSequence A[D('$this$replaceRange' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'endIndex' int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'replacement' java.lang.CharSequence A[D('replacement' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x004e \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

