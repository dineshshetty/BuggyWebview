digraph "CFG forkotlin.text.StringsKt__StringsKt.padStart(Ljava\/lang\/CharSequence;IC)Ljava\/lang\/CharSequence;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
Node_37 [shape=record,label="{37\:\ 0x0005|if (r5 \< 0) goto L15\l}"];
Node_38 [shape=record,label="{38\:\ 0x0007}"];
Node_39 [shape=record,label="{39\:\ 0x000b|if (r5 \> r4.length()) goto L8\l}"];
Node_40 [shape=record,label="{40\:\ 0x000d}"];
Node_41 [shape=record,label="{41\:\ 0x0016|RETURN\l|return r4.subSequence(0, r4.length())\l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0017|java.lang.StringBuilder r0 = new java.lang.StringBuilder(r5)\lkotlin.collections.IntIterator r1 = new kotlin.ranges.IntRange(1, r5 \- r4.length()).iterator()\l}"];
Node_43 [shape=record,label="{43\:\ 0x002c|LOOP_START\lLOOP:0: B:43:0x002c\-\>B:45:0x0032\l}"];
Node_44 [shape=record,label="{44\:\ 0x0030|if (r1.hasNext() == false) goto L12\l}"];
Node_45 [shape=record,label="{45\:\ 0x0032|LOOP_END\lLOOP:0: B:43:0x002c\-\>B:45:0x0032\l|r1.nextInt()\lr0.append(r6)\l}"];
Node_50 [shape=record,label="{50\:\ 0x003a|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x003a|r0.append(r4)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0040|RETURN\l|return r0\l}"];
Node_48 [shape=record,label="{48\:\ 0x0041|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Desired length \")\lr1.append(r5)\lr1.append(\" is less than zero.\")\l}"];
Node_49 [shape=record,label="{49\:\ 0x005c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.padStart((r4v0 '$this$padStart' java.lang.CharSequence A[D('$this$padStart' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'padChar' char A[D('padChar' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0032 \-\> B:43:0x002c, CROSS_EDGE: B:47:0x0040 \-\> B:35:?, CROSS_EDGE: B:49:0x005c \-\> B:35:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v3, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_48;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_35;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_43;
Node_50 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_35;
Node_48 -> Node_49;
Node_49 -> Node_35;
}

