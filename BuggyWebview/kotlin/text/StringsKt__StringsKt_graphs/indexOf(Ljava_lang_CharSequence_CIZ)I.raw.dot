digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOf(Ljava\/lang\/CharSequence;CIZ)I" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$indexOf' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0005|0x0005: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0014  (LINE:1087)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0007|0x0007: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$indexOf' java.lang.CharSequence)]) java.lang.String \l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000c \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$indexOf' java.lang.CharSequence)])  (LINE:1090)\l0x000d: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r0 I:int) = (r0 I:java.lang.String), (r3 I:int A[D('char' char)]), (r4 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.String.indexOf(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:1087)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|0x0014: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1088)\l0x0015: NEW_ARRAY  (r0 I:char[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: char[] \l0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: APUT  (r0 I:char[] A[IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r3 I:char A[D('char' char), IMMUTABLE_TYPE]) \l0x001a: INVOKE  (r0 I:int) = \l  (r2 I:java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence)])\l  (r0 I:char[])\l  (r4 I:int A[D('startIndex' int)])\l  (r5 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.indexOfAny(java.lang.CharSequence, char[], int, boolean):int A[MD:(java.lang.CharSequence, char[], int, boolean):int (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN  (r0 I:int)  (LINE:1087)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.indexOf((r2 I:java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:char A[D('char' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0014 \-\> B:31:0x001e, CROSS_EDGE: B:25:0x0005 \-\> B:30:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001e: r2 '$this$indexOf' Ljava\/lang\/CharSequence;\l  \-1 \-0x001e: r3 'char' C\l  \-1 \-0x001e: r4 'startIndex' I\l  \-1 \-0x001e: r5 'ignoreCase' Z\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_32 -> Node_23;
Node_30 -> Node_31;
Node_31 -> Node_23;
}

