digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSurrounding(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$removeSurrounding' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"suffix\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('suffix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:638)\l0x0013: INVOKE  (r1 I:int) = (r5 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0017: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x001b: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|0x001d: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:34:0x003f \l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|0x001f: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0020: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: INVOKE  (r3 I:boolean) = \l  (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)])\l  (r5 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)])\l  (r2 I:boolean)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.startsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0025|0x0025: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x003f \l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|0x0027: INVOKE  (r0 I:boolean) = \l  (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)])\l  (r6 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence)])\l  (r2 I:boolean)\l  (r0 I:int)\l  (r1 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x003f \l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|0x002d: INVOKE  (r0 I:int) = (r5 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:639)\l0x0031: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0035: INVOKE  (r2 I:int) = (r6 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0039: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x003a: INVOKE  (r0 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x003e|RETURN\l|0x003e: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x003f|0x003f: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:641)\l0x0043: INVOKE  (r0 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence)]), (r2 I:int), (r0 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0047|RETURN\l|0x0047: RETURN  (r0 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeSurrounding((r4 I:java.lang.CharSequence A[D('$this$removeSurrounding' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0047 \-\> B:25:?, CROSS_EDGE: B:29:0x0025 \-\> B:34:0x003f, CROSS_EDGE: B:27:0x001d \-\> B:34:0x003f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0047: r4 '$this$removeSurrounding' Ljava\/lang\/CharSequence;\l  \-1 \-0x0047: r5 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0047: r6 'suffix' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

