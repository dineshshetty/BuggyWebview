digraph "CFG forkotlin.text.StringsKt__StringsKt.removePrefix(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$removePrefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:593)\l0x000b: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r1 I:boolean) = \l  (r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence)])\l  (r4 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)])\l  (r0 I:boolean)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.startsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0020 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:594)\l0x0017: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x001b: INVOKE  (r0 I:java.lang.CharSequence) = (r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|RETURN\l|0x001f: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|0x0020: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:596)\l0x0024: INVOKE  (r0 I:java.lang.CharSequence) = (r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removePrefix((r3 I:java.lang.CharSequence A[D('$this$removePrefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0028 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0028: r3 '$this$removePrefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0028: r4 'prefix' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

