digraph "CFG forkotlin.text.StringsKt__StringsKt.lastIndexOfAny(Ljava\/lang\/CharSequence;[CIZ)I" {
Node_56 [shape=record,label="{56\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_58 [shape=record,label="{58\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r11 I:java.lang.Object A[D('$this$lastIndexOfAny' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r12 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:956)\l}"];
Node_59 [shape=record,label="{59\:\ 0x000b|0x000b: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0020 \l}"];
Node_60 [shape=record,label="{60\:\ 0x000d|0x000d: ARRAY_LENGTH  (r1 I:int) = (r12 I:??[] A[D('chars' char[])]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0020 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0010|0x0010: INSTANCE_OF  (r1 I:boolean) = (r11 I:??[OBJECT, ARRAY] A[D('$this$lastIndexOfAny' java.lang.CharSequence)]) java.lang.String \l}"];
Node_63 [shape=record,label="{63\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0020 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0014|0x0014: INVOKE  (r0 I:char) = (r12 I:char[] A[D('chars' char[])]) type: STATIC call: kotlin.collections.ArraysKt.single(char[]):char A[MD:(char[]):char (m)] (LINE:957)\l0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$this$lastIndexOfAny' java.lang.CharSequence)])  (LINE:958)\l0x0019: CHECK_CAST (r1 I:java.lang.String) = (java.lang.String) (r1 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r0 I:int A[D('char' char)]), (r13 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.String.lastIndexOf(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:int) \l}"];
Node_57 [shape=record,label="{57\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_66 [shape=record,label="{66\:\ 0x0020|0x0020: INVOKE  (r1 I:int) = (r11 I:java.lang.CharSequence A[D('$this$lastIndexOfAny' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)] (LINE:962)\l0x0024: INVOKE  (r1 I:int) = (r13 I:int A[D('startIndex' int)]), (r1 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_67 [shape=record,label="{67\:\ 0x0028|LOOP_START\lLOOP:0: B:67:0x0028\-\>B:78:0x0049\l|0x0028: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0029|0x0029: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('index' int)])  \-\> B:81:0x004c \l}"];
Node_69 [shape=record,label="{69\:\ 0x002b|0x002b: INVOKE  (r2 I:char) = (r11 I:java.lang.CharSequence A[D('$this$lastIndexOfAny' java.lang.CharSequence)]), (r1 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:963)\l0x002f: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('chars' char[])])  (LINE:964)\l0x0030: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: ARRAY_LENGTH  (r5 I:int) = (r3 I:??[] A[D('$this$any$iv' char[])])  (LINE:1620)\l0x0032: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0034|LOOP_START\lLOOP:1: B:70:0x0034\-\>B:74:0x0042\l|0x0034: IF  (r7 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:82:0x0046 \l}"];
Node_71 [shape=record,label="{71\:\ 0x0036|0x0036: AGET  (r8 I:char A[IMMUTABLE_TYPE]) = (r3 I:char[] A[D('$this$any$iv' char[]), IMMUTABLE_TYPE]), (r7 I:??[int, short, byte, char]) \l0x0038: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' char)]) \l0x0039: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003a: INVOKE  (r9 I:boolean A[D('it' char)]) = (r9 I:char A[D('it' char)]), (r2 I:char A[D('charAtIndex' char)]), (r14 I:boolean A[D('ignoreCase' boolean)]) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)] (LINE:964)\l}"];
Node_72 [shape=record,label="{72\:\ 0x003e|0x003e: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0042 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0042|LOOP_END\lLOOP:1: B:70:0x0034\-\>B:74:0x0042\l|0x0042: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_83 [shape=record,label="{83\:\ 0x0040|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0040|0x0040: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0046|0x0046: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0049  (LINE:964)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0049|LOOP_END\lLOOP:0: B:67:0x0028\-\>B:78:0x0049\l|0x0049: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (\-1 int)  (LINE:962)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0048|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0048|RETURN\l|0x0048: RETURN  (r1 I:int A[D('index' int)])  (LINE:965)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0046|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x004c|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x004c|RETURN\l|0x004c: RETURN  (r2 I:int)  (LINE:968)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.lastIndexOfAny((r11 I:java.lang.CharSequence A[D('$this$lastIndexOfAny' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:77:0x0048 \-\> B:57:?, BACK_EDGE: B:78:0x0049 \-\> B:67:0x0028, BACK_EDGE: B:74:0x0042 \-\> B:70:0x0034, CROSS_EDGE: B:70:0x0034 \-\> B:76:0x0046, CROSS_EDGE: B:79:0x004c \-\> B:57:?, CROSS_EDGE: B:61:0x000e \-\> B:66:0x0020, CROSS_EDGE: B:59:0x000b \-\> B:66:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0020: r0 'char' C\l  0x0039\-0x003e: r9 'it' C\l  0x003a\-0x003e: r10 '$i$a$\-any\-StringsKt__StringsKt$lastIndexOfAny$1' I\l  0x0038\-0x0045: r8 'element$iv' C\l  0x0030\-0x0046: r3 '$this$any$iv' [C\l  0x0031\-0x0046: r4 '$i$f$any' I\l  0x002f\-0x0049: r2 'charAtIndex' C\l  0x0028\-0x004c: r1 'index' I\l  \-1 \-0x004c: r11 '$this$lastIndexOfAny' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r12 'chars' [C\l  \-1 \-0x004c: r13 'startIndex' I\l  \-1 \-0x004c: r14 'ignoreCase' Z\l}"];
MethodNode -> Node_56;Node_56 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_66;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_66;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_66;
Node_64 -> Node_65;
Node_65 -> Node_57;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_81;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_82;
Node_71 -> Node_72;
Node_72 -> Node_74;
Node_72 -> Node_83[style=dashed];
Node_74 -> Node_70;
Node_83 -> Node_73;
Node_73 -> Node_76;
Node_76 -> Node_78;
Node_76 -> Node_80[style=dashed];
Node_78 -> Node_67;
Node_80 -> Node_77;
Node_77 -> Node_57;
Node_82 -> Node_76;
Node_81 -> Node_79;
Node_79 -> Node_57;
}

