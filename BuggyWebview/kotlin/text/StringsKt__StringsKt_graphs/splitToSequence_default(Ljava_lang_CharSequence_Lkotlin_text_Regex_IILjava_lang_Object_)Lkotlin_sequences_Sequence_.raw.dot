digraph "CFG forkotlin.text.StringsKt__StringsKt.splitToSequence$default(Ljava\/lang\/CharSequence;Lkotlin\/text\/Regex;IILjava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:1387)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0005 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: CONST_STR  (r3 I:java.lang.String) =  \"\<this\>\" \l0x0007: INVOKE  (r0 I:java.lang.Object A[D('$this$splitToSequence_u24default' java.lang.CharSequence)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r3 I:java.lang.String) =  \"regex\" \l0x000c: INVOKE  (r1 I:java.lang.Object A[D('regex' kotlin.text.Regex)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: INVOKE  (r3 I:kotlin.sequences.Sequence) = \l  (r1 I:kotlin.text.Regex A[D('regex' kotlin.text.Regex)])\l  (r0 I:java.lang.CharSequence A[D('$this$splitToSequence_u24default' java.lang.CharSequence)])\l  (r2 I:int A[D('limit' int)])\l type: VIRTUAL call: kotlin.text.Regex.splitToSequence(java.lang.CharSequence, int):kotlin.sequences.Sequence A[MD:(java.lang.CharSequence, int):kotlin.sequences.Sequence\<java.lang.String\> (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|RETURN\l|0x0013: RETURN  (r3 I:kotlin.sequences.Sequence) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ kotlin.sequences.Sequence kotlin.text.StringsKt__StringsKt.splitToSequence$default((r0 I:java.lang.CharSequence A[D('$this$splitToSequence_u24default' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:kotlin.text.Regex A[D('regex' kotlin.text.Regex), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0002 \-\> B:19:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0013: r0 '$this$splitToSequence_u24default' Ljava\/lang\/CharSequence;\l  \-1 \-0x0013: r1 'regex' Lkotlin\/text\/Regex;\l  \-1 \-0x0013: r2 'limit' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_15;
}

