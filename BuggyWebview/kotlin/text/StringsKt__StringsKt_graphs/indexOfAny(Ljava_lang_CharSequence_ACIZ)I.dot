digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOfAny(Ljava\/lang\/CharSequence;[CIZ)I" {
Node_60 [shape=record,label="{60\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"chars\")\l}"];
Node_63 [shape=record,label="{63\:\ 0x000b|if (r15 != false) goto L10\l}"];
Node_64 [shape=record,label="{64\:\ 0x000d}"];
Node_65 [shape=record,label="{65\:\ 0x000e|if (r13.length != 1) goto L10\l}"];
Node_66 [shape=record,label="{66\:\ 0x0010}"];
Node_67 [shape=record,label="{67\:\ 0x0012|if ((r12 instanceof java.lang.String) == false) goto L10\l}"];
Node_68 [shape=record,label="{68\:\ 0x0014|java.lang.String r1 = (java.lang.String) r12\l}"];
Node_69 [shape=record,label="{69\:\ 0x001f|RETURN\l|return r1.indexOf(kotlin.collections.ArraysKt.single(r13), r14)\l}"];
Node_61 [shape=record,label="{61\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x0020|kotlin.collections.IntIterator r1 = new kotlin.ranges.IntRange(kotlin.ranges.RangesKt.coerceAtLeast(r14, 0), kotlin.text.StringsKt.getLastIndex(r12)).iterator()\l}"];
Node_71 [shape=record,label="{71\:\ 0x0032|LOOP_START\lLOOP:0: B:71:0x0032\-\>B:80:0x0056\l}"];
Node_72 [shape=record,label="{72\:\ 0x0036|if (r1.hasNext() == false) goto L27\l}"];
Node_73 [shape=record,label="{73\:\ 0x0038|int r3 = r1.nextInt()\lchar r4 = r12.charAt(r3)\lint r7 = r13.length\lr8 = 0\l}"];
Node_74 [shape=record,label="{74\:\ 0x0044|LOOP_START\lLOOP:1: B:74:0x0044\-\>B:78:0x0052\lPHI: r8 \l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:73:0x0038, B:78:0x0052] A[DONT_GENERATE, DONT_INLINE]\l|if (r8 \>= r7) goto L24\l}"];
Node_75 [shape=record,label="{75\:\ 0x0046|char r9 = r13[r8]\l}"];
Node_76 [shape=record,label="{76\:\ 0x004e|if (kotlin.text.CharsKt.equals(r9, r4, r15) == false) goto L17\l}"];
Node_78 [shape=record,label="{78\:\ 0x0052|LOOP_END\lLOOP:1: B:74:0x0044\-\>B:78:0x0052\l|int r8 = r8 + 1\l}"];
Node_89 [shape=record,label="{89\:\ 0x0050|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0050|r5 = true\l}"];
Node_87 [shape=record,label="{87\:\ 0x0056|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0056|LOOP_END\lLOOP:0: B:71:0x0032\-\>B:80:0x0056\lPHI: r5 \l  PHI: (r5v2 boolean) = (r5v1 boolean), (r5v3 boolean) binds: [B:86:0x0056, B:87:0x0056] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L11\l}"];
Node_84 [shape=record,label="{84\:\ 0x0058|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0058|RETURN\l|return r3\l}"];
Node_88 [shape=record,label="{88\:\ 0x0055|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x0055|r5 = false\l}"];
Node_86 [shape=record,label="{86\:\ 0x0056|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0059|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0059|RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.indexOfAny((r12v0 '$this$indexOfAny' java.lang.CharSequence A[D('$this$indexOfAny' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'chars' char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:80:0x0056 \-\> B:71:0x0032, CROSS_EDGE: B:81:0x0058 \-\> B:61:?, BACK_EDGE: B:78:0x0052 \-\> B:74:0x0044, CROSS_EDGE: B:79:0x0055 \-\> B:80:0x0056, CROSS_EDGE: B:83:0x005a \-\> B:61:?, CROSS_EDGE: B:65:0x000e \-\> B:70:0x0020, CROSS_EDGE: B:63:0x000b \-\> B:70:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_60;Node_60 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_70;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_70;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_70;
Node_68 -> Node_69;
Node_69 -> Node_61;
Node_70 -> Node_71;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_85;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_88;
Node_75 -> Node_76;
Node_76 -> Node_78;
Node_76 -> Node_89[style=dashed];
Node_78 -> Node_74;
Node_89 -> Node_77;
Node_77 -> Node_87;
Node_87 -> Node_80;
Node_80 -> Node_71;
Node_80 -> Node_84[style=dashed];
Node_84 -> Node_81;
Node_81 -> Node_61;
Node_88 -> Node_79;
Node_79 -> Node_86;
Node_86 -> Node_80;
Node_85 -> Node_82;
Node_82 -> Node_61;
}

