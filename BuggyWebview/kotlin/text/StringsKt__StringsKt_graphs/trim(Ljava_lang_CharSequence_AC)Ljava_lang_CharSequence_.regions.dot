digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;[C)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_578071357 {
label = "R(4:1|(3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))|13|14)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"chars\")\lint r2 = 0\lint int r3 = r8.length() \- 1\lboolean r4 = false\l}"];
subgraph cluster_LoopRegion_417293253 {
label = "LOOP:0: (3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x0014|LOOP_START\lLOOP:0: B:57:0x0014\-\>B:77:0x0014\lPHI: r2 r3 r4 \l  PHI: (r2v1 'startIndex$iv' int) = (r2v0 'startIndex$iv' int), (r2v3 'startIndex$iv' int) binds: [B:56:0x0000, B:77:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'endIndex$iv' int) = (r3v1 'endIndex$iv' int), (r3v3 'endIndex$iv' int) binds: [B:56:0x0000, B:77:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'startFound$iv' boolean) = (r4v0 'startFound$iv' boolean), (r4v3 'startFound$iv' boolean) binds: [B:56:0x0000, B:77:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \<= r3) goto L3\l}"];
subgraph cluster_Region_682789985 {
label = "R(3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0016|int r5 = !r4 ? r2 : r3\l}"];
Node_61 [shape=record,label="{61\:\ 0x001b|PHI: r5 \l  PHI: (r5v2 'index$iv' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|char char r6 = r8.charAt(r5)\lboolean boolean r6 = kotlin.collections.ArraysKt.contains(r9, r6)\l}"];
subgraph cluster_IfRegion_849689319 {
label = "IF [B:62:0x0024] THEN: R(1:(1:19)(1:22)) ELSE: R(1:(1:12)(1:9))";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x0024|if (r4 == false) goto L16\l}"];
subgraph cluster_Region_1965844650 {
label = "R(1:(1:19)(1:22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_248019286 {
label = "IF [B:63:0x0026] THEN: R(1:19) ELSE: R(1:22)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x0026|if (r6 == true) goto L18\l}"];
subgraph cluster_Region_296614298 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x002a|r2++\l}"];
}
subgraph cluster_Region_1359456841 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x0028|r4 = true\l}"];
}
}
}
subgraph cluster_Region_1715484961 {
label = "R(1:(1:12)(1:9)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1719695145 {
label = "IF [B:66:0x002d] THEN: R(1:12) ELSE: R(1:9) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x002d|if (r6 != true) goto L12\l}"];
subgraph cluster_Region_412130775 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0034|SYNTHETIC\lEDGE_INSN: B:76:0x0034\-\>B:69:0x0034 ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_798549769 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x0030|r3\-\-\l}"];
}
}
}
}
}
}
Node_69 [shape=record,label="{69\:\ 0x0034|EDGE_INSN: B:76:0x0034\-\>B:69:0x0034 ?: BREAK  \l|java.lang.CharSequence java.lang.CharSequence r0 = r8.subSequence(r2, r3 + 1)\l}"];
Node_70 [shape=record,label="{70\:\ 0x003a|RETURN\l|return r0\l}"];
}
Node_54 [shape=record,color=red,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0018}"];
Node_72 [shape=record,color=red,label="{72\:\ 0x002d|SYNTHETIC\l}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x0014|SYNTHETIC\l}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0014|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0014\-\>B:77:0x0014\lPHI: r2 r3 r4 \l  PHI: (r2v3 'startIndex$iv' int) = (r2v1 'startIndex$iv' int), (r2v2 'startIndex$iv' int), (r2v1 'startIndex$iv' int) binds: [B:80:0x0014, B:79:0x0014, B:78:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'endIndex$iv' int) = (r3v2 'endIndex$iv' int), (r3v2 'endIndex$iv' int), (r3v4 'endIndex$iv' int) binds: [B:80:0x0014, B:79:0x0014, B:78:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v3 'startFound$iv' boolean) = (r4v2 'startFound$iv' boolean), (r4v1 'startFound$iv' boolean), (r4v1 'startFound$iv' boolean) binds: [B:80:0x0014, B:79:0x0014, B:78:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_55 [shape=record,color=red,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_75 [shape=record,color=red,label="{75\:\ 0x0026|SYNTHETIC\l}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x002a|SYNTHETIC\l}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0014|SYNTHETIC\l}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0028|SYNTHETIC\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x0014|SYNTHETIC\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x001a}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r8v0 '$this$trim' java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'chars' char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x0028 \-\> B:57:0x0014, BACK_EDGE: B:65:0x002a \-\> B:57:0x0014, BACK_EDGE: B:68:0x0030 \-\> B:57:0x0014, CROSS_EDGE: B:60:0x001a \-\> B:61:0x001b, CROSS_EDGE: B:57:0x0014 \-\> B:69:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_54;Node_56 -> Node_57;
Node_57 -> Node_58;
Node_57 -> Node_71[style=dashed];
Node_58 -> Node_59;
Node_58 -> Node_60;
Node_61 -> Node_62;
Node_62 -> Node_72[style=dashed];
Node_62 -> Node_75;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_65 -> Node_79;
Node_64 -> Node_80;
Node_66 -> Node_68[style=dashed];
Node_66 -> Node_76;
Node_76 -> Node_69;
Node_68 -> Node_78;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_54 -> Node_56;
Node_59 -> Node_61;
Node_72 -> Node_66;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_75 -> Node_63;
Node_73 -> Node_65;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

