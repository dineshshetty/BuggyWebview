digraph "CFG forkotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(Ljava\/lang\/CharSequence;[Ljava\/lang\/String;IZI)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r7 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:1263)\l0x0003: INVOKE  (r0 I:java.util.List) = (r4 I:java.lang.Object[] A[D('delimiters' java.lang.String[])]) type: STATIC call: kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List A[MD:\<T\>:(T[]):java.util.List\<T\> (m)] (LINE:1264)\l0x0007: NEW_INSTANCE  (r1 I:kotlin.text.DelimitedRangesSequence) =  kotlin.text.DelimitedRangesSequence  (LINE:1266)\l0x0009: NEW_INSTANCE  (r2 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2) =  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2 \l0x000b: INVOKE  \l  (r2 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2)\l  (r0 I:java.util.List A[D('delimitersList' java.util.List)])\l  (r6 I:boolean A[D('ignoreCase' boolean)])\l type: DIRECT call: kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2.\<init\>(java.util.List, boolean):void A[MD:(java.util.List\<java.lang.String\>, boolean):void (m)]\l0x000e: CHECK_CAST (r2 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r2 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  \l  (r1 I:kotlin.text.DelimitedRangesSequence)\l  (r3 I:java.lang.CharSequence A[D('$this$rangesDelimitedBy' java.lang.CharSequence)])\l  (r5 I:int A[D('startIndex' int)])\l  (r7 I:int A[D('limit' int)])\l  (r2 I:kotlin.jvm.functions.Function2)\l type: DIRECT call: kotlin.text.DelimitedRangesSequence.\<init\>(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2):void A[MD:(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2\<? super java.lang.CharSequence, ? super java.lang.Integer, kotlin.Pair\<java.lang.Integer, java.lang.Integer\>\>):void (m)]\l0x0013: CHECK_CAST (r1 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|RETURN\l|0x0015: RETURN  (r1 I:kotlin.sequences.Sequence\<kotlin.ranges.IntRange\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<kotlin.ranges.IntRange\> kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt((r3 I:java.lang.CharSequence A[D('$this$rangesDelimitedBy' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String[] A[D('delimiters' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0015: r0 'delimitersList' Ljava\/util\/List;\l  \-1 \-0x0015: r3 '$this$rangesDelimitedBy' Ljava\/lang\/CharSequence;\l  \-1 \-0x0015: r4 'delimiters' [Ljava\/lang\/String;\l  \-1 \-0x0015: r5 'startIndex' I\l  \-1 \-0x0015: r6 'ignoreCase' Z\l  \-1 \-0x0015: r7 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;[Ljava\/lang\/String;IZI)Lkotlin\/sequences\/Sequence\<Lkotlin\/ranges\/IntRange;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

