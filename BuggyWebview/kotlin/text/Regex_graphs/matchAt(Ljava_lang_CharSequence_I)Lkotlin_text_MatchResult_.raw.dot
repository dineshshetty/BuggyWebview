digraph "CFG forkotlin.text.Regex.matchAt(Ljava\/lang\/CharSequence;I)Lkotlin\/text\/MatchResult;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:java.util.regex.Pattern) = (r4 I:kotlin.text.Regex) kotlin.text.Regex.nativePattern java.util.regex.Pattern  (LINE:149)\l0x0007: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Pattern), (r5 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r1 I:boolean) type: VIRTUAL call: java.util.regex.Matcher.useAnchoringBounds(boolean):java.util.regex.Matcher A[MD:(boolean):java.util.regex.Matcher (c)]\l0x0010: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r1 I:boolean) type: VIRTUAL call: java.util.regex.Matcher.useTransparentBounds(boolean):java.util.regex.Matcher A[MD:(boolean):java.util.regex.Matcher (c)]\l0x0015: INVOKE  (r1 I:int) = (r5 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0019: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r6 I:int A[D('index' int)]), (r1 I:int) type: VIRTUAL call: java.util.regex.Matcher.region(int, int):java.util.regex.Matcher A[MD:(int, int):java.util.regex.Matcher (c)]\l0x001d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: INVOKE  (r2 I:boolean) = (r0 I:java.util.regex.Matcher A[D('$this$matchAt_u24lambda_u2d1' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.lookingAt():boolean A[MD:():boolean (c)] (LINE:150)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: NEW_INSTANCE  (r2 I:kotlin.text.MatcherMatchResult) =  kotlin.text.MatcherMatchResult \l0x0026: CONST_STR  (r3 I:java.lang.String) =  \"this\" \l0x0028: INVOKE  (r0 I:java.lang.Object A[D('$this$matchAt_u24lambda_u2d1' java.util.regex.Matcher)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x002b: INVOKE  \l  (r2 I:kotlin.text.MatcherMatchResult)\l  (r0 I:java.util.regex.Matcher A[D('$this$matchAt_u24lambda_u2d1' java.util.regex.Matcher)])\l  (r5 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l type: DIRECT call: kotlin.text.MatcherMatchResult.\<init\>(java.util.regex.Matcher, java.lang.CharSequence):void A[MD:(java.util.regex.Matcher, java.lang.CharSequence):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|0x0030: CHECK_CAST (r2 I:kotlin.text.MatchResult) = (kotlin.text.MatchResult) (r2 I:??[OBJECT, ARRAY])  (LINE:149)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|RETURN\l|0x0032: RETURN  (r2 I:kotlin.text.MatchResult)  (LINE:151)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlin.text.MatchResult kotlin.text.Regex.matchAt((r4 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:14:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0030: r0 '$this$matchAt_u24lambda_u2d1' Ljava\/util\/regex\/Matcher;\l  0x001e\-0x0030: r1 '$i$a$\-run\-Regex$matchAt$1' I\l  \-1 \-0x0032: r5 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0032: r6 'index' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

