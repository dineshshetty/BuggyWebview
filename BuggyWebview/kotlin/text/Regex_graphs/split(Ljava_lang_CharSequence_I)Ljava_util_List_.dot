digraph "CFG forkotlin.text.Regex.split(Ljava\/lang\/CharSequence;I)Ljava\/util\/List;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"input\")\lkotlin.text.StringsKt.requireNonNegativeLimit(r7)\ljava.util.regex.Matcher r0 = r5.nativePattern.matcher(r6)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|if (r7 == 1) goto L20\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011}"];
Node_28 [shape=record,label="{28\:\ 0x0015|if (r0.find() != false) goto L5\l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|r2 = 10\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|if (r7 \<= 0) goto L8\l}"];
Node_32 [shape=record,label="{32\:\ 0x001e|int r2 = kotlin.ranges.RangesKt.coerceAtMost(r7, 10)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|PHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v5 int) binds: [B:31:0x001c, B:32:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|java.util.ArrayList r1 = new java.util.ArrayList(r2)\lr2 = 0\lint r3 = r7 + (\-1)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|LOOP_START\lLOOP:0: B:34:0x0028\-\>B:39:0x0047\lPHI: r2 \l  PHI: (r2v3 'lastStart' int) = (r2v2 'lastStart' int), (r2v4 'lastStart' int) binds: [B:33:0x0022, B:39:0x0047] A[DONT_GENERATE, DONT_INLINE]\l|r1.add(r6.subSequence(r2, r0.start()).toString())\lint r2 = r0.end()\l}"];
Node_35 [shape=record,label="{35\:\ 0x003b|if (r3 \< 0) goto L17\l}"];
Node_36 [shape=record,label="{36\:\ 0x003d}"];
Node_37 [shape=record,label="{37\:\ 0x0041|if (r1.size() == r3) goto L13\l}"];
Node_44 [shape=record,label="{44\:\ 0x0049|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0049|r1.add(r6.subSequence(r2, r6.length()).toString())\l}"];
Node_41 [shape=record,label="{41\:\ 0x005b|RETURN\l|return r1\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0043}"];
Node_39 [shape=record,label="{39\:\ 0x0047|LOOP_END\lLOOP:0: B:34:0x0028\-\>B:39:0x0047\l|if (r0.find() != false) goto L9\l}"];
Node_45 [shape=record,label="{45\:\ 0x0049|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x005c}"];
Node_43 [shape=record,label="{43\:\ 0x0064|RETURN\l|return kotlin.collections.CollectionsKt.listOf(r6.toString())\l}"];
MethodNode[shape=record,label="{public final java.util.List\<java.lang.String\> kotlin.text.Regex.split((r5v0 'this' kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r6v0 'input' java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:39:0x0047 \-\> B:34:0x0028, CROSS_EDGE: B:37:0x0041 \-\> B:40:0x0049, CROSS_EDGE: B:35:0x003b \-\> B:38:0x0043, CROSS_EDGE: B:31:0x001c \-\> B:33:0x0022, CROSS_EDGE: B:43:0x0064 \-\> B:24:?, CROSS_EDGE: B:26:0x000f \-\> B:42:0x005c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;I)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_42;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_42[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_44;
Node_44 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_24;
Node_38 -> Node_39;
Node_39 -> Node_34;
Node_39 -> Node_45[style=dashed];
Node_45 -> Node_40;
Node_42 -> Node_43;
Node_43 -> Node_24;
}

