digraph "CFG forkotlin.text.Regex.matchAt(Ljava\/lang\/CharSequence;I)Lkotlin\/text\/MatchResult;" {
subgraph cluster_Region_575224665 {
label = "R(3:1|(1:3)(1:7)|5) | DECL_VAR: kotlin.text.MatcherMatchResult null\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"input\")\ljava.util.regex.Matcher java.util.regex.Matcher r0 = r4.nativePattern.matcher(r5).useAnchoringBounds(false).useTransparentBounds(true).region(r6, r5.length())\l}"];
subgraph cluster_IfRegion_1933395489 {
label = "IF [B:11:0x0022] THEN: R(1:3) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0022|if (r0.lookingAt() == true) goto L3\l}"];
subgraph cluster_Region_1409903149 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0024|kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this\")\lkotlin.text.MatcherMatchResult r2 = new kotlin.text.MatcherMatchResult(r0, r5)\l}"];
}
subgraph cluster_Region_2031686490 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x002f|r2 = null\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0032|RETURN\l|return r2\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0030|PHI: r2 \l  PHI: (r2v2 kotlin.text.MatcherMatchResult) = (r2v1 kotlin.text.MatcherMatchResult), (r2v4 kotlin.text.MatcherMatchResult) binds: [B:13:0x002f, B:12:0x0024] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.text.MatchResult kotlin.text.Regex.matchAt((r4v0 'this' kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r5v0 'input' java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:14:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_14 -> Node_15;
}

