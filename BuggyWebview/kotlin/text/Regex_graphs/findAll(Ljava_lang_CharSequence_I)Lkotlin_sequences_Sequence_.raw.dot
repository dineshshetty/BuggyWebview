digraph "CFG forkotlin.text.Regex.findAll(Ljava\/lang\/CharSequence;I)Lkotlin\/sequences\/Sequence;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r5 I:??[int, byte, short, char] A[D('startIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:18:0x001d  (LINE:133)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r5 I:??[int, byte, short, char] A[D('startIndex' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:18:0x001d \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:kotlin.text.Regex$findAll$1) =  kotlin.text.Regex$findAll$1  (LINE:136)\l0x000f: INVOKE  \l  (r0 I:kotlin.text.Regex$findAll$1)\l  (r3 I:kotlin.text.Regex)\l  (r4 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l  (r5 I:int A[D('startIndex' int)])\l type: DIRECT call: kotlin.text.Regex$findAll$1.\<init\>(kotlin.text.Regex, java.lang.CharSequence, int):void A[MD:(kotlin.text.Regex, java.lang.CharSequence, int):void (m)]\l0x0012: CHECK_CAST (r0 I:kotlin.jvm.functions.Function0) = (kotlin.jvm.functions.Function0) (r0 I:??[OBJECT, ARRAY]) \l0x0014: SGET  (r1 I:kotlin.text.Regex$findAll$2) =  kotlin.text.Regex$findAll$2.INSTANCE kotlin.text.Regex$findAll$2 \l0x0016: CHECK_CAST (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:kotlin.jvm.functions.Function0), (r1 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlin.sequences.SequencesKt.generateSequence(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T\>:(kotlin.jvm.functions.Function0\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends T\>):kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:kotlin.sequences.Sequence\<kotlin.text.MatchResult\>) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException  (LINE:134)\l0x001f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"Start index out of bounds: \" \l0x0026: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0029: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x002c: CONST_STR  (r2 I:java.lang.String) =  \", input length: \" \l0x002e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0031: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0035: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003c: INVOKE  (r0 I:java.lang.IndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final kotlin.sequences.Sequence\<kotlin.text.MatchResult\> kotlin.text.Regex.findAll((r3 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x003f \-\> B:11:?, CROSS_EDGE: B:13:0x0005 \-\> B:18:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003f: r4 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x003f: r5 'startIndex' I\lSIGNATURE: (Ljava\/lang\/CharSequence;I)Lkotlin\/sequences\/Sequence\<Lkotlin\/text\/MatchResult;\>;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

