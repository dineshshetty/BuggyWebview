digraph "CFG forkotlin.text.Regex.matchesAt(Ljava\/lang\/CharSequence;I)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:java.util.regex.Pattern) = (r2 I:kotlin.text.Regex) kotlin.text.Regex.nativePattern java.util.regex.Pattern  (LINE:156)\l0x0007: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Pattern), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r1 I:boolean) type: VIRTUAL call: java.util.regex.Matcher.useAnchoringBounds(boolean):java.util.regex.Matcher A[MD:(boolean):java.util.regex.Matcher (c)]\l0x0010: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r1 I:boolean) type: VIRTUAL call: java.util.regex.Matcher.useTransparentBounds(boolean):java.util.regex.Matcher A[MD:(boolean):java.util.regex.Matcher (c)]\l0x0015: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0019: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Matcher), (r4 I:int A[D('index' int)]), (r1 I:int) type: VIRTUAL call: java.util.regex.Matcher.region(int, int):java.util.regex.Matcher A[MD:(int, int):java.util.regex.Matcher (c)]\l0x001d: INVOKE  (r0 I:boolean) = (r0 I:java.util.regex.Matcher) type: VIRTUAL call: java.util.regex.Matcher.lookingAt():boolean A[MD:():boolean (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final boolean kotlin.text.Regex.matchesAt((r2 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0021: r3 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0021: r4 'index' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

