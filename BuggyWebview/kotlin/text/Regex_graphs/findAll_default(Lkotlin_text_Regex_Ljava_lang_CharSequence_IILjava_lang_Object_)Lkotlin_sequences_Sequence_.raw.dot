digraph "CFG forkotlin.text.Regex.findAll$default(Lkotlin\/text\/Regex;Ljava\/lang\/CharSequence;IILjava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:132)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:kotlin.text.Regex), (r1 I:java.lang.CharSequence), (r2 I:int) type: VIRTUAL call: kotlin.text.Regex.findAll(java.lang.CharSequence, int):kotlin.sequences.Sequence A[MD:(java.lang.CharSequence, int):kotlin.sequences.Sequence\<kotlin.text.MatchResult\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:kotlin.sequences.Sequence) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlin.sequences.Sequence kotlin.text.Regex.findAll$default((r0 I:kotlin.text.Regex A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0005\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

