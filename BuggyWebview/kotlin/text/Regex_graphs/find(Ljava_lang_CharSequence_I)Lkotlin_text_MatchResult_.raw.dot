digraph "CFG forkotlin.text.Regex.find(Ljava\/lang\/CharSequence;I)Lkotlin\/text\/MatchResult;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:java.util.regex.Pattern) = (r2 I:kotlin.text.Regex) kotlin.text.Regex.nativePattern java.util.regex.Pattern  (LINE:122)\l0x0007: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Pattern), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x000b: CONST_STR  (r1 I:java.lang.String) =  \"nativePattern.matcher(input)\" \l0x000d: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: INVOKE  (r0 I:kotlin.text.MatchResult) = \l  (r0 I:java.util.regex.Matcher)\l  (r4 I:int A[D('startIndex' int)])\l  (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l type: STATIC call: kotlin.text.RegexKt.access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence):kotlin.text.MatchResult A[MD:(java.util.regex.Matcher, int, java.lang.CharSequence):kotlin.text.MatchResult (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:kotlin.text.MatchResult) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.text.MatchResult kotlin.text.Regex.find((r2 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r3 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0014: r4 'startIndex' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

