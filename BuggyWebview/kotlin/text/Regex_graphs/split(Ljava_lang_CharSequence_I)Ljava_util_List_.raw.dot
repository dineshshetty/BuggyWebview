digraph "CFG forkotlin.text.Regex.split(Ljava\/lang\/CharSequence;I)Ljava\/util\/List;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r7 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:240)\l0x0008: IGET  (r0 I:java.util.regex.Pattern) = (r5 I:kotlin.text.Regex) kotlin.text.Regex.nativePattern java.util.regex.Pattern  (LINE:242)\l0x000a: INVOKE  (r0 I:java.util.regex.Matcher) = (r0 I:java.util.regex.Pattern), (r6 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:243)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limit' int)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x005c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|0x0011: INVOKE  (r1 I:boolean) = (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.find():boolean A[MD:():boolean (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0018 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|0x0018: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:245)\l0x001a: CONST  (r2 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|0x001c: IF  (r7 I:??[int, byte, short, char] A[D('limit' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:33:0x0022 \l}"];
Node_32 [shape=record,label="{32\:\ 0x001e|0x001e: INVOKE  (r2 I:int) = (r7 I:int A[D('limit' int)]), (r2 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|0x0022: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0025: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:246)\l0x0026: ARITH  (r3 I:int) = (r7 I:int A[D('limit' int)]) + (\-1 int)  (LINE:247)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|LOOP_START\lLOOP:0: B:34:0x0028\-\>B:39:0x0047\l|0x0028: INVOKE  (r4 I:int) = (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.start():int A[MD:():int (c)] (LINE:250)\l0x002c: INVOKE  (r4 I:java.lang.CharSequence) = (r6 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]), (r2 I:int A[D('lastStart' int)]), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l0x0030: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0034: INVOKE  (r1 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0037: INVOKE  (r2 I:int A[D('lastStart' int)]) = (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:251)\l}"];
Node_35 [shape=record,label="{35\:\ 0x003b|0x003b: IF  (r3 I:??[int, byte, short, char] A[D('lastSplit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:38:0x0043  (LINE:252)\l}"];
Node_36 [shape=record,label="{36\:\ 0x003d|0x003d: INVOKE  (r4 I:int) = (r1 I:java.util.ArrayList A[D('result' java.util.ArrayList)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0041|0x0041: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastSplit' int)])  \-\> B:44:0x0049 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0049|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0049|0x0049: INVOKE  (r4 I:int) = (r6 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:255)\l0x004d: INVOKE  (r4 I:java.lang.CharSequence) = (r6 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]), (r2 I:int A[D('lastStart' int)]), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l0x0051: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0055: INVOKE  (r1 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0058: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:257)\l0x0059: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x005b|RETURN\l|0x005b: RETURN  (r4 I:java.util.List\<java.lang.String\>) \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0043|0x0043: INVOKE  (r4 I:boolean) = (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.find():boolean A[MD:():boolean (c)] (LINE:253)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0047|LOOP_END\lLOOP:0: B:34:0x0028\-\>B:39:0x0047\l|0x0047: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0028 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0049|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x005c|0x005c: INVOKE  (r1 I:java.lang.String) = (r6 I:java.lang.Object A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:243)\l0x0060: INVOKE  (r1 I:java.util.List) = (r1 I:java.lang.Object) type: STATIC call: kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List A[MD:\<T\>:(T):java.util.List\<T\> (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0064|RETURN\l|0x0064: RETURN  (r1 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{public final java.util.List\<java.lang.String\> kotlin.text.Regex.split((r5 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:39:0x0047 \-\> B:34:0x0028, CROSS_EDGE: B:37:0x0041 \-\> B:40:0x0049, CROSS_EDGE: B:35:0x003b \-\> B:38:0x0043, CROSS_EDGE: B:31:0x001c \-\> B:33:0x0022, CROSS_EDGE: B:43:0x0064 \-\> B:24:?, CROSS_EDGE: B:26:0x000f \-\> B:42:0x005c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0025\-0x005c: r1 'result' Ljava\/util\/ArrayList;\l  0x0026\-0x005c: r2 'lastStart' I\l  0x0028\-0x005c: r3 'lastSplit' I\l  0x000e\-0x0064: r0 'matcher' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x0064: r6 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0064: r7 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;I)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_42;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_42[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_44;
Node_44 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_24;
Node_38 -> Node_39;
Node_39 -> Node_34;
Node_39 -> Node_45[style=dashed];
Node_45 -> Node_40;
Node_42 -> Node_43;
Node_43 -> Node_24;
}

