digraph "CFG forkotlin.text.Regex.replace(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:187)\l0x000b: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:kotlin.text.MatchResult) = \l  (r6 I:kotlin.text.Regex)\l  (r7 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l  (r0 I:int)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l type: STATIC call: kotlin.text.Regex.find$default(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object):kotlin.text.MatchResult A[MD:(kotlin.text.Regex, java.lang.CharSequence, int, int, java.lang.Object):kotlin.text.MatchResult (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0018 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: INVOKE  (r0 I:java.lang.String) = (r7 I:java.lang.Object A[D('input' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:java.lang.String) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:189)\l0x0019: INVOKE  (r2 I:int) = (r7 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:190)\l0x001d: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:191)\l0x001f: INVOKE  (r3 I:java.lang.StringBuilder), (r2 I:int A[D('length' int)]) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|LOOP_START\lLOOP:0: B:23:0x0022\-\>B:25:0x004f\l|0x0022: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('match' kotlin.text.MatchResult)])  (LINE:193)\l0x0023: INVOKE  (r5 I:kotlin.ranges.IntRange) = (r4 I:kotlin.text.MatchResult A[D('foundMatch' kotlin.text.MatchResult)]) type: INTERFACE call: kotlin.text.MatchResult.getRange():kotlin.ranges.IntRange A[MD:():kotlin.ranges.IntRange (m)] (LINE:194)\l0x0027: INVOKE  (r5 I:java.lang.Integer) = (r5 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.getStart():java.lang.Integer A[MD:():java.lang.Integer (m)]\l0x002b: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x002f: INVOKE  \l  (r3 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r7 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l  (r1 I:int A[D('lastStart' int)])\l  (r5 I:int)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r5 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('foundMatch' kotlin.text.MatchResult)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:195)\l0x0036: CHECK_CAST (r5 I:java.lang.CharSequence) = (java.lang.CharSequence) (r5 I:??[OBJECT, ARRAY]) \l0x0038: INVOKE  (r3 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)]), (r5 I:java.lang.CharSequence) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder A[MD:(java.lang.CharSequence):java.lang.StringBuilder (c)]\l0x003b: INVOKE  (r5 I:kotlin.ranges.IntRange) = (r4 I:kotlin.text.MatchResult A[D('foundMatch' kotlin.text.MatchResult)]) type: INTERFACE call: kotlin.text.MatchResult.getRange():kotlin.ranges.IntRange A[MD:():kotlin.ranges.IntRange (m)] (LINE:196)\l0x003f: INVOKE  (r5 I:java.lang.Integer) = (r5 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer A[MD:():java.lang.Integer (m)]\l0x0043: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x0047: ARITH  (r1 I:int A[D('lastStart' int)]) = (r5 I:int) + (1 int) \l0x0049: INVOKE  (r0 I:kotlin.text.MatchResult A[D('match' kotlin.text.MatchResult)]) = (r4 I:kotlin.text.MatchResult A[D('foundMatch' kotlin.text.MatchResult)]) type: INTERFACE call: kotlin.text.MatchResult.next():kotlin.text.MatchResult A[MD:():kotlin.text.MatchResult (m)] (LINE:197)\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|0x004d: IF  (r1 I:??[int, byte, short, char] A[D('lastStart' int)]) \>= (r2 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:30:0x0051  (LINE:198)\l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|LOOP_END\lLOOP:0: B:23:0x0022\-\>B:25:0x004f\l|0x004f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' kotlin.text.MatchResult)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0022 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0051|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|0x0051: IF  (r1 I:??[int, byte, short, char] A[D('lastStart' int)]) \>= (r2 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:28:0x0056  (LINE:200)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|0x0053: INVOKE  \l  (r3 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r7 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l  (r1 I:int A[D('lastStart' int)])\l  (r2 I:int A[D('length' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)] (LINE:201)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0056|0x0056: INVOKE  (r4 I:java.lang.String) = (r3 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:204)\l0x005a: CONST_STR  (r5 I:java.lang.String) =  \"sb.toString()\" \l0x005c: INVOKE  (r4 I:java.lang.Object), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x005f|RETURN\l|0x005f: RETURN  (r4 I:java.lang.String) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.text.Regex.replace((r6 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super kotlin.text.MatchResult, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x004f \-\> B:23:0x0022, CROSS_EDGE: B:29:0x005f \-\> B:17:?, CROSS_EDGE: B:26:0x0051 \-\> B:28:0x0056, CROSS_EDGE: B:24:0x004d \-\> B:26:0x0051\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0023\-0x0051: r4 'foundMatch' Lkotlin\/text\/MatchResult;\l  0x0018\-0x005f: r0 'match' Lkotlin\/text\/MatchResult;\l  0x0019\-0x005f: r1 'lastStart' I\l  0x001d\-0x005f: r2 'length' I\l  0x0022\-0x005f: r3 'sb' Ljava\/lang\/StringBuilder;\l  \-1 \-0x005f: r7 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x005f: r8 'transform' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/text\/MatchResult;+Ljava\/lang\/CharSequence;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_23;
Node_25 -> Node_31[style=dashed];
Node_31 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_30 -> Node_26;
}

