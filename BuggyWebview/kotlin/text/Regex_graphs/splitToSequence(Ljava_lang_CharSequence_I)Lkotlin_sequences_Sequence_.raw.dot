digraph "CFG forkotlin.text.Regex.splitToSequence(Ljava\/lang\/CharSequence;I)Lkotlin\/sequences\/Sequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r4 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:271)\l0x0008: NEW_INSTANCE  (r0 I:kotlin.text.Regex$splitToSequence$1) =  kotlin.text.Regex$splitToSequence$1  (LINE:273)\l0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r0 I:kotlin.text.Regex$splitToSequence$1)\l  (r2 I:kotlin.text.Regex)\l  (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l  (r4 I:int A[D('limit' int)])\l  (r1 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlin.text.Regex$splitToSequence$1.\<init\>(kotlin.text.Regex, java.lang.CharSequence, int, kotlin.coroutines.Continuation):void A[MD:(kotlin.text.Regex, java.lang.CharSequence, int, kotlin.coroutines.Continuation\<? super kotlin.text.Regex$splitToSequence$1\>):void (m)]\l0x000e: CHECK_CAST (r0 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlin.sequences.SequencesKt.sequence(kotlin.jvm.functions.Function2):kotlin.sequences.Sequence A[MD:\<T\>:(kotlin.jvm.functions.Function2\<? super kotlin.sequences.SequenceScope\<? super T\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:kotlin.sequences.Sequence\<java.lang.String\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.sequences.Sequence\<java.lang.String\> kotlin.text.Regex.splitToSequence((r2 'this' I:kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r3 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0014: r4 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;I)Lkotlin\/sequences\/Sequence\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

