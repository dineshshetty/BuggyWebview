digraph "CFG forkotlin.text.Regex.replace(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"input\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"transform\")\lkotlin.text.MatchResult r0 = find$default(r6, r7, 0, 2, null)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|if (r0 != null) goto L6\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013}"];
Node_21 [shape=record,label="{21\:\ 0x0017|RETURN\l|return r7.toString()\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|r1 = 0\lint r2 = r7.length()\ljava.lang.StringBuilder r3 = new java.lang.StringBuilder(r2)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|LOOP_START\lLOOP:0: B:23:0x0022\-\>B:25:0x004f\lPHI: r0 r1 \l  PHI: (r0v4 'match' kotlin.text.MatchResult) = (r0v3 'match' kotlin.text.MatchResult), (r0v5 'match' kotlin.text.MatchResult) binds: [B:22:0x0018, B:25:0x004f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'lastStart' int) = (r1v1 'lastStart' int), (r1v3 'lastStart' int) binds: [B:22:0x0018, B:25:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r0\lr3.append(r7, r1, r4.getRange().getStart().intValue())\lr3.append(r8.invoke(r4))\lint r1 = r4.getRange().getEndInclusive().intValue() + 1\lkotlin.text.MatchResult r0 = r4.next()\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|if (r1 \>= r2) goto L15\l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|LOOP_END\lLOOP:0: B:23:0x0022\-\>B:25:0x004f\l|if (r0 != null) goto L7\l}"];
Node_31 [shape=record,label="{31\:\ 0x0051|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0051|if (r1 \>= r2) goto L13\l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|r3.append(r7, r1, r2)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0056|java.lang.String r4 = r3.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r4, \"sb.toString()\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x005f|RETURN\l|return r4\l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.text.Regex.replace((r6v0 'this' kotlin.text.Regex A[IMMUTABLE_TYPE, THIS]), (r7v0 'input' java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'transform' kotlin.jvm.functions.Function1\<? super kotlin.text.MatchResult, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x004f \-\> B:23:0x0022, CROSS_EDGE: B:29:0x005f \-\> B:17:?, CROSS_EDGE: B:26:0x0051 \-\> B:28:0x0056, CROSS_EDGE: B:24:0x004d \-\> B:26:0x0051\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/text\/MatchResult;+Ljava\/lang\/CharSequence;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_30;
Node_25 -> Node_23;
Node_25 -> Node_31[style=dashed];
Node_31 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_30 -> Node_26;
}

