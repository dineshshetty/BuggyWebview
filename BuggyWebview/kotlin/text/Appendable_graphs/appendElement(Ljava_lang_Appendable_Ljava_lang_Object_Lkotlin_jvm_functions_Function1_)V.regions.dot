digraph "CFG forkotlin.text.StringsKt__AppendableKt.appendElement(Ljava\/lang\/Appendable;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_1609065756 {
label = "R(2:1|(2:(1:(2:(1:(2:15|16)(2:13|14))|(2:9|10)))|(1:3)))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\l}"];
subgraph cluster_Region_1096053097 {
label = "R(2:(1:(2:(1:(2:15|16)(2:13|14))|(2:9|10)))|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1330116989 {
label = "IF [B:21:0x0006] THEN: R(1:(2:(1:(2:15|16)(2:13|14))|(2:9|10))) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0006|if (r3 == null) goto L6\l}"];
subgraph cluster_Region_920408363 {
label = "R(1:(2:(1:(2:15|16)(2:13|14))|(2:9|10)))";
node [shape=record,color=blue];
subgraph cluster_Region_704643689 {
label = "R(2:(1:(2:15|16)(2:13|14))|(2:9|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1212019065 {
label = "IF [B:26:0x0018] THEN: R(1:(2:15|16)(2:13|14)) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0018|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r2 == null ? true : r2 instanceof java.lang.CharSequence) == false) goto L11\l}"];
subgraph cluster_Region_952198418 {
label = "R(1:(2:15|16)(2:13|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1824538152 {
label = "IF [B:29:0x0023] THEN: R(2:15|16) ELSE: R(2:13|14)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0023|if ((r2 instanceof java.lang.Character) == false) goto L15\l}"];
subgraph cluster_Region_1182362259 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0030|r1.append(java.lang.String.valueOf(r2))\l}"];
Node_32 [shape=record,label="{32\:\ 0x0039|RETURN\lORIG_RETURN\l|return\l}"];
}
subgraph cluster_Region_1634270492 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0025|r1.append(((java.lang.Character) r2).charValue())\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
}
subgraph cluster_Region_1387458006 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x001a|r1.append((java.lang.CharSequence) r2)\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
}
subgraph cluster_Region_1072605398 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0008|r1.append(r3.invoke(r2))\l}"];
}
}
}
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0012}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0014}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0021}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0016}"];
MethodNode[shape=record,label="{public static final void kotlin.text.StringsKt__AppendableKt.appendElement((r1v0 '$this$appendElement' java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 T A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:32:0x0039, CROSS_EDGE: B:30:0x0025 \-\> B:32:0x0039, CROSS_EDGE: B:31:0x0030 \-\> B:32:0x0039, CROSS_EDGE: B:25:0x0016 \-\> B:26:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Appendable;TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)V\l}"];
MethodNode -> Node_18;Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_19;
Node_30 -> Node_35;
Node_35 -> Node_19;
Node_27 -> Node_34;
Node_34 -> Node_19;
Node_22 -> Node_33;
Node_18 -> Node_20;
Node_33 -> Node_19;
Node_23 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_28 -> Node_29;
Node_25 -> Node_26;
}

