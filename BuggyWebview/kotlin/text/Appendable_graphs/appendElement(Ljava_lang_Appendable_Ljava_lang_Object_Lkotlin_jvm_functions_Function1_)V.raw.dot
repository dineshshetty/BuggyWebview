digraph "CFG forkotlin.text.StringsKt__AppendableKt.appendElement(Ljava\/lang\/Appendable;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$appendElement' java.lang.Appendable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('transform' kotlin.jvm.functions.Function1)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0012  (LINE:85)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|0x0008: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r2 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x000c: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r1 I:java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable)]), (r0 I:java.lang.CharSequence) type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0039: RETURN   A[SYNTHETIC] (LINE:90)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('element' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0016  (LINE:86)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021 \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) \l0x001b: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r1 I:java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable)]), (r0 I:java.lang.CharSequence) type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0039: RETURN   A[SYNTHETIC] (LINE:90)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) java.lang.Character  (LINE:87)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0030 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|0x0025: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) \l0x0026: CHECK_CAST (r0 I:java.lang.Character) = (java.lang.Character) (r0 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r0 I:char) = (r0 I:java.lang.Character) type: VIRTUAL call: java.lang.Character.charValue():char A[MD:():char (c)]\l0x002c: INVOKE  (r1 I:java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable)]), (r0 I:char) type: INTERFACE call: java.lang.Appendable.append(char):java.lang.Appendable A[MD:(char):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0039: RETURN   A[SYNTHETIC] (LINE:90)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0030|0x0030: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.Object A[D('element' java.lang.Object)]) type: STATIC call: java.lang.String.valueOf(java.lang.Object):java.lang.String A[MD:(java.lang.Object):java.lang.String (c)] (LINE:88)\l0x0034: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0036: INVOKE  (r1 I:java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable)]), (r0 I:java.lang.CharSequence) type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0039|RETURN\lORIG_RETURN\l|0x0039: RETURN    (LINE:90)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|0x0016: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) java.lang.CharSequence \l}"];
MethodNode[shape=record,label="{public static final void kotlin.text.StringsKt__AppendableKt.appendElement((r1 I:java.lang.Appendable A[D('$this$appendElement' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:T A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:32:0x0039, CROSS_EDGE: B:30:0x0025 \-\> B:32:0x0039, CROSS_EDGE: B:31:0x0030 \-\> B:32:0x0039, CROSS_EDGE: B:25:0x0016 \-\> B:26:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0039: r1 '$this$appendElement' Ljava\/lang\/Appendable;\l  \-1 \-0x0039: r2 'element' Ljava\/lang\/Object;\l  \-1 \-0x0039: r3 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Appendable;TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)V\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_33;
Node_33 -> Node_19;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_34;
Node_34 -> Node_19;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_35;
Node_35 -> Node_19;
Node_31 -> Node_32;
Node_32 -> Node_19;
Node_25 -> Node_26;
}

