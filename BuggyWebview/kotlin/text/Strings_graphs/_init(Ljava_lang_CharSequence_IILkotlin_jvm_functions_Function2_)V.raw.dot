digraph "CFG forkotlin.text.DelimitedRangesSequence.\<init\>(Ljava\/lang\/CharSequence;IILkotlin\/jvm\/functions\/Function2;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('input' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"getNextMatch\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('getNextMatch' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r1 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:1171)\l0x000d: IPUT  (r2 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)]), (r1 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.input java.lang.CharSequence  (LINE:1172)\l0x000f: IPUT  (r3 I:int A[D('startIndex' int)]), (r1 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.startIndex int  (LINE:1173)\l0x0011: IPUT  (r4 I:int A[D('limit' int)]), (r1 I:kotlin.text.DelimitedRangesSequence) kotlin.text.DelimitedRangesSequence.limit int  (LINE:1174)\l0x0013: IPUT  \l  (r5 I:kotlin.jvm.functions.Function2\<java.lang.CharSequence, java.lang.Integer, kotlin.Pair\<java.lang.Integer, java.lang.Integer\>\> A[D('getNextMatch' kotlin.jvm.functions.Function2)])\l  (r1 I:kotlin.text.DelimitedRangesSequence)\l kotlin.text.DelimitedRangesSequence.getNextMatch kotlin.jvm.functions.Function2  (LINE:1175)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|0x0015: RETURN    (LINE:1171)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.text.DelimitedRangesSequence.\<init\>((r1 'this' I:kotlin.text.DelimitedRangesSequence A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super java.lang.CharSequence, ? super java.lang.Integer, kotlin.Pair\<java.lang.Integer, java.lang.Integer\>\> A[D('getNextMatch' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r2 'input' Ljava\/lang\/CharSequence;\l  \-1 \-0x0015: r3 'startIndex' I\l  \-1 \-0x0015: r4 'limit' I\l  \-1 \-0x0015: r5 'getNextMatch' Lkotlin\/jvm\/functions\/Function2;\lSIGNATURE: (Ljava\/lang\/CharSequence;IILkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/CharSequence;\-Ljava\/lang\/Integer;Lkotlin\/Pair\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;\>;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

