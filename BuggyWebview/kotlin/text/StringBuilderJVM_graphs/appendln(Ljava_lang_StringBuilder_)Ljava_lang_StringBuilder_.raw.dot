digraph "CFG forkotlin.text.StringsKt__StringBuilderJVMKt.appendln(Ljava\/lang\/StringBuilder;)Ljava\/lang\/StringBuilder;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$appendln' java.lang.StringBuilder)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:java.lang.String) =  kotlin.text.SystemProperties.LINE_SEPARATOR java.lang.String  (LINE:240)\l0x0007: INVOKE  (r1 I:java.lang.StringBuilder A[D('$this$appendln' java.lang.StringBuilder)]), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"append(SystemProperties.LINE_SEPARATOR)\" \l0x000c: INVOKE  (r1 I:java.lang.Object A[D('$this$appendln' java.lang.StringBuilder)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:java.lang.StringBuilder A[D('$this$appendln' java.lang.StringBuilder)]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.StringBuilder kotlin.text.StringsKt__StringBuilderJVMKt.appendln((r1 I:java.lang.StringBuilder A[D('$this$appendln' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>WARNING:Lkotlin\/DeprecationLevel;\}, message=Use appendLine instead. Note that the new method always appends the line feed character 'n' regardless of the system line separator., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=appendLine(), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 '$this$appendln' Ljava\/lang\/StringBuilder;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

