digraph "CFG forkotlin.text.UStringsKt.toUIntOrNull(Ljava\/lang\/String;I)Lkotlin\/UInt;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r13 I:java.lang.Object A[D('$this$toUIntOrNull' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r14 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:185)\l0x0008: INVOKE  (r0 I:int) = (r13 I:java.lang.String A[D('$this$toUIntOrNull' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:187)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:188)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:kotlin.UInt) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:190)\l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:193)\l0x0013: INVOKE  (r4 I:char) = (r13 I:java.lang.String A[D('$this$toUIntOrNull' java.lang.String)]), (r4 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0017: CONST  (r5 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char])  (LINE:194)\l0x0019: INVOKE  (r5 I:int) = (r4 I:int A[D('firstChar' char)]), (r5 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|0x001d: IF  (r5 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x002a \l}"];
Node_7 [shape=record,label="{7\:\ 0x001f|0x001f: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:195)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: CONST  (r5 I:??[int, float, short, byte, char]) = (43 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|0x0024: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: CONST  (r3 I:??[boolean, int, float, short, byte, char] A[D('start' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:196)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: CONST  (r5 I:??[int, float, short, byte, char]) = (119304647(0x71c71c7, float:1.1769572E\-34) ??[int, float, short, byte, char])  (LINE:201)\l0x002e: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limitForMaxRadix' int)])  (LINE:203)\l0x002f: INVOKE  (r7 I:int) = (r14 I:int A[D('radix' int)]) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)] (LINE:204)\l0x0033: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:205)\l0x0034: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:206)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|LOOP_START\lLOOP:0: B:16:0x0035\-\>B:30:0x006d\l|0x0035: IF  (r9 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:34:0x0070 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|0x0037: INVOKE  (r10 I:char) = (r13 I:java.lang.String A[D('$this$toUIntOrNull' java.lang.String)]), (r9 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:207)\l0x003b: INVOKE  (r10 I:int) = (r10 I:char), (r14 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: IF  (r10 I:??[int, byte, short, char] A[D('digit' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:20:0x0042  (LINE:209)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: INVOKE  (r11 I:int) = (r8 I:int A[D('result' int)]), (r6 I:int A[D('limitBeforeMul' int)]) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)] (LINE:210)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|0x0046: IF  (r11 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:27:0x0056 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0048|0x0048: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limitBeforeMul' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limitForMaxRadix' int)])  \-\> B:35:0x0055  (LINE:211)\l}"];
Node_23 [shape=record,label="{23\:\ 0x004a|0x004a: INVOKE  (r6 I:int A[D('limitBeforeMul' int)]) = (r2 I:int A[D('limit' int)]), (r7 I:int A[D('uradix' int)]) type: STATIC call: kotlin.UnsignedKt.uintDivide\-J1ME1BU(int, int):int A[MD:(int, int):int (m)] (LINE:212)\l0x004e: INVOKE  (r11 I:int) = (r8 I:int A[D('result' int)]), (r6 I:int A[D('limitBeforeMul' int)]) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)] (LINE:214)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0052|0x0052: IF  (r11 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:27:0x0056 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0054|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0054|RETURN\l|0x0054: RETURN  (r1 I:kotlin.UInt)  (LINE:215)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0055|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|RETURN\l|0x0055: RETURN  (r1 I:kotlin.UInt)  (LINE:218)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0056|0x0056: ARITH  (r11 I:int) = (r8 I:int A[D('result' int)]) * (r7 I:int A[D('uradix' int)])  (LINE:222)\l0x0058: INVOKE  (r8 I:int A[D('result' int)]) = (r11 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x005c: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)])  (LINE:224)\l0x005d: INVOKE  (r12 I:int) = (r10 I:int A[D('digit' int)]) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)] (LINE:225)\l0x0061: ARITH  (r12 I:int) = (r12 I:int) + (r8 I:int A[D('result' int)]) \l0x0062: INVOKE  (r8 I:int A[D('result' int)]) = (r12 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x0066: INVOKE  (r12 I:int) = (r8 I:int A[D('result' int)]), (r11 I:int A[D('beforeAdding' int)]) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)] (LINE:226)\l}"];
Node_28 [shape=record,label="{28\:\ 0x006a|0x006a: IF  (r12 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x006d \l}"];
Node_30 [shape=record,label="{30\:\ 0x006d|LOOP_END\lLOOP:0: B:16:0x0035\-\>B:30:0x006d\l|0x006d: ARITH  (r9 I:int) = (r9 I:int A[D('i' int)]) + (1 int)  (LINE:206)\l}"];
Node_36 [shape=record,label="{36\:\ 0x006c|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x006c|RETURN\l|0x006c: RETURN  (r1 I:kotlin.UInt) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0041|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|RETURN\l|0x0041: RETURN  (r1 I:kotlin.UInt) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0070|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0070|0x0070: INVOKE  (r1 I:kotlin.UInt) = (r8 I:int A[D('result' int)]) type: STATIC call: kotlin.UInt.box\-impl(int):kotlin.UInt A[MD:(int):kotlin.UInt (m)] (LINE:229)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0074|RETURN\l|0x0074: RETURN  (r1 I:kotlin.UInt) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\l|0x0029: RETURN  (r1 I:kotlin.UInt)  (LINE:195)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|0x002a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:198)\l}"];
MethodNode[shape=record,label="{public static final kotlin.UInt kotlin.text.UStringsKt.toUIntOrNull((r13 I:java.lang.String A[D('$this$toUIntOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0041 \-\> B:1:?, CROSS_EDGE: B:25:0x0054 \-\> B:1:?, CROSS_EDGE: B:29:0x006c \-\> B:1:?, BACK_EDGE: B:30:0x006d \-\> B:16:0x0035, CROSS_EDGE: B:26:0x0055 \-\> B:1:?, CROSS_EDGE: B:21:0x0046 \-\> B:27:0x0056, CROSS_EDGE: B:32:0x0074 \-\> B:1:?, CROSS_EDGE: B:13:0x0029 \-\> B:1:?, CROSS_EDGE: B:8:0x0020 \-\> B:13:0x0029, CROSS_EDGE: B:14:0x002a \-\> B:15:0x002b\lDebug Info:\l  0x003f\-0x006d: r10 'digit' I\l  0x005d\-0x006d: r11 'beforeAdding' I\l  0x0035\-0x0070: r9 'i' I\l  0x000c\-0x0074: r0 'length' I\l  0x0011\-0x0074: r2 'limit' I\l  0x0012\-0x0074: r3 'start' I\l  0x0017\-0x0074: r4 'firstChar' C\l  0x002e\-0x0074: r5 'limitForMaxRadix' I\l  0x002f\-0x0074: r6 'limitBeforeMul' I\l  0x0033\-0x0074: r7 'uradix' I\l  0x0034\-0x0074: r8 'result' I\l  \-1 \-0x0074: r13 '$this$toUIntOrNull' Ljava\/lang\/String;\l  \-1 \-0x0074: r14 'radix' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_34;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_37[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_35;
Node_23 -> Node_24;
Node_24 -> Node_27;
Node_24 -> Node_33[style=dashed];
Node_33 -> Node_25;
Node_25 -> Node_1;
Node_35 -> Node_26;
Node_26 -> Node_1;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_36[style=dashed];
Node_30 -> Node_16;
Node_36 -> Node_29;
Node_29 -> Node_1;
Node_37 -> Node_19;
Node_19 -> Node_1;
Node_34 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_1;
Node_13 -> Node_1;
Node_14 -> Node_15;
}

