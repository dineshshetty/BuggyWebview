digraph "CFG forkotlin.text.UStringsKt.toULongOrNull(Ljava\/lang\/String;I)Lkotlin\/ULong;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('$this$toULongOrNull' java.lang.String)]) \l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('radix' int)]) \l0x0004: CONST_STR  (r2 I:java.lang.String) =  \"\<this\>\" \l0x0006: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: INVOKE  (r23 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:249)\l0x000c: INVOKE  (r2 I:int) = (r22 I:java.lang.String A[D('$this$toULongOrNull' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:251)\l0x0010: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:252)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|RETURN\l|0x0013: RETURN  (r3 I:kotlin.ULong) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: CONST  (r4 I:??[long, double]) = (\-1 ??[long, double])  (LINE:254)\l0x0016: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:257)\l0x0018: INVOKE  (r7 I:char) = (r0 I:java.lang.String), (r7 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x001c: CONST  (r8 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char])  (LINE:258)\l0x001e: INVOKE  (r8 I:int) = (r7 I:int A[D('firstChar' char)]), (r8 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x002f \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:259)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: CONST  (r8 I:??[int, float, short, byte, char]) = (43 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|0x002c: CONST  (r6 I:??[boolean, int, float, short, byte, char] A[D('start' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:260)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: CONST  (r8 I:??[long, double]) = (512409557603043100(0x71c71c71c71c71c, double:2.0539100454284282E\-274) ??[long, double])  (LINE:266)\l0x0035: MOVE  (r10 I:??[long, double]) = (r8 I:??[long, double] A[D('limitForMaxRadix' long)])  (LINE:268)\l0x0036: CAST (r12 I:long) = (long) (r1 I:int)  (LINE:269)\l0x0037: INVOKE  (r12 I:long) = (r12 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x003b: CONST  (r14 I:??[long, double]) = (0 ??[long, double])  (LINE:270)\l0x003d: MOVE  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:271)\l0x003f: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|LOOP_START\lLOOP:0: B:16:0x0041\-\>B:36:0x0097\l|0x0041: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:39:0x00a2 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)])  (LINE:272)\l0x0045: INVOKE  (r2 I:char) = (r0 I:java.lang.String), (r3 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0049: INVOKE  (r2 I:int) = (r2 I:char), (r1 I:int) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: IF  (r2 I:??[int, byte, short, char] A[D('digit' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:21:0x0052  (LINE:274)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: INVOKE  (r18 I:int) = (r14 I:long A[D('result' long)]), (r10 I:long A[D('limitBeforeMul' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)] (LINE:275)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: IF  (r18 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:32:0x006f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0058|0x0058: CMP_L  (r18 I:int) = (r10 I:long A[D('limitBeforeMul' long)]), (r8 I:long A[D('limitForMaxRadix' long)])  (LINE:276)\l}"];
Node_24 [shape=record,label="{24\:\ 0x005a|0x005a: IF  (r18 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x006c \l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|0x005c: INVOKE  (r10 I:long A[D('limitBeforeMul' long)]) = (r4 I:long A[D('limit' long)]), (r12 I:long A[D('uradix' long)]) type: STATIC call: kotlin.UnsignedKt.ulongDivide\-eb3DHEI(long, long):long A[MD:(long, long):long (m)] (LINE:277)\l0x0060: INVOKE  (r18 I:int) = (r14 I:long A[D('result' long)]), (r10 I:long A[D('limitBeforeMul' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)] (LINE:279)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0064|0x0064: IF  (r18 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:29:0x0069 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0069|0x0069: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:279)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0066|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0066|RETURN\l|0x0066: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:280)\l0x0068: RETURN  (r16 I:kotlin.ULong) \l}"];
Node_43 [shape=record,label="{43\:\ 0x006c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x006c|RETURN\l|0x006c: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:283)\l0x006e: RETURN  (r16 I:kotlin.ULong) \l}"];
Node_32 [shape=record,label="{32\:\ 0x006f|0x006f: ARITH  (r18 I:long) = (r14 I:long A[D('result' long)]) * (r12 I:long A[D('uradix' long)])  (LINE:287)\l0x0071: INVOKE  (r14 I:long A[D('result' long)]) = (r18 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0075: MOVE  (r18 I:??[long, double]) = (r14 I:??[long, double] A[D('result' long)])  (LINE:289)\l0x0077: INVOKE  (r0 I:int) = (r2 I:int A[D('digit' int)]) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)] (LINE:290)\l0x007b: CAST (r0 I:long) = (long) (r0 I:int) \l0x007c: CONST  (r20 I:??[long, double]) = (4294967295(0xffffffff, double:2.1219957905E\-314) ??[long, double]) \l0x0081: ARITH  (r0 I:long) = (r0 I:long) & (r20 I:long) \l0x0083: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0087: ARITH  (r0 I:long) = (r0 I:long) + (r14 I:long A[D('result' long)]) \l0x0088: INVOKE  (r14 I:long A[D('result' long)]) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x008c: MOVE  (r0 I:??[long, double]) = (r18 I:??[long, double] A[D('beforeAdding' long)])  (LINE:291)\l0x008e: INVOKE  (r18 I:int) = (r14 I:long A[D('result' long)]), (r0 I:long A[D('beforeAdding' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0092|0x0092: IF  (r18 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:36:0x0097 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0097|LOOP_END\lLOOP:0: B:16:0x0041\-\>B:36:0x0097\l|0x0097: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0099: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:271)\l0x009b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('$this$toULongOrNull' java.lang.String)]) \l0x009d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('radix' int)]) \l0x009f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0094|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0094|RETURN\l|0x0094: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0096: RETURN  (r16 I:kotlin.ULong) \l}"];
Node_41 [shape=record,label="{41\:\ 0x004f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|RETURN\l|0x004f: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0051: RETURN  (r16 I:kotlin.ULong) \l}"];
Node_39 [shape=record,label="{39\:\ 0x00a2|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x00a2|0x00a2: INVOKE  (r0 I:kotlin.ULong) = (r14 I:long A[D('result' long)]) type: STATIC call: kotlin.ULong.box\-impl(long):kotlin.ULong A[MD:(long):kotlin.ULong (m)] (LINE:294)\l}"];
Node_38 [shape=record,label="{38\:\ 0x00a6|RETURN\l|0x00a6: RETURN  (r0 I:kotlin.ULong) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|RETURN\l|0x002e: RETURN  (r3 I:kotlin.ULong)  (LINE:259)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:262)\l}"];
MethodNode[shape=record,label="{public static final kotlin.ULong kotlin.text.UStringsKt.toULongOrNull((r22 I:java.lang.String A[D('$this$toULongOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0051 \-\> B:1:?, CROSS_EDGE: B:28:0x0068 \-\> B:1:?, CROSS_EDGE: B:35:0x0096 \-\> B:1:?, BACK_EDGE: B:36:0x0097 \-\> B:16:0x0041, CROSS_EDGE: B:31:0x006e \-\> B:1:?, CROSS_EDGE: B:22:0x0056 \-\> B:32:0x006f, CROSS_EDGE: B:38:0x00a6 \-\> B:1:?, CROSS_EDGE: B:13:0x002e \-\> B:1:?, CROSS_EDGE: B:8:0x0025 \-\> B:13:0x002e, CROSS_EDGE: B:14:0x002f \-\> B:15:0x0030\lDebug Info:\l  0x0010\-0x0045: r2 'length' I\l  0x0077\-0x008e: r18 'beforeAdding' J\l  0x008e\-0x0099: r0 'beforeAdding' J\l  0x004d\-0x0099: r2 'digit' I\l  0x0041\-0x00a2: r3 'i' I\l  0x0045\-0x00a2: r17 'length' I\l  0x00a2\-0x00a6: r2 'length' I\l  0x0016\-0x00a6: r4 'limit' J\l  0x0017\-0x00a6: r6 'start' I\l  0x001c\-0x00a6: r7 'firstChar' C\l  0x0035\-0x00a6: r8 'limitForMaxRadix' J\l  0x0036\-0x00a6: r10 'limitBeforeMul' J\l  0x003b\-0x00a6: r12 'uradix' J\l  0x003d\-0x00a6: r14 'result' J\l  \-1 \-0x00a6: r22 '$this$toULongOrNull' Ljava\/lang\/String;\l  \-1 \-0x00a6: r23 'radix' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_39;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_41[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_43;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_40[style=dashed];
Node_29 -> Node_32;
Node_40 -> Node_27;
Node_27 -> Node_1;
Node_43 -> Node_30;
Node_30 -> Node_1;
Node_32 -> Node_33;
Node_33 -> Node_36;
Node_33 -> Node_42[style=dashed];
Node_36 -> Node_16;
Node_42 -> Node_34;
Node_34 -> Node_1;
Node_41 -> Node_19;
Node_19 -> Node_1;
Node_39 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_1;
Node_13 -> Node_1;
Node_14 -> Node_15;
}

