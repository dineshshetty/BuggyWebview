digraph "CFG forkotlin.text.UStringsKt.toULongOrNull(Ljava\/lang\/String;I)Lkotlin\/ULong;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = r22\lr1 = r23\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, \"\<this\>\")\lkotlin.text.CharsKt.checkRadix(r23)\lint r2 = r22.length()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if (r2 != 0) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|char r7 = r0.charAt(0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|if (kotlin.jvm.internal.Intrinsics.compare(r7, 48) \>= 0) goto L38\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024}"];
Node_8 [shape=record,label="{8\:\ 0x0025|if (r2 == 1) goto L37\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027}"];
Node_10 [shape=record,label="{10\:\ 0x0029|if (r7 == '+') goto L11\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|r6 = 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|PHI: r6 \l  PHI: (r6v2 'start' int) = (r6v1 'start' int), (r6v3 'start' int) binds: [B:14:0x002f, B:12:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|r10 = 512409557603043100L\llong r12 = kotlin.ULong.m316constructorimpl((long) r1)\lr14 = 0\lr3 = r6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|LOOP_START\lLOOP:0: B:16:0x0041\-\>B:36:0x0097\lPHI: r0 r1 r2 r3 r10 r14 \l  PHI: (r0v1 java.lang.String) = (r0v0 java.lang.String), (r0v9 java.lang.String) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'length' int) = (r2v1 'length' int), (r2v5 'length' int) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'i' int) = (r3v1 'i' int), (r3v3 'i' int) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r10v1 'limitBeforeMul' long) = (r10v0 'limitBeforeMul' long), (r10v2 'limitBeforeMul' long) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r14v1 'result' long) = (r14v0 'result' long), (r14v3 'result' long) binds: [B:15:0x0030, B:36:0x0097] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L34\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|r17 = r2\lint r2 = kotlin.text.CharsKt.digitOf(r0.charAt(r3), r1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|if (r2 \>= 0) goto L16\l}"];
Node_21 [shape=record,label="{21\:\ 0x0052}"];
Node_22 [shape=record,label="{22\:\ 0x0056|if (kotlin.UnsignedUtils.ulongCompare(r14, r10) \<= 0) goto L27\l}"];
Node_23 [shape=record,label="{23\:\ 0x0058}"];
Node_24 [shape=record,label="{24\:\ 0x005a|if ((r10 \> 512409557603043100L ? 1 : (r10 == 512409557603043100L ? 0 : \-1)) != 0) goto L25\l}"];
Node_25 [shape=record,label="{25\:\ 0x005c|long r10 = kotlin.UnsignedUtils.m493ulongDivideeb3DHEI(\-1, r12)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0064|if (kotlin.UnsignedUtils.ulongCompare(r14, r10) \<= 0) goto L22\l}"];
Node_29 [shape=record,label="{29\:\ 0x0069}"];
Node_40 [shape=record,label="{40\:\ 0x0066|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0066|RETURN\l|return null\l}"];
Node_43 [shape=record,label="{43\:\ 0x006c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x006c|RETURN\l|return null\l}"];
Node_32 [shape=record,label="{32\:\ 0x006f|PHI: r10 \l  PHI: (r10v2 'limitBeforeMul' long) = (r10v1 'limitBeforeMul' long), (r10v3 'limitBeforeMul' long) binds: [B:22:0x0056, B:29:0x0069] A[DONT_GENERATE, DONT_INLINE]\l|long r14 = kotlin.ULong.m316constructorimpl(r14 * r12)\llong r14 = kotlin.ULong.m316constructorimpl(kotlin.ULong.m316constructorimpl(((long) kotlin.UInt.m238constructorimpl(r2)) & 4294967295L) + r14)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0092|if (kotlin.UnsignedUtils.ulongCompare(r14, r14) \>= 0) goto L29\l}"];
Node_36 [shape=record,label="{36\:\ 0x0097|LOOP_END\lLOOP:0: B:16:0x0041\-\>B:36:0x0097\l|int r3 = r3 + 1\lr0 = r22\lr1 = r23\lr2 = r17\l}"];
Node_42 [shape=record,label="{42\:\ 0x0094|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0094|RETURN\l|return null\l}"];
Node_41 [shape=record,label="{41\:\ 0x004f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|RETURN\l|return null\l}"];
Node_39 [shape=record,label="{39\:\ 0x00a2|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x00a2}"];
Node_38 [shape=record,label="{38\:\ 0x00a6|RETURN\l|return kotlin.ULong.m310boximpl(r14)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|RETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|r6 = 0\l}"];
MethodNode[shape=record,label="{public static final kotlin.ULong kotlin.text.UStringsKt.toULongOrNull((r22v0 '$this$toULongOrNull' java.lang.String A[D('$this$toULongOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'radix' int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0051 \-\> B:1:?, CROSS_EDGE: B:28:0x0068 \-\> B:1:?, CROSS_EDGE: B:35:0x0096 \-\> B:1:?, BACK_EDGE: B:36:0x0097 \-\> B:16:0x0041, CROSS_EDGE: B:31:0x006e \-\> B:1:?, CROSS_EDGE: B:22:0x0056 \-\> B:32:0x006f, CROSS_EDGE: B:38:0x00a6 \-\> B:1:?, CROSS_EDGE: B:13:0x002e \-\> B:1:?, CROSS_EDGE: B:8:0x0025 \-\> B:13:0x002e, CROSS_EDGE: B:14:0x002f \-\> B:15:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_39;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_41[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_43;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_40[style=dashed];
Node_29 -> Node_32;
Node_40 -> Node_27;
Node_27 -> Node_1;
Node_43 -> Node_30;
Node_30 -> Node_1;
Node_32 -> Node_33;
Node_33 -> Node_36;
Node_33 -> Node_42[style=dashed];
Node_36 -> Node_16;
Node_42 -> Node_34;
Node_34 -> Node_1;
Node_41 -> Node_19;
Node_19 -> Node_1;
Node_39 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_1;
Node_13 -> Node_1;
Node_14 -> Node_15;
}

