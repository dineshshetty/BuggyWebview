digraph "CFG forkotlin.text.CharDirectionality.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.text.CharDirectionality.UNDEFINED = new kotlin.text.CharDirectionality(\"UNDEFINED\", 0, \-1)\lkotlin.text.CharDirectionality.LEFT_TO_RIGHT = new kotlin.text.CharDirectionality(\"LEFT_TO_RIGHT\", 1, 0)\lkotlin.text.CharDirectionality.RIGHT_TO_LEFT = new kotlin.text.CharDirectionality(\"RIGHT_TO_LEFT\", 2, 1)\lkotlin.text.CharDirectionality.RIGHT_TO_LEFT_ARABIC = new kotlin.text.CharDirectionality(\"RIGHT_TO_LEFT_ARABIC\", 3, 2)\lkotlin.text.CharDirectionality.EUROPEAN_NUMBER = new kotlin.text.CharDirectionality(\"EUROPEAN_NUMBER\", 4, 3)\lkotlin.text.CharDirectionality.EUROPEAN_NUMBER_SEPARATOR = new kotlin.text.CharDirectionality(\"EUROPEAN_NUMBER_SEPARATOR\", 5, 4)\lkotlin.text.CharDirectionality.EUROPEAN_NUMBER_TERMINATOR = new kotlin.text.CharDirectionality(\"EUROPEAN_NUMBER_TERMINATOR\", 6, 5)\lkotlin.text.CharDirectionality.ARABIC_NUMBER = new kotlin.text.CharDirectionality(\"ARABIC_NUMBER\", 7, 6)\lkotlin.text.CharDirectionality.COMMON_NUMBER_SEPARATOR = new kotlin.text.CharDirectionality(\"COMMON_NUMBER_SEPARATOR\", 8, 7)\lkotlin.text.CharDirectionality.NONSPACING_MARK = new kotlin.text.CharDirectionality(\"NONSPACING_MARK\", 9, 8)\lkotlin.text.CharDirectionality.BOUNDARY_NEUTRAL = new kotlin.text.CharDirectionality(\"BOUNDARY_NEUTRAL\", 10, 9)\lkotlin.text.CharDirectionality.PARAGRAPH_SEPARATOR = new kotlin.text.CharDirectionality(\"PARAGRAPH_SEPARATOR\", 11, 10)\lkotlin.text.CharDirectionality.SEGMENT_SEPARATOR = new kotlin.text.CharDirectionality(\"SEGMENT_SEPARATOR\", 12, 11)\lkotlin.text.CharDirectionality.WHITESPACE = new kotlin.text.CharDirectionality(\"WHITESPACE\", 13, 12)\lkotlin.text.CharDirectionality.OTHER_NEUTRALS = new kotlin.text.CharDirectionality(\"OTHER_NEUTRALS\", 14, 13)\lkotlin.text.CharDirectionality.LEFT_TO_RIGHT_EMBEDDING = new kotlin.text.CharDirectionality(\"LEFT_TO_RIGHT_EMBEDDING\", 15, 14)\lkotlin.text.CharDirectionality.LEFT_TO_RIGHT_OVERRIDE = new kotlin.text.CharDirectionality(\"LEFT_TO_RIGHT_OVERRIDE\", 16, 15)\lkotlin.text.CharDirectionality.RIGHT_TO_LEFT_EMBEDDING = new kotlin.text.CharDirectionality(\"RIGHT_TO_LEFT_EMBEDDING\", 17, 16)\lkotlin.text.CharDirectionality.RIGHT_TO_LEFT_OVERRIDE = new kotlin.text.CharDirectionality(\"RIGHT_TO_LEFT_OVERRIDE\", 18, 17)\lkotlin.text.CharDirectionality.POP_DIRECTIONAL_FORMAT = new kotlin.text.CharDirectionality(\"POP_DIRECTIONAL_FORMAT\", 19, 18)\lkotlin.text.CharDirectionality.$VALUES = $values()\lkotlin.text.CharDirectionality.Companion = new kotlin.text.CharDirectionality.Companion(null)\lkotlin.text.CharDirectionality.directionalityMap$delegate = kotlin.LazyKt.lazy(kotlin.text.CharDirectionality$Companion$directionalityMap$2.INSTANCE)\l}"];
Node_3 [shape=record,label="{3\:\ 0x00ed|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.text.CharDirectionality.\<clinit\>()  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

