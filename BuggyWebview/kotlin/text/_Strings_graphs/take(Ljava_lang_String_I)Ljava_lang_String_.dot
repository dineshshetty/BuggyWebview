digraph "CFG forkotlin.text.StringsKt___StringsKt.take(Ljava\/lang\/String;I)Ljava\/lang\/String;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if (r4 \< 0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|r1 = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v7 boolean) binds: [B:16:0x000a, B:15:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|java.lang.String r0 = r3.substring(0, kotlin.ranges.RangesKt.coerceAtMost(r4, r3.length()))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Requested character count \")\lr1.append(r4)\lr1.append(\" is less than zero.\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x003f|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|r1 = false\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt___StringsKt.take((r3v0 '$this$take' java.lang.String A[D('$this$take' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x003f \-\> B:12:?, CROSS_EDGE: B:16:0x000a \-\> B:17:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

