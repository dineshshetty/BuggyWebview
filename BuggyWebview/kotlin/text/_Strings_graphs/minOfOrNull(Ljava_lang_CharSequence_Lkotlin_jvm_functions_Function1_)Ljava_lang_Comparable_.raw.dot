digraph "CFG forkotlin.text.StringsKt___StringsKt.minOfOrNull(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Comparable;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$minOfOrNull' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r5 I:java.lang.CharSequence A[D('$this$minOfOrNull' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1648)\l0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0014 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0019 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|RETURN\l|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: RETURN  (r0 I:R extends java.lang.Comparable\<? super R\>) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|0x0019: INVOKE  (r0 I:char) = (r5 I:java.lang.CharSequence A[D('$this$minOfOrNull' java.lang.CharSequence)]), (r2 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1649)\l0x001d: INVOKE  (r0 I:java.lang.Character) = (r0 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0021: INVOKE  (r0 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0025: CHECK_CAST (r0 I:java.lang.Comparable) = (java.lang.Comparable) (r0 I:??[OBJECT, ARRAY]) \l0x0027: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:1650)\l0x0029: INVOKE  (r3 I:int) = (r5 I:java.lang.CharSequence A[D('$this$minOfOrNull' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x002d: INVOKE  (r2 I:kotlin.ranges.IntRange), (r1 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0030: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r2 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0034|LOOP_START\lLOOP:0: B:31:0x0034\-\>B:39:0x0034\l|0x0034: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0038|0x0038: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0054 \l}"];
Node_33 [shape=record,label="{33\:\ 0x003a|0x003a: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x003e: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence A[D('$this$minOfOrNull' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1651)\l0x0042: INVOKE  (r3 I:java.lang.Character) = (r3 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0046: INVOKE  (r3 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x004a: CHECK_CAST (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:??[OBJECT, ARRAY]) \l0x004c: INVOKE  (r4 I:int) = \l  (r0 I:java.lang.Comparable A[D('minValue' java.lang.Comparable)])\l  (r3 I:java.lang.Object A[D('v' java.lang.Comparable)])\l type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)] (LINE:1652)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0050|0x0050: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:40:0x0034 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0052|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0052|0x0052: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('minValue' java.lang.Comparable)]) = (r3 I:??[OBJECT, ARRAY] A[D('v' java.lang.Comparable)])  (LINE:1653)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0034|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0034|LOOP_END\lSYNTHETIC\lLOOP:0: B:31:0x0034\-\>B:39:0x0034\l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0054|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0054|RETURN\l|0x0054: RETURN  (r0 I:R extends java.lang.Comparable\<? super R\> A[D('minValue' java.lang.Comparable)])  (LINE:1656)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final R extends java.lang.Comparable\<? super R\> kotlin.text.StringsKt___StringsKt.minOfOrNull((r5 I:java.lang.CharSequence A[D('$this$minOfOrNull' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0050 \-\> B:31:0x0034, BACK_EDGE: B:35:0x0052 \-\> B:31:0x0034, CROSS_EDGE: B:36:0x0054 \-\> B:22:?, CROSS_EDGE: B:26:0x0014 \-\> B:27:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003e\-0x0053: r2 'i' I\l  0x004c\-0x0053: r3 'v' Ljava\/lang\/Comparable;\l  0x0027\-0x0054: r0 'minValue' Ljava\/lang\/Comparable;\l  \-1 \-0x0054: r5 '$this$minOfOrNull' Ljava\/lang\/CharSequence;\l  \-1 \-0x0054: r6 'selector' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>]\lSIGNATURE: \<R::Ljava\/lang\/Comparable\<\-TR;\>;\>(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TR;\>;)TR;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_22;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_37[style=dashed];
Node_34 -> Node_40;
Node_37 -> Node_35;
Node_35 -> Node_41;
Node_41 -> Node_39;
Node_39 -> Node_31;
Node_40 -> Node_39;
Node_38 -> Node_36;
Node_36 -> Node_22;
Node_26 -> Node_27;
}

