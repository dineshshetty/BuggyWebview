digraph "CFG forkotlin.text.StringsKt___StringsKt.slice(Ljava\/lang\/CharSequence;Ljava\/lang\/Iterable;)Ljava\/lang\/CharSequence;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"indices\")\lint r0 = kotlin.collections.CollectionsKt.collectionSizeOrDefault(r6, 10)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|if (r0 != 0) goto L6\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\l|return \"\"\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|java.lang.StringBuilder r1 = new java.lang.StringBuilder(r0)\ljava.util.Iterator r2 = r6.iterator()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|LOOP_START\lLOOP:0: B:20:0x0020\-\>B:22:0x0026\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|if (r2.hasNext() == false) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|LOOP_END\lLOOP:0: B:20:0x0020\-\>B:22:0x0026\l|int r3 = r2.next().intValue()\lr1.append(r5.charAt(r3))\l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0038}"];
Node_24 [shape=record,label="{24\:\ 0x003b|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt___StringsKt.slice((r5v0 '$this$slice' java.lang.CharSequence A[D('$this$slice' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'indices' java.lang.Iterable\<java.lang.Integer\> A[D('indices' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0026 \-\> B:20:0x0020, CROSS_EDGE: B:24:0x003b \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/lang\/Iterable\<Ljava\/lang\/Integer;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_20;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

