digraph "CFG forkotlin.text.StringsKt___StringsKt.single(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)C" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$single' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:280)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:281)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:282)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|LOOP_START\lLOOP:0: B:24:0x000e\-\>B:32:0x0038\l|0x000e: INVOKE  (r4 I:int) = (r6 I:java.lang.CharSequence A[D('$this$single' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:38:0x003b \l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence A[D('$this$single' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0018: INVOKE  (r5 I:java.lang.Character) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:283)\l0x001c: INVOKE  (r5 I:java.lang.Object) = (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0020: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|0x0026: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0038 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0030  (LINE:284)\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: INVOKE  (r1 I:java.lang.Character A[D('single' java.lang.Character)]) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:285)\l0x002e: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:286)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0038|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0038|LOOP_END\lLOOP:0: B:24:0x000e\-\>B:32:0x0038\l|0x0038: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:282)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0030|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0030|0x0030: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:284)\l0x0032: CONST_STR  (r5 I:java.lang.String) =  \"Char sequence contains more than one matching element.\" \l0x0034: INVOKE  (r3 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0037|0x0037: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0038|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x003b|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x003b|0x003b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0047  (LINE:289)\l}"];
Node_34 [shape=record,label="{34\:\ 0x003d|0x003d: CONST_STR  (r3 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Char\"  (LINE:291)\l0x003f: INVOKE  (r1 I:java.lang.Object A[D('single' java.lang.Character)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0042: INVOKE  (r3 I:char) = (r1 I:java.lang.Character A[D('single' java.lang.Character)]) type: VIRTUAL call: java.lang.Character.charValue():char A[MD:():char (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0046|RETURN\l|0x0046: RETURN  (r3 I:char) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0047|0x0047: NEW_INSTANCE  (r3 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException  (LINE:289)\l0x0049: CONST_STR  (r4 I:java.lang.String) =  \"Char sequence contains no character matching the predicate.\" \l0x004b: INVOKE  (r3 I:java.util.NoSuchElementException), (r4 I:java.lang.String) type: DIRECT call: java.util.NoSuchElementException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x004e|0x004e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.single((r6 I:java.lang.CharSequence A[D('$this$single' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0038 \-\> B:24:0x000e, CROSS_EDGE: B:27:0x0026 \-\> B:32:0x0038, CROSS_EDGE: B:35:0x0046 \-\> B:22:?, CROSS_EDGE: B:37:0x004e \-\> B:22:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x003b: r4 'element' C\l  0x000b\-0x004e: r0 '$i$f$single' I\l  0x000c\-0x004e: r1 'single' Ljava\/lang\/Character;\l  0x000d\-0x004e: r2 'found' Z\l  \-1 \-0x004e: r6 '$this$single' Ljava\/lang\/CharSequence;\l  \-1 \-0x004e: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)C\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_38;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_40;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_41;
Node_41 -> Node_32;
Node_32 -> Node_24;
Node_39 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_22;
Node_40 -> Node_32;
Node_38 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_22;
Node_36 -> Node_37;
Node_37 -> Node_22;
}

