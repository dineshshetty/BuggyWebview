digraph "CFG forkotlin.text.StringsKt___StringsKt.runningFold(Ljava\/lang\/CharSequence;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
subgraph cluster_Region_1302061580 {
label = "R(2:1|(2:(1:6)|(3:8|(1:11)|14)))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"operation\")\lint r2 = 0\l}"];
subgraph cluster_Region_1402361889 {
label = "R(2:(1:6)|(3:8|(1:11)|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_392974457 {
label = "IF [B:22:0x0016] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0016|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r6.length() == 0) == true) goto L5\l}"];
subgraph cluster_Region_1662476147 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x001c|RETURN\l|return kotlin.collections.CollectionsKt.listOf(r7)\l}"];
}
}
subgraph cluster_Region_1544317827 {
label = "R(3:8|(1:11)|14)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x001d|java.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(r6.length() + 1)\lr1.add(r7)\ljava.lang.Object r3 = (java.lang.Object) r7\l}"];
subgraph cluster_LoopRegion_2039183653 {
label = "LOOP:0: (1:11)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0032|if (r2 \< r6.length()) goto L11\l}"];
subgraph cluster_Region_1003629888 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0034|LOOP_END\lLOOP:0: B:26:0x002e\-\>B:28:0x0034\l|char char r4 = r6.charAt(r2)\ljava.lang.Object r3 = (R) r8.invoke(r3, java.lang.Character.valueOf(r4))\lr1.add(r3)\lr2++\l}"];
}
}
Node_30 [shape=record,label="{30\:\ 0x0049|RETURN\l|return r1\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0011}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0013}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0018}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x002e|LOOP_START\lLOOP:0: B:26:0x002e\-\>B:28:0x0034\lPHI: r2 r3 \l  PHI: (r2v1 int) = (r2v0 int), (r2v4 int) binds: [B:25:0x001d, B:28:0x0034] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'accumulator' java.lang.Object) = (r3v2 'accumulator' java.lang.Object), (r3v4 'accumulator' java.lang.Object) binds: [B:25:0x001d, B:28:0x0034] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0046|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0046}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0015}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.runningFold((r6v0 '$this$runningFold' java.lang.CharSequence A[D('$this$runningFold' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 R A[D('initial' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'operation' kotlin.jvm.functions.Function2\<? super R, ? super java.lang.Character, ? extends R\> A[D('operation' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0034 \-\> B:26:0x002e, CROSS_EDGE: B:30:0x0049 \-\> B:17:?, CROSS_EDGE: B:21:0x0015 \-\> B:22:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;TR;Lkotlin\/jvm\/functions\/Function2\<\-TR;\-Ljava\/lang\/Character;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_22 -> Node_23;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_17;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_27 -> Node_31[style=dashed];
Node_28 -> Node_26;
Node_30 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_23 -> Node_24;
Node_26 -> Node_27;
Node_31 -> Node_29;
Node_29 -> Node_30;
Node_21 -> Node_22;
}

