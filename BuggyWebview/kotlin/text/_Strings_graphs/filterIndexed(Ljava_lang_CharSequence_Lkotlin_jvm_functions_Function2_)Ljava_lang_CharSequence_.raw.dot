digraph "CFG forkotlin.text.StringsKt___StringsKt.filterIndexed(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/CharSequence;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r14 I:java.lang.Object A[D('$this$filterIndexed' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r15 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:440)\l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: CHECK_CAST (r1 I:java.lang.Appendable) = (java.lang.Appendable) (r1 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('$this$filterIndexed' java.lang.CharSequence)]) \l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$filterIndexedTo$iv' java.lang.CharSequence)])  (LINE:2501)\l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2502)\l0x0017: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2503)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|LOOP_START\lLOOP:0: B:17:0x0018\-\>B:22:0x003d\l|0x0018: INVOKE  (r8 I:int) = (r4 I:java.lang.CharSequence A[D('$this$forEachIndexed$iv$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|0x001c: IF  (r7 I:??[int, byte, short, char]) \>= (r8 I:??[int, byte, short, char])  \-\> B:25:0x0042 \l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|0x001e: INVOKE  (r8 I:char) = (r4 I:java.lang.CharSequence A[D('$this$forEachIndexed$iv$iv' java.lang.CharSequence)]), (r7 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0022: ARITH  (r9 I:int) = (r6 I:int A[D('index$iv$iv' int)]) + (1 int) \l0x0024: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('item$iv$iv' char)]) \l0x0025: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: INVOKE  (r12 I:java.lang.Integer) = (r6 I:int A[D('index$iv' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:2504)\l0x002a: INVOKE  (r13 I:java.lang.Character) = (r10 I:char A[D('element$iv' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x002e: INVOKE  (r12 I:java.lang.Object) = \l  (r15 I:kotlin.jvm.functions.Function2 A[D('predicate' kotlin.jvm.functions.Function2)])\l  (r12 I:java.lang.Object)\l  (r13 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0032: CHECK_CAST (r12 I:java.lang.Boolean) = (java.lang.Boolean) (r12 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r12 I:boolean) = (r12 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|0x0038: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x003d \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|0x003a: INVOKE  (r1 I:java.lang.Appendable A[D('destination$iv' java.lang.Appendable)]), (r10 I:char A[D('element$iv' char)]) type: INTERFACE call: java.lang.Appendable.append(char):java.lang.Appendable A[MD:(char):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|LOOP_END\lLOOP:0: B:17:0x0018\-\>B:22:0x003d\l|0x003e: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x0040: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv' int)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x003d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0044: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv' java.lang.Appendable)]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0046|RETURN\l|0x0046: RETURN  (r1 I:java.lang.CharSequence)  (LINE:440)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt___StringsKt.filterIndexed((r14 I:java.lang.CharSequence A[D('$this$filterIndexed' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x003d \-\> B:17:0x0018, CROSS_EDGE: B:20:0x0038 \-\> B:22:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x0024: r6 'index$iv$iv' I\l  0x0024\-0x003e: r6 'index$iv' I\l  0x0025\-0x003e: r10 'element$iv' C\l  0x0026\-0x003e: r11 '$i$a$\-forEachIndexed\-StringsKt___StringsKt$filterIndexedTo$1$iv' I\l  0x0022\-0x0042: r8 'item$iv$iv' C\l  0x0024\-0x0042: r9 'index$iv$iv' I\l  0x0015\-0x0043: r4 '$this$forEachIndexed$iv$iv' Ljava\/lang\/CharSequence;\l  0x0016\-0x0043: r5 '$i$f$forEachIndexed' I\l  0x0042\-0x0043: r6 'index$iv$iv' I\l  0x0012\-0x0044: r1 'destination$iv' Ljava\/lang\/Appendable;\l  0x0013\-0x0044: r2 '$this$filterIndexedTo$iv' Ljava\/lang\/CharSequence;\l  0x0014\-0x0044: r3 '$i$f$filterIndexedTo' I\l  0x000b\-0x0046: r0 '$i$f$filterIndexed' I\l  \-1 \-0x0046: r14 '$this$filterIndexed' Ljava\/lang\/CharSequence;\l  \-1 \-0x0046: r15 'predicate' Lkotlin\/jvm\/functions\/Function2;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
}

