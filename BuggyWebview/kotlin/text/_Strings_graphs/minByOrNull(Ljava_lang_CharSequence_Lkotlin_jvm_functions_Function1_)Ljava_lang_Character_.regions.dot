digraph "CFG forkotlin.text.StringsKt___StringsKt.minByOrNull(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Character;" {
subgraph cluster_Region_1418451996 {
label = "R(2:1|(2:(1:5)|(2:7|(2:(1:10)|(3:11|(2:14|(1:17)(0))|23)))))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"selector\")\l}"];
subgraph cluster_Region_460267528 {
label = "R(2:(1:5)|(2:7|(2:(1:10)|(3:11|(2:14|(1:17)(0))|23))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_410167007 {
label = "IF [B:32:0x0016] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0016|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r9.length() == 0) == true) goto L5\l}"];
subgraph cluster_Region_147390872 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0018|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_12273071 {
label = "R(2:7|(2:(1:10)|(3:11|(2:14|(1:17)(0))|23)))";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x001a|char char r1 = r9.charAt(0)\lint int r3 = kotlin.text.StringsKt.getLastIndex(r9)\l}"];
subgraph cluster_Region_36194209 {
label = "R(2:(1:10)|(3:11|(2:14|(1:17)(0))|23))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_595749009 {
label = "IF [B:36:0x0022] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0022|if (r3 == 0) goto L9\l}"];
subgraph cluster_Region_1618728016 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0028|RETURN\l|return java.lang.Character.valueOf(r1)\l}"];
}
}
subgraph cluster_Region_2043599930 {
label = "R(3:11|(2:14|(1:17)(0))|23)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0029|java.lang.Comparable java.lang.Comparable r4 = r10.invoke(java.lang.Character.valueOf(r1))\lkotlin.collections.IntIterator ?? r2 = new kotlin.ranges.IntRange(1, r3).iterator()\l}"];
subgraph cluster_LoopRegion_694118306 {
label = "LOOP:0: (2:14|(1:17)(0))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0040|if (r2.hasNext() != false) goto L14\l}"];
subgraph cluster_Region_654262719 {
label = "R(2:14|(1:17)(0))";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0042|int int r5 = r2.nextInt()\lchar char r6 = r9.charAt(r5)\ljava.lang.Comparable R r7 = r10.invoke(java.lang.Character.valueOf(r6))\l}"];
subgraph cluster_IfRegion_397994065 {
label = "IF [B:43:0x0058] THEN: R(1:17) ELSE: R(0)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0058|if (r4.compareTo(r7) \> 0) goto L16\l}"];
subgraph cluster_Region_1323260474 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x005a|r1 = r6\lr4 = r7\l}"];
}
subgraph cluster_Region_1621444748 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_46 [shape=record,label="{46\:\ 0x0061|RETURN\l|return java.lang.Character.valueOf(r1)\l}"];
}
}
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0011}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0013}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0024}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x003c|LOOP_START\lLOOP:0: B:40:0x003c\-\>B:49:0x003c\lPHI: r1 r4 \l  PHI: (r1v4 'minElem' char) = (r1v3 'minElem' char), (r1v5 'minElem' char) binds: [B:39:0x0029, B:49:0x003c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v3 'minValue' java.lang.Comparable) = (r4v2 'minValue' java.lang.Comparable), (r4v4 'minValue' java.lang.Comparable) binds: [B:39:0x0029, B:49:0x003c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x005a|SYNTHETIC\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x003c|SYNTHETIC\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x003c|LOOP_END\lSYNTHETIC\lLOOP:0: B:40:0x003c\-\>B:49:0x003c\lPHI: r1 r4 \l  PHI: (r1v5 'minElem' char) = (r1v4 'minElem' char), (r1v6 'minElem' char) binds: [B:50:0x003c, B:51:0x003c] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'minValue' java.lang.Comparable) = (r4v3 'minValue' java.lang.Comparable), (r4v5 'minValue' java.lang.Comparable) binds: [B:50:0x003c, B:51:0x003c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x003c|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x005d|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x005d}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0015}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.text.StringsKt___StringsKt.minByOrNull((r9v0 '$this$minByOrNull' java.lang.CharSequence A[D('$this$minByOrNull' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'selector' kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:38:0x0028 \-\> B:27:?, BACK_EDGE: B:43:0x0058 \-\> B:40:0x003c, BACK_EDGE: B:44:0x005a \-\> B:40:0x003c, CROSS_EDGE: B:46:0x0061 \-\> B:27:?, CROSS_EDGE: B:31:0x0015 \-\> B:32:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r2v1, types: [kotlin.collections.IntIterator]\}\lSIGNATURE: \<R::Ljava\/lang\/Comparable\<\-TR;\>;\>(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TR;\>;)Ljava\/lang\/Character;\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_32 -> Node_33;
Node_32 -> Node_35[style=dashed];
Node_33 -> Node_27;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_36 -> Node_39[style=dashed];
Node_38 -> Node_27;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_41 -> Node_47[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_48;
Node_43 -> Node_50[style=dashed];
Node_44 -> Node_51;
Node_46 -> Node_27;
Node_26 -> Node_28;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_37 -> Node_38;
Node_40 -> Node_41;
Node_48 -> Node_44;
Node_51 -> Node_49;
Node_49 -> Node_40;
Node_50 -> Node_49;
Node_47 -> Node_45;
Node_45 -> Node_46;
Node_31 -> Node_32;
}

