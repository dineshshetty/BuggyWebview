digraph "CFG forkotlin.text.StringsKt___StringsKt.filter(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$filter' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:420)\l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: CHECK_CAST (r1 I:java.lang.Appendable) = (java.lang.Appendable) (r1 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$filter' java.lang.CharSequence)]) \l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2491)\l0x0015: INVOKE  (r5 I:int) = (r2 I:java.lang.CharSequence A[D('$this$filterTo$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0019|LOOP_START\lLOOP:0: B:16:0x0019\-\>B:20:0x0032\l|0x0019: IF  (r4 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:23:0x0035 \l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|0x001b: INVOKE  (r6 I:char) = (r2 I:java.lang.CharSequence A[D('$this$filterTo$iv' java.lang.CharSequence)]), (r4 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:2492)\l0x001f: INVOKE  (r7 I:java.lang.Character) = (r6 I:char A[D('element$iv' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:2493)\l0x0023: INVOKE  (r7 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r7 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0027: CHECK_CAST (r7 I:java.lang.Boolean) = (java.lang.Boolean) (r7 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0032 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: INVOKE  (r1 I:java.lang.Appendable A[D('destination$iv' java.lang.Appendable)]), (r6 I:char A[D('element$iv' char)]) type: INTERFACE call: java.lang.Appendable.append(char):java.lang.Appendable A[MD:(char):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0032|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|LOOP_END\lLOOP:0: B:16:0x0019\-\>B:20:0x0032\l|0x0032: ARITH  (r4 I:int) = (r4 I:int A[D('index$iv' int)]) + (1 int)  (LINE:2491)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0032|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|0x0036: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv' java.lang.Appendable)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:java.lang.CharSequence)  (LINE:420)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt___StringsKt.filter((r8 I:java.lang.CharSequence A[D('$this$filter' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0032 \-\> B:16:0x0019, CROSS_EDGE: B:18:0x002d \-\> B:20:0x0032\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0032: r6 'element$iv' C\l  0x0015\-0x0035: r4 'index$iv' I\l  0x0012\-0x0036: r1 'destination$iv' Ljava\/lang\/Appendable;\l  0x0013\-0x0036: r2 '$this$filterTo$iv' Ljava\/lang\/CharSequence;\l  0x0014\-0x0036: r3 '$i$f$filterTo' I\l  0x000b\-0x0038: r0 '$i$f$filter' I\l  \-1 \-0x0038: r8 '$this$filter' Ljava\/lang\/CharSequence;\l  \-1 \-0x0038: r9 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_24;
Node_24 -> Node_20;
Node_20 -> Node_16;
Node_25 -> Node_20;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
}

