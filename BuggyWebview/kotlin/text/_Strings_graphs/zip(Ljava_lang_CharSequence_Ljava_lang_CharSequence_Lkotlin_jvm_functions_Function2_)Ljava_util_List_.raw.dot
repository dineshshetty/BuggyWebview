digraph "CFG forkotlin.text.StringsKt___StringsKt.zip(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$zip' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('other' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x000c: INVOKE  (r8 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence A[D('$this$zip' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:2427)\l0x0014: INVOKE  (r2 I:int) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0018: INVOKE  (r1 I:int) = (r1 I:int), (r2 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x001c: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2428)\l0x001e: INVOKE  (r2 I:java.util.ArrayList), (r1 I:int A[D('length' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0021: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2429)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|LOOP_START\lLOOP:0: B:11:0x0022\-\>B:12:0x0024\l|0x0022: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:15:0x003e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|LOOP_END\lLOOP:0: B:11:0x0022\-\>B:12:0x0024\l|0x0024: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence A[D('$this$zip' java.lang.CharSequence)]), (r3 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:2430)\l0x0028: INVOKE  (r4 I:java.lang.Character) = (r4 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x002c: INVOKE  (r5 I:char) = (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r3 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0030: INVOKE  (r5 I:java.lang.Character) = (r5 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0034: INVOKE  (r4 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function2 A[D('transform' kotlin.jvm.functions.Function2)])\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0038: INVOKE  (r2 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x003b: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:2429)\l}"];
Node_15 [shape=record,label="{15\:\ 0x003e|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|0x003e: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('i' int)]) = (r2 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:2432)\l0x003f: CHECK_CAST (r3 I:java.util.List) = (java.util.List) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0041|RETURN\l|0x0041: RETURN  (r3 I:java.util.List\<V\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<V\> kotlin.text.StringsKt___StringsKt.zip((r6 I:java.lang.CharSequence A[D('$this$zip' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function2\<? super java.lang.Character, ? super java.lang.Character, ? extends V\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0024 \-\> B:11:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x003e: r3 'i' I\l  0x0010\-0x0041: r0 '$i$f$zip' I\l  0x001c\-0x0041: r1 'length' I\l  0x0021\-0x0041: r2 'list' Ljava\/util\/ArrayList;\l  \-1 \-0x0041: r6 '$this$zip' Ljava\/lang\/CharSequence;\l  \-1 \-0x0041: r7 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0041: r8 'transform' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [V]\lSIGNATURE: \<V:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Character;\-Ljava\/lang\/Character;+TV;\>;)Ljava\/util\/List\<TV;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

