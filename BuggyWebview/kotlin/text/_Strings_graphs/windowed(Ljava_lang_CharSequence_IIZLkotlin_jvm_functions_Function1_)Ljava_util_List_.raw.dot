digraph "CFG forkotlin.text.StringsKt___StringsKt.windowed(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$windowed' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r13 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r10 I:int A[D('size' int)]), (r11 I:int A[D('step' int)]) type: STATIC call: kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void A[MD:(int, int):void (m)] (LINE:2347)\l0x000d: INVOKE  (r0 I:int) = (r9 I:java.lang.CharSequence A[D('$this$windowed' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:2348)\l0x0011: ARITH  (r1 I:int) = (r0 I:int A[D('thisSize' int)]) \/ (r11 I:int A[D('step' int)])  (LINE:2349)\l0x0013: ARITH  (r2 I:int) = (r0 I:int A[D('thisSize' int)]) % (r11 I:int A[D('step' int)]) \l0x0015: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0016: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001b \l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|0x0019: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001c|0x001c: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001d: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2350)\l0x001f: INVOKE  (r2 I:java.util.ArrayList), (r1 I:int A[D('resultCapacity' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0022: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2351)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|LOOP_START\lLOOP:0: B:33:0x0023\-\>B:45:0x0038\l|0x0023: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:36:0x0029  (LINE:2352)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0025|0x0025: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \>= (r0 I:??[int, byte, short, char] A[D('thisSize' int)])  \-\> B:36:0x0029 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0027|0x0027: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x002a|0x002a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0045 \l}"];
Node_38 [shape=record,label="{38\:\ 0x002c|0x002c: ARITH  (r6 I:int) = (r5 I:int A[D('index' int)]) + (r10 I:int A[D('size' int)])  (LINE:2353)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002e|0x002e: IF  (r6 I:??[int, byte, short, char] A[D('end' int)]) \< (0 ??[int, byte, short, char])  \-\> B:43:0x0035  (LINE:2354)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0030|0x0030: IF  (r6 I:??[int, byte, short, char] A[D('end' int)]) \<= (r0 I:??[int, byte, short, char] A[D('thisSize' int)])  \-\> B:42:0x0033 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0033|0x0033: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('end' int)]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0038|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0038|LOOP_END\lLOOP:0: B:33:0x0023\-\>B:45:0x0038\l|0x0038: INVOKE  (r8 I:java.lang.CharSequence) = \l  (r9 I:java.lang.CharSequence A[D('$this$windowed' java.lang.CharSequence)])\l  (r5 I:int A[D('index' int)])\l  (r7 I:int A[D('coercedEnd' int)])\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)] (LINE:2355)\l0x003c: INVOKE  (r8 I:java.lang.Object) = (r13 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)]), (r8 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0040: INVOKE  (r2 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r8 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0043: ARITH  (r5 I:int) = (r5 I:int A[D('index' int)]) + (r11 I:int A[D('step' int)])  (LINE:2356)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0035|0x0035: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('partialWindows' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0045 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0037|0x0037: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('thisSize' int)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0038|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0045|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0045|0x0045: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:2358)\l0x0046: CHECK_CAST (r3 I:java.util.List) = (java.util.List) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0048|RETURN\l|0x0048: RETURN  (r3 I:java.util.List\<R\>) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0045|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|0x0029: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|0x001b: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.windowed((r9 I:java.lang.CharSequence A[D('$this$windowed' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0038 \-\> B:33:0x0023, CROSS_EDGE: B:44:0x0037 \-\> B:45:0x0038, CROSS_EDGE: B:39:0x002e \-\> B:43:0x0035, CROSS_EDGE: B:37:0x002a \-\> B:46:0x0045, CROSS_EDGE: B:36:0x0029 \-\> B:37:0x002a, CROSS_EDGE: B:33:0x0023 \-\> B:36:0x0029, CROSS_EDGE: B:31:0x001b \-\> B:32:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002e\-0x0044: r6 'end' I\l  0x0038\-0x0044: r7 'coercedEnd' I\l  0x0011\-0x0048: r0 'thisSize' I\l  0x001d\-0x0048: r1 'resultCapacity' I\l  0x0022\-0x0048: r2 'result' Ljava\/util\/ArrayList;\l  0x0023\-0x0048: r5 'index' I\l  \-1 \-0x0048: r9 '$this$windowed' Ljava\/lang\/CharSequence;\l  \-1 \-0x0048: r10 'size' I\l  \-1 \-0x0048: r11 'step' I\l  \-1 \-0x0048: r12 'partialWindows' Z\l  \-1 \-0x0048: r13 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/CharSequence;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_49;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_42 -> Node_51;
Node_51 -> Node_45;
Node_45 -> Node_33;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_48;
Node_44 -> Node_50;
Node_50 -> Node_45;
Node_48 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_27;
Node_49 -> Node_46;
Node_36 -> Node_37;
Node_31 -> Node_32;
}

