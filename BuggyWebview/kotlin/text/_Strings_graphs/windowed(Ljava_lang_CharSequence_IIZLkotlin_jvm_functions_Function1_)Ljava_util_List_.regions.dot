digraph "CFG forkotlin.text.StringsKt___StringsKt.windowed(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
subgraph cluster_Region_1822403373 {
label = "R(4:1|4|(1:(2:(1:22)|(3:9|(1:12)(1:(1:18)(1:16))|14)))|20) | DECL_VAR: int coercedEnd\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"transform\")\lkotlin.collections.SlidingWindowKt.checkWindowSizeStep(r10, r11)\lint int r0 = r9.length()\l}"];
Node_32 [shape=record,label="{32\:\ 0x001c|PHI: r2 \l  PHI: (r2v2 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r1 = (r0 \/ r11) + (r0 % r11 == 0 ? 0 : 1)\ljava.util.ArrayList java.util.ArrayList r2 = new java.util.ArrayList(r1)\lint r5 = 0\l}"];
subgraph cluster_LoopRegion_1820517004 {
label = "LOOP:0: (1:(2:(1:22)|(3:9|(1:12)(1:(1:18)(1:16))|14)))";
node [shape=record,color=blue];
subgraph cluster_Region_1914759276 {
label = "R(1:(2:(1:22)|(3:9|(1:12)(1:(1:18)(1:16))|14)))";
node [shape=record,color=blue];
subgraph cluster_Region_1093388398 {
label = "R(2:(1:22)|(3:9|(1:12)(1:(1:18)(1:16))|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1711958959 {
label = "IF [B:37:0x002a] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x002a|PHI: r6 \l  PHI: (r6v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \>= 0 && r5 \< r0) != true) goto L22\l}"];
subgraph cluster_Region_365817298 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x0045|SYNTHETIC\lEDGE_INSN: B:49:0x0045\-\>B:46:0x0045 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_2087646156 {
label = "R(3:9|(1:12)(1:(1:18)(1:16))|14)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x002c|int int r6 = r5 + r10\l}"];
subgraph cluster_IfRegion_2067106338 {
label = "IF [B:39:0x002e, B:40:0x0030] THEN: R(1:12) ELSE: R(1:(1:18)(1:16))";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x002e|if (r6 \>= 0) goto L11\l}"];
Node_40 [shape=record,label="{40\:\ 0x0030|ADDED_TO_REGION\l|if (r6 \<= r0) goto L12\l}"];
subgraph cluster_Region_1233955069 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0033|r7 = r6\l}"];
}
subgraph cluster_Region_1847655269 {
label = "R(1:(1:18)(1:16)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_464919877 {
label = "IF [B:43:0x0035] THEN: R(1:18) ELSE: R(1:16) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0035|if (r12 != true) goto L18\l}"];
subgraph cluster_Region_79814373 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0045|SYNTHETIC\lEDGE_INSN: B:48:0x0045\-\>B:46:0x0045 ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_1840901013 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0037|r7 = r0\l}"];
}
}
}
}
Node_45 [shape=record,label="{45\:\ 0x0038|LOOP_END\lLOOP:0: B:33:0x0023\-\>B:45:0x0038\lPHI: r7 \l  PHI: (r7v1 'coercedEnd' int) = (r7v0 'coercedEnd' int), (r7v2 'coercedEnd' int) binds: [B:50:0x0038, B:51:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|r2.add(r13.invoke(r9.subSequence(r5, r7)))\lr5 += r11\l}"];
}
}
}
}
Node_47 [shape=record,label="{47\:\ 0x0048|RETURN\l|return r2\l}"];
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0017}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0019}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0023|LOOP_START\lLOOP:0: B:33:0x0023\-\>B:45:0x0038\lPHI: r5 \l  PHI: (r5v1 'index' int) = (r5v0 'index' int), (r5v2 'index' int) binds: [B:32:0x001c, B:45:0x0038] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0025|REMOVE\lADDED_TO_REGION\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0027}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0038|SYNTHETIC\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x0038|SYNTHETIC\l}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0045|EDGE_INSN: B:49:0x0045\-\>B:46:0x0045 ?: BREAK  , EDGE_INSN: B:48:0x0045\-\>B:46:0x0045 ?: BREAK  \l}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0029}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x001b}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.windowed((r9v0 '$this$windowed' java.lang.CharSequence A[D('$this$windowed' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'partialWindows' boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'transform' kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0038 \-\> B:33:0x0023, CROSS_EDGE: B:44:0x0037 \-\> B:45:0x0038, CROSS_EDGE: B:39:0x002e \-\> B:43:0x0035, CROSS_EDGE: B:37:0x002a \-\> B:46:0x0045, CROSS_EDGE: B:36:0x0029 \-\> B:37:0x002a, CROSS_EDGE: B:33:0x0023 \-\> B:36:0x0029, CROSS_EDGE: B:31:0x001b \-\> B:32:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/CharSequence;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_32 -> Node_33;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_49;
Node_49 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_43[style=dashed];
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_42 -> Node_51;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_48;
Node_48 -> Node_46;
Node_44 -> Node_50;
Node_45 -> Node_33;
Node_47 -> Node_27;
Node_26 -> Node_28;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_33 -> Node_34;
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_34 -> Node_36;
Node_35 -> Node_37;
Node_51 -> Node_45;
Node_50 -> Node_45;
Node_46 -> Node_47;
Node_36 -> Node_37;
Node_31 -> Node_32;
}

