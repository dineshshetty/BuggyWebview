digraph "CFG forkotlin.text.StringsKt___StringsKt.asSequence(Ljava\/lang\/CharSequence;)Lkotlin\/sequences\/Sequence;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|if ((r1 instanceof java.lang.String) == false) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009}"];
Node_18 [shape=record,label="{18\:\ 0x000d|if (r1.length() != 0) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|r0 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|PHI: r0 \l  PHI: (r0v6 boolean) = (r0v5 boolean), (r0v8 boolean) binds: [B:20:0x0011, B:19:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014}"];
Node_23 [shape=record,label="{23\:\ 0x0018|RETURN\l|return kotlin.sequences.SequencesKt.emptySequence()\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|r0 = false\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019}"];
Node_25 [shape=record,label="{25\:\ 0x0020|RETURN\l|return new kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1()\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<java.lang.Character\> kotlin.text.StringsKt___StringsKt.asSequence((r1v0 '$this$asSequence' java.lang.CharSequence A[D('$this$asSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0020 \-\> B:14:?, CROSS_EDGE: B:20:0x0011 \-\> B:21:0x0012, CROSS_EDGE: B:16:0x0007 \-\> B:24:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;)Lkotlin\/sequences\/Sequence\<Ljava\/lang\/Character;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_20 -> Node_21;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

