digraph "CFG forkotlin.text.StringsKt___StringsKt.partition(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/Pair;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$partition' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:2276)\l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:2277)\l0x0012: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0015: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2278)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|LOOP_START\lLOOP:0: B:18:0x0016\-\>B:24:0x0037\l|0x0016: INVOKE  (r4 I:int) = (r6 I:java.lang.CharSequence A[D('$this$partition' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:27:0x003a \l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|0x001c: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence A[D('$this$partition' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0020: INVOKE  (r5 I:java.lang.Character) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:2279)\l0x0024: INVOKE  (r5 I:java.lang.Object) = (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0028: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x002a: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002e|0x002e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0034 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|0x0030: INVOKE  (r1 I:java.lang.StringBuilder A[D('first' java.lang.StringBuilder)]), (r4 I:char A[D('element' char)]) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)] (LINE:2280)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0037|LOOP_END\lLOOP:0: B:18:0x0016\-\>B:24:0x0037\l|0x0037: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:2278)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0034|0x0034: INVOKE  (r2 I:java.lang.StringBuilder A[D('second' java.lang.StringBuilder)]), (r4 I:char A[D('element' char)]) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)] (LINE:2282)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0037|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x003a|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x003a|0x003a: NEW_INSTANCE  (r3 I:kotlin.Pair) =  kotlin.Pair  (LINE:2285)\l0x003c: INVOKE  \l  (r3 I:kotlin.Pair)\l  (r1 I:java.lang.Object A[D('first' java.lang.StringBuilder)])\l  (r2 I:java.lang.Object A[D('second' java.lang.StringBuilder)])\l type: DIRECT call: kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void A[MD:(A, B):void (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x003f|RETURN\l|0x003f: RETURN  (r3 I:kotlin.Pair\<java.lang.CharSequence, java.lang.CharSequence\>) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.lang.CharSequence, java.lang.CharSequence\> kotlin.text.StringsKt___StringsKt.partition((r6 I:java.lang.CharSequence A[D('$this$partition' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0037 \-\> B:18:0x0016, CROSS_EDGE: B:23:0x0034 \-\> B:24:0x0037\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x003a: r4 'element' C\l  0x000b\-0x003f: r0 '$i$f$partition' I\l  0x0010\-0x003f: r1 'first' Ljava\/lang\/StringBuilder;\l  0x0015\-0x003f: r2 'second' Ljava\/lang\/StringBuilder;\l  \-1 \-0x003f: r6 '$this$partition' Ljava\/lang\/CharSequence;\l  \-1 \-0x003f: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Lkotlin\/Pair\<Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;\>;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_29;
Node_29 -> Node_24;
Node_24 -> Node_18;
Node_23 -> Node_28;
Node_28 -> Node_24;
Node_27 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_16;
}

