digraph "CFG forkotlin.text.StringsKt___StringsKt.reversed(Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$reversed' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:654)\l0x0007: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.CharSequence A[D('$this$reversed' java.lang.CharSequence)]) type: DIRECT call: java.lang.StringBuilder.\<init\>(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (c)]\l0x000a: INVOKE  (r0 I:java.lang.StringBuilder) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.reverse():java.lang.StringBuilder A[MD:():java.lang.StringBuilder (c)]\l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"StringBuilder(this).reverse()\" \l0x0010: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0013: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt___StringsKt.reversed((r2 I:java.lang.CharSequence A[D('$this$reversed' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r2 '$this$reversed' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

