digraph "CFG forkotlin.text.StringsKt___StringsKt.asSequence(Ljava\/lang\/CharSequence;)Lkotlin\/sequences\/Sequence;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$asSequence' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$asSequence' java.lang.CharSequence)]) java.lang.String  (LINE:2478)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0019 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence A[D('$this$asSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0011 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0019 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|0x0014: INVOKE  (r0 I:kotlin.sequences.Sequence) =  type: STATIC call: kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence A[MD:\<T\>:():kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:kotlin.sequences.Sequence\<java.lang.Character\>) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1) =  kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1  (LINE:2479)\l0x001b: INVOKE  \l  (r0 I:kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1)\l  (r1 I:java.lang.CharSequence A[D('$this$asSequence' java.lang.CharSequence)])\l type: DIRECT call: kotlin.text.StringsKt___StringsKt$asSequence$$inlined$Sequence$1.\<init\>(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (m)]\l0x001e: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:kotlin.sequences.Sequence\<java.lang.Character\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<java.lang.Character\> kotlin.text.StringsKt___StringsKt.asSequence((r1 I:java.lang.CharSequence A[D('$this$asSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0020 \-\> B:14:?, CROSS_EDGE: B:20:0x0011 \-\> B:21:0x0012, CROSS_EDGE: B:16:0x0007 \-\> B:24:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r1 '$this$asSequence' Ljava\/lang\/CharSequence;\lSIGNATURE: (Ljava\/lang\/CharSequence;)Lkotlin\/sequences\/Sequence\<Ljava\/lang\/Character;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_20 -> Node_21;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

