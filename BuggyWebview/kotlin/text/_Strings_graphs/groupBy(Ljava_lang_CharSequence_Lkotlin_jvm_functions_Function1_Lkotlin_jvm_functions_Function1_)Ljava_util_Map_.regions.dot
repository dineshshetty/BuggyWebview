digraph "CFG forkotlin.text.StringsKt___StringsKt.groupBy(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
subgraph cluster_Region_16726596 {
label = "R(3:1|(3:4|(1:6)(1:9)|8)|12) | DECL_VAR: java.util.ArrayList null\l";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"keySelector\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r14, \"valueTransform\")\ljava.util.Map java.util.Map r1 = (java.util.Map\<K, java.util.List\<V\>\>) new java.util.LinkedHashMap()\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_1820812143 {
label = "LOOP:0: (3:4|(1:6)(1:9)|8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x001e|if (r4 \< r12.length()) goto L4\l}"];
subgraph cluster_Region_1268791168 {
label = "R(3:4|(1:6)(1:9)|8)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0020|char char r5 = r12.charAt(r4)\ljava.lang.Object K r6 = r13.invoke(java.lang.Character.valueOf(r5))\ljava.lang.Object java.util.List\<V\> r9 = r1.get(r6)\l}"];
subgraph cluster_IfRegion_357779873 {
label = "IF [B:21:0x0032] THEN: R(1:6) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0032|if (r9 == null) goto L6\l}"];
subgraph cluster_Region_2138147429 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0034|java.util.List r10 = new java.util.ArrayList()\lr1.put(r6, r10)\l}"];
}
subgraph cluster_Region_1602576572 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0042|r10 = r9\l}"];
}
}
Node_24 [shape=record,label="{24\:\ 0x0043|LOOP_END\lLOOP:0: B:18:0x001a\-\>B:24:0x0043\lPHI: r10 \l  PHI: (r10v1 java.util.List\<V\>) = (r10v0 java.util.List), (r10v4 java.util.ArrayList) binds: [B:28:0x0043, B:29:0x0043] A[DONT_GENERATE, DONT_INLINE]\l|java.util.List java.util.List r7 = r10\lr7.add(r14.invoke(java.lang.Character.valueOf(r5)))\lr4++\l}"];
}
}
Node_26 [shape=record,label="{26\:\ 0x0056|RETURN\l|return r1\l}"];
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x001a|LOOP_START\lLOOP:0: B:18:0x001a\-\>B:24:0x0043\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:17:0x0000, B:24:0x0043] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0043|SYNTHETIC\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0043|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0056|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, java.util.List\<V\>\> kotlin.text.StringsKt___StringsKt.groupBy((r12v0 '$this$groupBy' java.lang.CharSequence A[D('$this$groupBy' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'keySelector' kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends K\> A[D('keySelector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'valueTransform' kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends V\> A[D('valueTransform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0043 \-\> B:18:0x001a, CROSS_EDGE: B:23:0x0042 \-\> B:24:0x0043\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TK;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TV;\>;)Ljava\/util\/Map\<TK;Ljava\/util\/List\<TV;\>;\>;\l}"];
MethodNode -> Node_15;Node_17 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_27[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_28;
Node_24 -> Node_18;
Node_26 -> Node_16;
Node_15 -> Node_17;
Node_18 -> Node_19;
Node_29 -> Node_24;
Node_28 -> Node_24;
Node_27 -> Node_26;
}

