digraph "CFG forkotlin.text.StringsKt___StringsKt.mapTo(Ljava\/lang\/CharSequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Collection;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"transform\")\lr1 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|LOOP_START\lLOOP:0: B:11:0x0011\-\>B:13:0x0017\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:10:0x0000, B:13:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|if (r1 \>= r4.length()) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|LOOP_END\lLOOP:0: B:11:0x0011\-\>B:13:0x0017\l|char r2 = r4.charAt(r1)\lr5.add(r6.invoke(java.lang.Character.valueOf(r2)))\lint r1 = r1 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0029|RETURN\l|return r5\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super R\> kotlin.text.StringsKt___StringsKt.mapTo((r4v0 '$this$mapTo' java.lang.CharSequence A[D('$this$mapTo' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'destination' C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'transform' kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0017 \-\> B:11:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, C extends java.util.Collection\<? super R\>]\lSIGNATURE: \<R:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TR;\>;\>(Ljava\/lang\/CharSequence;TC;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TR;\>;)TC;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

