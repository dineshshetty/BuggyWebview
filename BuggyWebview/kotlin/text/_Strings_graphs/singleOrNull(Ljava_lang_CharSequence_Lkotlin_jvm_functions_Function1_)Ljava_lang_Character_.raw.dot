digraph "CFG forkotlin.text.StringsKt___StringsKt.singleOrNull(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Character;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$singleOrNull' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:305)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:306)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:307)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|LOOP_START\lLOOP:0: B:21:0x000e\-\>B:28:0x0031\l|0x000e: INVOKE  (r4 I:int) = (r7 I:java.lang.CharSequence A[D('$this$singleOrNull' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|0x0013: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:32:0x0034 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: INVOKE  (r4 I:char) = (r7 I:java.lang.CharSequence A[D('$this$singleOrNull' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0019: INVOKE  (r6 I:java.lang.Character) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:308)\l0x001d: INVOKE  (r6 I:java.lang.Object) = (r8 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r6 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0021: CHECK_CAST (r6 I:java.lang.Boolean) = (java.lang.Boolean) (r6 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r6 I:boolean) = (r6 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|0x0027: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0031 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0029|0x0029: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002c  (LINE:309)\l}"];
Node_27 [shape=record,label="{27\:\ 0x002c|0x002c: INVOKE  (r1 I:java.lang.Character A[D('single' java.lang.Character)]) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:310)\l0x0030: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:311)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0031|LOOP_END\lLOOP:0: B:21:0x000e\-\>B:28:0x0031\l|0x0031: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:307)\l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x002b|RETURN\l|0x002b: RETURN  (r5 I:java.lang.Character) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0031|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0034|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0034|0x0034: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0037  (LINE:314)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0036|RETURN\l|0x0036: RETURN  (r5 I:java.lang.Character) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:java.lang.Character A[D('single' java.lang.Character)])  (LINE:315)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.text.StringsKt___StringsKt.singleOrNull((r7 I:java.lang.CharSequence A[D('$this$singleOrNull' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0031 \-\> B:21:0x000e, CROSS_EDGE: B:24:0x0027 \-\> B:28:0x0031, CROSS_EDGE: B:30:0x0036 \-\> B:19:?, CROSS_EDGE: B:31:0x0037 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0034: r4 'element' C\l  0x000b\-0x0037: r0 '$i$f$singleOrNull' I\l  0x000c\-0x0037: r1 'single' Ljava\/lang\/Character;\l  0x000d\-0x0037: r2 'found' Z\l  \-1 \-0x0037: r7 '$this$singleOrNull' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r8 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/Character;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_27;
Node_25 -> Node_33[style=dashed];
Node_27 -> Node_34;
Node_34 -> Node_28;
Node_28 -> Node_21;
Node_33 -> Node_26;
Node_26 -> Node_19;
Node_35 -> Node_28;
Node_32 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_19;
Node_31 -> Node_19;
}

