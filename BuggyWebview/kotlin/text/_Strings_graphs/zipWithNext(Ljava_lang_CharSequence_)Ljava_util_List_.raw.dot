digraph "CFG forkotlin.text.StringsKt___StringsKt.zipWithNext(Ljava\/lang\/CharSequence;)Ljava\/util\/List;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$zipWithNext' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$zipWithNext' java.lang.CharSequence)])  (LINE:2444)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:int) = (r0 I:java.lang.CharSequence A[D('$this$zipWithNext$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:2633)\l0x000b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000c: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char] A[D('size$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:17:0x0014  (LINE:2634)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: INVOKE  (r3 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x003d: RETURN  (r3 I:java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\> A[D('result$iv' java.util.ArrayList)]) A[SYNTHETIC] (LINE:2444)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2635)\l0x0016: INVOKE  (r3 I:java.util.ArrayList), (r2 I:int A[D('size$iv' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0019: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2636)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|LOOP_START\lLOOP:0: B:18:0x001a\-\>B:19:0x001c\l|0x001a: IF  (r4 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r2 I:??[int, byte, short, char] A[D('size$iv' int)])  \-\> B:22:0x0039 \l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|LOOP_END\lLOOP:0: B:18:0x001a\-\>B:19:0x001c\l|0x001c: INVOKE  (r5 I:char) = (r0 I:java.lang.CharSequence A[D('$this$zipWithNext$iv' java.lang.CharSequence)]), (r4 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:2637)\l0x0020: ARITH  (r6 I:int) = (r4 I:int A[D('index$iv' int)]) + (1 int) \l0x0022: INVOKE  (r6 I:char) = (r0 I:java.lang.CharSequence A[D('$this$zipWithNext$iv' java.lang.CharSequence)]), (r6 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0026: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: INVOKE  (r8 I:java.lang.Character) = (r5 I:char A[D('a' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:2444)\l0x002b: INVOKE  (r9 I:java.lang.Character) = (r6 I:char A[D('b' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x002f: INVOKE  (r5 I:kotlin.Pair A[D('a' char)]) = (r8 I:java.lang.Object), (r9 I:java.lang.Object) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l0x0033: INVOKE  (r3 I:java.util.ArrayList A[D('result$iv' java.util.ArrayList)]), (r5 I:java.lang.Object A[D('a' char)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0036: ARITH  (r4 I:int) = (r4 I:int A[D('index$iv' int)]) + (1 int)  (LINE:2636)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0039|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0039|0x0039: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('index$iv' int)]) = (r3 I:??[OBJECT, ARRAY] A[D('result$iv' java.util.ArrayList)])  (LINE:2639)\l0x003a: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l0x003c: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('result$iv' java.util.ArrayList)]) = (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|RETURN\lORIG_RETURN\l|0x003d: RETURN  (r3 I:java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\> A[D('result$iv' java.util.ArrayList)])  (LINE:2444)\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<java.lang.Character, java.lang.Character\>\> kotlin.text.StringsKt___StringsKt.zipWithNext((r10 I:java.lang.CharSequence A[D('$this$zipWithNext' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001c \-\> B:18:0x001a, CROSS_EDGE: B:20:0x0039 \-\> B:21:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x0033: r5 'a' C\l  0x0026\-0x0033: r6 'b' C\l  0x0027\-0x0033: r7 '$i$a$\-zipWithNext\-StringsKt___StringsKt$zipWithNext$1' I\l  0x001a\-0x0039: r4 'index$iv' I\l  0x0006\-0x003d: r0 '$this$zipWithNext$iv' Ljava\/lang\/CharSequence;\l  0x0007\-0x003d: r1 '$i$f$zipWithNext' I\l  0x000d\-0x003d: r2 'size$iv' I\l  0x0019\-0x003d: r3 'result$iv' Ljava\/util\/ArrayList;\l  \-1 \-0x003d: r10 '$this$zipWithNext' Ljava\/lang\/CharSequence;\lSIGNATURE: (Ljava\/lang\/CharSequence;)Ljava\/util\/List\<Lkotlin\/Pair\<Ljava\/lang\/Character;Ljava\/lang\/Character;\>;\>;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_18;
Node_22 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

