digraph "CFG forkotlin.text.StringsKt___StringsKt.zipWithNext(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$zipWithNext' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:int) = (r6 I:java.lang.CharSequence A[D('$this$zipWithNext' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:2457)\l0x000f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|0x0011: IF  (r1 I:??[int, byte, short, char] A[D('size' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:18:0x0018  (LINE:2458)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|0x0013: INVOKE  (r2 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:java.util.List\<R\>) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|0x0018: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2459)\l0x001a: INVOKE  (r2 I:java.util.ArrayList), (r1 I:int A[D('size' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x001d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2460)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|LOOP_START\lLOOP:0: B:19:0x001e\-\>B:20:0x0020\l|0x001e: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \>= (r1 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:23:0x003c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|LOOP_END\lLOOP:0: B:19:0x001e\-\>B:20:0x0020\l|0x0020: INVOKE  (r4 I:char) = (r6 I:java.lang.CharSequence A[D('$this$zipWithNext' java.lang.CharSequence)]), (r3 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:2461)\l0x0024: INVOKE  (r4 I:java.lang.Character) = (r4 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0028: ARITH  (r5 I:int) = (r3 I:int A[D('index' int)]) + (1 int) \l0x002a: INVOKE  (r5 I:char) = (r6 I:java.lang.CharSequence A[D('$this$zipWithNext' java.lang.CharSequence)]), (r5 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x002e: INVOKE  (r5 I:java.lang.Character) = (r5 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0032: INVOKE  (r4 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function2 A[D('transform' kotlin.jvm.functions.Function2)])\l  (r4 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0036: INVOKE  (r2 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0039: ARITH  (r3 I:int) = (r3 I:int A[D('index' int)]) + (1 int)  (LINE:2460)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003c|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|0x003c: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('index' int)]) = (r2 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:2463)\l0x003d: CHECK_CAST (r3 I:java.util.List) = (java.util.List) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|RETURN\l|0x003f: RETURN  (r3 I:java.util.List\<R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.zipWithNext((r6 I:java.lang.CharSequence A[D('$this$zipWithNext' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function2\<? super java.lang.Character, ? super java.lang.Character, ? extends R\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0020 \-\> B:19:0x001e, CROSS_EDGE: B:22:0x003f \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x003c: r3 'index' I\l  0x000b\-0x003f: r0 '$i$f$zipWithNext' I\l  0x0011\-0x003f: r1 'size' I\l  0x001d\-0x003f: r2 'result' Ljava\/util\/ArrayList;\l  \-1 \-0x003f: r6 '$this$zipWithNext' Ljava\/lang\/CharSequence;\l  \-1 \-0x003f: r7 'transform' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Character;\-Ljava\/lang\/Character;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_19;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

