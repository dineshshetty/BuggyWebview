digraph "CFG forkotlin.text.StringsKt___StringsKt.randomOrNull(Ljava\/lang\/CharSequence;Lkotlin\/random\/Random;)Ljava\/lang\/Character;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$randomOrNull' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"random\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('random' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence A[D('$this$randomOrNull' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:260)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0012 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0017 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0015|RETURN\l|0x0015: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:261)\l0x0016: RETURN  (r0 I:java.lang.Character) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|0x0017: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence A[D('$this$randomOrNull' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:262)\l0x001b: INVOKE  (r0 I:int) = (r2 I:kotlin.random.Random A[D('random' kotlin.random.Random)]), (r0 I:int) type: VIRTUAL call: kotlin.random.Random.nextInt(int):int A[MD:(int):int (m)]\l0x001f: INVOKE  (r0 I:char) = (r1 I:java.lang.CharSequence A[D('$this$randomOrNull' java.lang.CharSequence)]), (r0 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0023: INVOKE  (r0 I:java.lang.Character) = (r0 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:java.lang.Character) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.text.StringsKt___StringsKt.randomOrNull((r1 I:java.lang.CharSequence A[D('$this$randomOrNull' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.random.Random A[D('random' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0027 \-\> B:12:?, CROSS_EDGE: B:16:0x0012 \-\> B:17:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0027: r1 '$this$randomOrNull' Ljava\/lang\/CharSequence;\l  \-1 \-0x0027: r2 'random' Lkotlin\/random\/Random;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

