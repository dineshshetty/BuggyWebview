digraph "CFG forkotlin.text.StringsKt___StringsKt.indexOfLast(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"predicate\")\lint r1 = r5.length() + (\-1)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|if (r1 \< 0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|LOOP_START\lLOOP:0: B:15:0x0013\-\>B:18:0x002a\lPHI: r1 \l  PHI: (r1v2 int) = (r1v1 int), (r1v3 int) binds: [B:14:0x0011, B:18:0x002a] A[DONT_GENERATE, DONT_INLINE]\l|r3 = r1\lint r1 = r1 + (\-1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|if (r6.invoke(java.lang.Character.valueOf(r5.charAt(r3))).booleanValue() == false) goto L5\l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|LOOP_END\lLOOP:0: B:15:0x0013\-\>B:18:0x002a\l|if (r1 \>= 0) goto L3\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0029|RETURN\l|return r3\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt___StringsKt.indexOfLast((r5v0 '$this$indexOfLast' java.lang.CharSequence A[D('$this$indexOfLast' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'predicate' kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x002a \-\> B:15:0x0013, CROSS_EDGE: B:19:0x002c \-\> B:12:?, CROSS_EDGE: B:14:0x0011 \-\> B:19:0x002c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_15;
Node_18 -> Node_21[style=dashed];
Node_21 -> Node_19;
Node_20 -> Node_17;
Node_17 -> Node_12;
Node_19 -> Node_12;
}

