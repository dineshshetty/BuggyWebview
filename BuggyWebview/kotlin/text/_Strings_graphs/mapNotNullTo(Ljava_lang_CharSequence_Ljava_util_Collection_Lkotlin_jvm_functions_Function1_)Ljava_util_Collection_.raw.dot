digraph "CFG forkotlin.text.StringsKt___StringsKt.mapNotNullTo(Ljava\/lang\/CharSequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Collection;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$mapNotNullTo' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r10 I:java.lang.Object A[D('destination' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x000c: INVOKE  (r11 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$mapNotNullTo' java.lang.CharSequence)])  (LINE:1032)\l0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2604)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|LOOP_START\lLOOP:0: B:17:0x0013\-\>B:22:0x002d\l|0x0013: INVOKE  (r4 I:int) = (r1 I:java.lang.CharSequence A[D('$this$forEach$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|0x0017: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:25:0x0031 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0019|0x0019: INVOKE  (r4 I:char) = (r1 I:java.lang.CharSequence A[D('$this$forEach$iv' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x001d: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' char)]) \l0x001e: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: INVOKE  (r7 I:java.lang.Character) = (r5 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:1032)\l0x0023: INVOKE  (r7 I:java.lang.Object) = (r11 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)]), (r7 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|0x0027: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|0x0029: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2490)\l0x002a: INVOKE  \l  (r10 I:java.util.Collection A[D('destination' java.util.Collection)])\l  (r7 I:java.lang.Object A[D('it' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:1032)\l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002d|LOOP_END\lLOOP:0: B:17:0x0013\-\>B:22:0x002d\l|0x002d: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x002d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0031|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0031|RETURN\l|0x0031: RETURN  (r10 I:C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection)])  (LINE:1033)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super R\> kotlin.text.StringsKt___StringsKt.mapNotNullTo((r9 I:java.lang.CharSequence A[D('$this$mapNotNullTo' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x002d \-\> B:17:0x0013, CROSS_EDGE: B:20:0x0027 \-\> B:22:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x002d: r5 'element' C\l  0x001f\-0x002d: r6 '$i$a$\-forEach\-StringsKt___StringsKt$mapNotNullTo$1' I\l  0x0029\-0x002d: r7 'it' Ljava\/lang\/Object;\l  0x002a\-0x002d: r8 '$i$a$\-let\-StringsKt___StringsKt$mapNotNullTo$1$1' I\l  0x001d\-0x0030: r4 'element$iv' C\l  0x0011\-0x0031: r1 '$this$forEach$iv' Ljava\/lang\/CharSequence;\l  0x0012\-0x0031: r2 '$i$f$forEach' I\l  0x0010\-0x0031: r0 '$i$f$mapNotNullTo' I\l  \-1 \-0x0031: r9 '$this$mapNotNullTo' Ljava\/lang\/CharSequence;\l  \-1 \-0x0031: r10 'destination' Ljava\/util\/Collection;\l  \-1 \-0x0031: r11 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, C extends java.util.Collection\<? super R\>]\lSIGNATURE: \<R:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TR;\>;\>(Ljava\/lang\/CharSequence;TC;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+TR;\>;)TC;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_24;
Node_24 -> Node_15;
}

