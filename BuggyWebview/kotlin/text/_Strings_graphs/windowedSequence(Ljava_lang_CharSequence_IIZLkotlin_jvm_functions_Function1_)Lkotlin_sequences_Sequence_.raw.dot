digraph "CFG forkotlin.text.StringsKt___StringsKt.windowedSequence(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$windowedSequence' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r4 I:int A[D('size' int)]), (r5 I:int A[D('step' int)]) type: STATIC call: kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void A[MD:(int, int):void (m)] (LINE:2400)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|0x000d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('partialWindows' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0014  (LINE:2401)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|0x000f: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r3 I:java.lang.CharSequence A[D('$this$windowedSequence' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getIndices(java.lang.CharSequence):kotlin.ranges.IntRange A[MD:(java.lang.CharSequence):kotlin.ranges.IntRange (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: CHECK_CAST (r0 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r0 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r0 I:kotlin.ranges.IntProgression) = (r0 I:kotlin.ranges.IntProgression), (r5 I:int A[D('step' int)]) type: STATIC call: kotlin.ranges.RangesKt.step(kotlin.ranges.IntProgression, int):kotlin.ranges.IntProgression A[MD:(kotlin.ranges.IntProgression, int):kotlin.ranges.IntProgression (m)]\l0x0026: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('windows' kotlin.ranges.IntProgression)])  (LINE:2402)\l0x0027: CHECK_CAST (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r1 I:kotlin.sequences.Sequence) = (r1 I:java.lang.Iterable) type: STATIC call: kotlin.collections.CollectionsKt.asSequence(java.lang.Iterable):kotlin.sequences.Sequence A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):kotlin.sequences.Sequence\<T\> (m)]\l0x002d: NEW_INSTANCE  (r2 I:kotlin.text.StringsKt___StringsKt$windowedSequence$2) =  kotlin.text.StringsKt___StringsKt$windowedSequence$2 \l0x002f: INVOKE  \l  (r2 I:kotlin.text.StringsKt___StringsKt$windowedSequence$2)\l  (r4 I:int A[D('size' int)])\l  (r3 I:java.lang.CharSequence A[D('$this$windowedSequence' java.lang.CharSequence)])\l  (r7 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlin.text.StringsKt___StringsKt$windowedSequence$2.\<init\>(int, java.lang.CharSequence, kotlin.jvm.functions.Function1):void A[MD:(int, java.lang.CharSequence, kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\>):void (m)]\l0x0032: CHECK_CAST (r2 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r2 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r1 I:kotlin.sequences.Sequence) = (r1 I:kotlin.sequences.Sequence), (r2 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlin.sequences.SequencesKt.map(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T, R\>:(kotlin.sequences.Sequence\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends R\>):kotlin.sequences.Sequence\<R\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:kotlin.sequences.Sequence\<R\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence A[D('$this$windowedSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0019: ARITH  (r1 I:int) = (r1 I:int) \- (r4 I:int A[D('size' int)]) \l0x001a: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x001c: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.ranges.RangesKt.until(int, int):kotlin.ranges.IntRange A[MD:(int, int):kotlin.ranges.IntRange (m)]\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<R\> kotlin.text.StringsKt___StringsKt.windowedSequence((r3 I:java.lang.CharSequence A[D('$this$windowedSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.CharSequence, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0014 \-\> B:14:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x0038: r0 'windows' Lkotlin\/ranges\/IntProgression;\l  \-1 \-0x0038: r3 '$this$windowedSequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x0038: r4 'size' I\l  \-1 \-0x0038: r5 'step' I\l  \-1 \-0x0038: r6 'partialWindows' Z\l  \-1 \-0x0038: r7 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;IIZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/CharSequence;+TR;\>;)Lkotlin\/sequences\/Sequence\<TR;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

