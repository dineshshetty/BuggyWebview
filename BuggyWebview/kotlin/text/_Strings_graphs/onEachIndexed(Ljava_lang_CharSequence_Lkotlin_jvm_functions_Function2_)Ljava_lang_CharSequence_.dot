digraph "CFG forkotlin.text.StringsKt___StringsKt.onEachIndexed(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/CharSequence;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"action\")\lr5 = 0\lr6 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|LOOP_START\lLOOP:0: B:12:0x0011\-\>B:14:0x0017\lPHI: r5 r6 \l  PHI: (r5v1 'index$iv' int) = (r5v0 'index$iv' int), (r5v3 'index$iv' int) binds: [B:11:0x0000, B:14:0x0017] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:11:0x0000, B:14:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|if (r6 \>= r10.length()) goto L5\l}"];
Node_14 [shape=record,label="{14\:\ 0x0017|LOOP_END\lLOOP:0: B:12:0x0011\-\>B:14:0x0017\l|char r7 = r10.charAt(r6)\lint r8 = r5 + 1\lr11.invoke(java.lang.Integer.valueOf(r5), java.lang.Character.valueOf(r7))\lint r6 = r6 + 1\lr5 = r8\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|RETURN\l|return r10\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final S extends java.lang.CharSequence kotlin.text.StringsKt___StringsKt.onEachIndexed((r10v0 S extends java.lang.CharSequence A[D('$this$onEachIndexed' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'action' kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Character, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0017 \-\> B:12:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends java.lang.CharSequence]\lSIGNATURE: \<S::Ljava\/lang\/CharSequence;\>(TS;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-Ljava\/lang\/Character;Lkotlin\/Unit;\>;)TS;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_16;
Node_16 -> Node_10;
}

