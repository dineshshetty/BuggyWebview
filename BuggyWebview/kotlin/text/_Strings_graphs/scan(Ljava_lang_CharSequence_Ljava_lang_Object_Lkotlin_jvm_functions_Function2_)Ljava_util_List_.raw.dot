digraph "CFG forkotlin.text.StringsKt___StringsKt.scan(Ljava\/lang\/CharSequence;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$scan' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r10 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$scan' java.lang.CharSequence)])  (LINE:2073)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r3 I:int) = (r1 I:java.lang.CharSequence A[D('$this$runningFold$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:2609)\l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0017 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001f \l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|0x001a: INVOKE  (r3 I:java.util.List) = (r9 I:java.lang.Object A[D('initial' java.lang.Object)]) type: STATIC call: kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List A[MD:\<T\>:(T):java.util.List\<T\> (m)]\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN  (r3 I:java.util.List\<R\> A[D('result$iv' java.util.ArrayList)]) A[SYNTHETIC] (LINE:2073)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|0x001f: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2610)\l0x0021: INVOKE  (r6 I:int) = (r1 I:java.lang.CharSequence A[D('$this$runningFold$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0025: ARITH  (r6 I:int) = (r6 I:int) + (r5 I:int) \l0x0026: INVOKE  (r3 I:java.util.ArrayList), (r6 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0029: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x002a: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2611)\l0x002b: INVOKE  \l  (r5 I:java.util.ArrayList A[D('$this$runningFold_u24lambda_u2d17$iv' java.util.ArrayList)])\l  (r9 I:java.lang.Object A[D('initial' java.lang.Object)])\l type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:2610)\l0x002e: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('$this$runningFold_u24lambda_u2d17$iv' java.util.ArrayList)]) = (r9 I:??[OBJECT, ARRAY] A[D('initial' java.lang.Object)])  (LINE:2612)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0030|LOOP_START\lLOOP:0: B:25:0x0030\-\>B:27:0x0036\l|0x0030: INVOKE  (r6 I:int) = (r1 I:java.lang.CharSequence A[D('$this$runningFold$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0034|0x0034: IF  (r4 I:??[int, byte, short, char]) \>= (r6 I:??[int, byte, short, char])  \-\> B:30:0x0048 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0036|LOOP_END\lLOOP:0: B:25:0x0030\-\>B:27:0x0036\l|0x0036: INVOKE  (r6 I:char) = (r1 I:java.lang.CharSequence A[D('$this$runningFold$iv' java.lang.CharSequence)]), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x003a: INVOKE  (r7 I:java.lang.Character) = (r6 I:char A[D('element$iv' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:2614)\l0x003e: INVOKE  (r5 I:java.lang.Object A[D('accumulator$iv' java.lang.Object)]) = \l  (r10 I:kotlin.jvm.functions.Function2 A[D('operation' kotlin.jvm.functions.Function2)])\l  (r5 I:java.lang.Object A[D('accumulator$iv' java.lang.Object)])\l  (r7 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0042: INVOKE  \l  (r3 I:java.util.ArrayList A[D('result$iv' java.util.ArrayList)])\l  (r5 I:java.lang.Object A[D('accumulator$iv' java.lang.Object)])\l type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:2615)\l0x0045: ARITH  (r4 I:int) = (r4 I:int) + (1 int)  (LINE:2613)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0048|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0048|0x0048: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result$iv' java.util.ArrayList)])  (LINE:2617)\l0x0049: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l0x004b: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('result$iv' java.util.ArrayList)]) = (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004c|RETURN\lORIG_RETURN\l|0x004c: RETURN  (r3 I:java.util.List\<R\> A[D('result$iv' java.util.ArrayList)])  (LINE:2073)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|0x0017: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.text.StringsKt___StringsKt.scan((r8 I:java.lang.CharSequence A[D('$this$scan' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:R A[D('initial' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function2\<? super R, ? super java.lang.Character, ? extends R\> A[D('operation' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0036 \-\> B:25:0x0030, CROSS_EDGE: B:28:0x0048 \-\> B:29:0x004c, CROSS_EDGE: B:21:0x0017 \-\> B:22:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002a\-0x002e: r5 '$this$runningFold_u24lambda_u2d17$iv' Ljava\/util\/ArrayList;\l  0x002b\-0x002e: r6 '$i$a$\-apply\-StringsKt___StringsKt$runningFold$result$1$iv' I\l  0x003a\-0x0048: r6 'element$iv' C\l  0x000c\-0x004c: r1 '$this$runningFold$iv' Ljava\/lang\/CharSequence;\l  0x000d\-0x004c: r2 '$i$f$runningFold' I\l  0x002e\-0x004c: r3 'result$iv' Ljava\/util\/ArrayList;\l  0x002f\-0x004c: r5 'accumulator$iv' Ljava\/lang\/Object;\l  0x000b\-0x004c: r0 '$i$f$scan' I\l  \-1 \-0x004c: r8 '$this$scan' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r9 'initial' Ljava\/lang\/Object;\l  \-1 \-0x004c: r10 'operation' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/CharSequence;TR;Lkotlin\/jvm\/functions\/Function2\<\-TR;\-Ljava\/lang\/Character;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_31;
Node_31 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_25;
Node_30 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_21 -> Node_22;
}

