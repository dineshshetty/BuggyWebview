digraph "CFG forkotlin.text.StringsKt___StringsKt.onEach(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$onEach' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$onEach' java.lang.CharSequence)])  (LINE:1771)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2490)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1771)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|LOOP_START\lLOOP:0: B:11:0x000e\-\>B:13:0x0014\l|0x000e: INVOKE  (r4 I:int) = (r1 I:java.lang.CharSequence A[D('$this$onEach_u24lambda_u2d15' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0012|0x0012: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:15:0x0022 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|LOOP_END\lLOOP:0: B:11:0x000e\-\>B:13:0x0014\l|0x0014: INVOKE  (r4 I:char) = (r1 I:java.lang.CharSequence A[D('$this$onEach_u24lambda_u2d15' java.lang.CharSequence)]), (r3 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0018: INVOKE  (r5 I:java.lang.Character) = (r4 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x001c: INVOKE  (r7 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|RETURN\l|0x0022: RETURN  (r6 I:S extends java.lang.CharSequence A[D('$this$onEach' java.lang.CharSequence)]) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final S extends java.lang.CharSequence kotlin.text.StringsKt___StringsKt.onEach((r6 I:S extends java.lang.CharSequence A[D('$this$onEach' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0014 \-\> B:11:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0022: r1 '$this$onEach_u24lambda_u2d15' Ljava\/lang\/CharSequence;\l  0x000d\-0x0022: r2 '$i$a$\-apply\-StringsKt___StringsKt$onEach$1' I\l  0x0018\-0x0022: r4 'element' C\l  0x000b\-0x0022: r0 '$i$f$onEach' I\l  \-1 \-0x0022: r6 '$this$onEach' Ljava\/lang\/CharSequence;\l  \-1 \-0x0022: r7 'action' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [S extends java.lang.CharSequence]\lSIGNATURE: \<S::Ljava\/lang\/CharSequence;\>(TS;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Lkotlin\/Unit;\>;)TS;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

