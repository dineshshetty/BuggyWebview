digraph "CFG forkotlin.text.StringsKt___StringsKt.minWithOrThrow(Ljava\/lang\/CharSequence;Ljava\/util\/Comparator;)C" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$minWith' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparator\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('comparator' java.util.Comparator)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r6 I:java.lang.CharSequence A[D('$this$minWith' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1724)\l0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0014 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0047 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|0x0017: INVOKE  (r0 I:char) = (r6 I:java.lang.CharSequence A[D('$this$minWith' java.lang.CharSequence)]), (r2 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1725)\l0x001b: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:1726)\l0x001d: INVOKE  (r3 I:int) = (r6 I:java.lang.CharSequence A[D('$this$minWith' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x0021: INVOKE  (r2 I:kotlin.ranges.IntRange), (r1 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0024: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r2 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|LOOP_START\lLOOP:0: B:29:0x0028\-\>B:39:0x0028\l|0x0028: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|0x002c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0046 \l}"];
Node_31 [shape=record,label="{31\:\ 0x002e|0x002e: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0032: INVOKE  (r3 I:char) = (r6 I:java.lang.CharSequence A[D('$this$minWith' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1727)\l0x0036: INVOKE  (r4 I:java.lang.Character) = (r0 I:char A[D('min' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:1728)\l0x003a: INVOKE  (r5 I:java.lang.Character) = (r3 I:char A[D('e' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x003e: INVOKE  (r4 I:int) = (r7 I:java.util.Comparator A[D('comparator' java.util.Comparator)]), (r4 I:java.lang.Object), (r5 I:java.lang.Object) type: INTERFACE call: java.util.Comparator.compare(java.lang.Object, java.lang.Object):int A[MD:(T, T):int (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0042|0x0042: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:40:0x0028 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0044|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0044|0x0044: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('min' char)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('e' char)]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0028|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|LOOP_END\lSYNTHETIC\lLOOP:0: B:29:0x0028\-\>B:39:0x0028\l}"];
Node_40 [shape=record,label="{40\:\ 0x0028|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0046|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0046|RETURN\l|0x0046: RETURN  (r0 I:char A[D('min' char)])  (LINE:1730)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0047|0x0047: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('min' char)]) =  java.util.NoSuchElementException  (LINE:1724)\l0x0049: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x004c|0x004c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.StringsKt___StringsKt.minWithOrThrow((r6 I:java.lang.CharSequence A[D('$this$minWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.Comparator\<? super java.lang.Character\> A[D('comparator' java.util.Comparator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0042 \-\> B:29:0x0028, BACK_EDGE: B:33:0x0044 \-\> B:29:0x0028, CROSS_EDGE: B:36:0x004c \-\> B:22:?, CROSS_EDGE: B:26:0x0014 \-\> B:27:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x0045: r2 'i' I\l  0x0036\-0x0045: r3 'e' C\l  0x001b\-0x0047: r0 'min' C\l  \-1 \-0x004c: r6 '$this$minWith' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r7 'comparator' Ljava\/util\/Comparator;\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/util\/Comparator\<\-Ljava\/lang\/Character;\>;)C\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_37[style=dashed];
Node_32 -> Node_40;
Node_37 -> Node_33;
Node_33 -> Node_41;
Node_41 -> Node_39;
Node_39 -> Node_29;
Node_40 -> Node_39;
Node_38 -> Node_34;
Node_34 -> Node_22;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_26 -> Node_27;
}

