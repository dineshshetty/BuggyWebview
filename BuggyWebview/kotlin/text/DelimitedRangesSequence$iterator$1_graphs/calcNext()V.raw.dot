digraph "CFG forkotlin.text.DelimitedRangesSequence$iterator$1.calcNext()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int  (LINE:1186)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IPUT  (r1 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int  (LINE:1187)\l0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1188)\l0x0008: IPUT  (r0 I:kotlin.ranges.IntRange), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x009f: RETURN   A[SYNTHETIC] (LINE:1207)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r0 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence  (LINE:1190)\l0x000e: INVOKE  (r0 I:int) = (r0 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getLimit$p(kotlin.text.DelimitedRangesSequence):int A[MD:(kotlin.text.DelimitedRangesSequence):int (m)]\l0x0012: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0013: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.counter int \l0x0018: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int) \l0x0019: IPUT  (r0 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.counter int \l0x001b: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x001d: INVOKE  (r4 I:int) = (r4 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getLimit$p(kotlin.text.DelimitedRangesSequence):int A[MD:(kotlin.text.DelimitedRangesSequence):int (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r0 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:11:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0031|0x0031: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:1191)\l0x0033: IGET  (r1 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x0035: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0037: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence A[MD:(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence (m)]\l0x003b: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x003f: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r4 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0042: IPUT  (r0 I:kotlin.ranges.IntRange), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0044: IPUT  (r2 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int  (LINE:1192)\l}"];
Node_19 [shape=record,label="{19\:\ 0x009d|0x009d: IPUT  (r3 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int  (LINE:1205)\l}"];
Node_20 [shape=record,label="{20\:\ 0x009f|RETURN\lORIG_RETURN\l|0x009f: RETURN    (LINE:1207)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IGET  (r0 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l0x0025: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0027: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence A[MD:(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence (m)]\l0x002b: INVOKE  (r4 I:int) = (r4 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|0x002f: IF  (r0 I:??[int, byte, short, char]) \<= (r4 I:??[int, byte, short, char])  \-\> B:12:0x0047 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|0x0047: IGET  (r0 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence  (LINE:1194)\l0x0049: INVOKE  (r0 I:kotlin.jvm.functions.Function2) = (r0 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence):kotlin.jvm.functions.Function2 A[MD:(kotlin.text.DelimitedRangesSequence):kotlin.jvm.functions.Function2 (m)]\l0x004d: IGET  (r4 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x004f: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence A[MD:(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence (m)]\l0x0053: IGET  (r5 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l0x0055: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0059: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function2), (r4 I:java.lang.Object), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x005d: CHECK_CAST (r0 I:kotlin.Pair) = (kotlin.Pair) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x005f|0x005f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' kotlin.Pair)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0077  (LINE:1195)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0061|0x0061: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:1196)\l0x0063: IGET  (r4 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l0x0065: IGET  (r5 I:kotlin.text.DelimitedRangesSequence) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.this$0 kotlin.text.DelimitedRangesSequence \l0x0067: INVOKE  (r5 I:java.lang.CharSequence) = (r5 I:kotlin.text.DelimitedRangesSequence) type: STATIC call: kotlin.text.DelimitedRangesSequence.access$getInput$p(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence A[MD:(kotlin.text.DelimitedRangesSequence):java.lang.CharSequence (m)]\l0x006b: INVOKE  (r5 I:int) = (r5 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x006f: INVOKE  (r1 I:kotlin.ranges.IntRange), (r4 I:int), (r5 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0072: IPUT  (r1 I:kotlin.ranges.IntRange), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0074: IPUT  (r2 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int  (LINE:1197)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0077|0x0077: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlin.Pair A[D('match' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.component1():java.lang.Object A[MD:():A (m)] (LINE:1199)\l0x007b: CHECK_CAST (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:??[OBJECT, ARRAY]) \l0x007d: INVOKE  (r2 I:int) = (r2 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x0081: INVOKE  (r4 I:java.lang.Object) = (r0 I:kotlin.Pair A[D('match' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.component2():java.lang.Object A[MD:():B (m)]\l0x0085: CHECK_CAST (r4 I:java.lang.Number) = (java.lang.Number) (r4 I:??[OBJECT, ARRAY]) \l0x0087: INVOKE  (r4 I:int) = (r4 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x008b: IGET  (r5 I:int) = (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int  (LINE:1200)\l0x008d: INVOKE  (r5 I:kotlin.ranges.IntRange) = (r5 I:int), (r2 I:int A[D('index' int)]) type: STATIC call: kotlin.ranges.RangesKt.until(int, int):kotlin.ranges.IntRange A[MD:(int, int):kotlin.ranges.IntRange (m)]\l0x0091: IPUT  (r5 I:kotlin.ranges.IntRange), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0093: ARITH  (r5 I:int) = (r2 I:int A[D('index' int)]) + (r4 I:int A[D('length' int)])  (LINE:1201)\l0x0095: IPUT  (r5 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.currentStartIndex int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0097|0x0097: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x009a  (LINE:1202)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0099|0x0099: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x009a|0x009a: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x009b: IPUT  (r5 I:int), (r6 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextSearchIndex int \l}"];
MethodNode[shape=record,label="{private final void kotlin.text.DelimitedRangesSequence$iterator$1.calcNext((r6 'this' I:kotlin.text.DelimitedRangesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x009d \-\> B:20:0x009f, CROSS_EDGE: B:14:0x0061 \-\> B:19:0x009d, CROSS_EDGE: B:18:0x009a \-\> B:19:0x009d, CROSS_EDGE: B:16:0x0097 \-\> B:18:0x009a, CROSS_EDGE: B:8:0x0021 \-\> B:11:0x0031, CROSS_EDGE: B:6:0x0014 \-\> B:9:0x0023\lDebug Info:\l  0x005f\-0x009d: r0 'match' Lkotlin\/Pair;\l  0x0081\-0x009d: r2 'index' I\l  0x008b\-0x009d: r4 'length' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_21;
Node_21 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_11 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
}

