digraph "CFG forkotlin.text.DelimitedRangesSequence$iterator$1.next()Lkotlin\/ranges\/IntRange;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r3.nextState != (\-1)) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|calcNext()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008}"];
Node_6 [shape=record,label="{6\:\ 0x000a|if (r3.nextState == 0) goto L9\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|kotlin.ranges.IntRange r0 = r3.nextItem\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0, \"null cannot be cast to non\-null type kotlin.ranges.IntRange\")\lr3.nextItem = null\lr3.nextState = \-1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019}"];
Node_10 [shape=record,label="{10\:\ 0x001e|throw new java.util.NoSuchElementException()\l}"];
MethodNode[shape=record,label="{public kotlin.ranges.IntRange kotlin.text.DelimitedRangesSequence$iterator$1.next((r3v0 'this' kotlin.text.DelimitedRangesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x001e \-\> B:1:?, CROSS_EDGE: B:3:0x0003 \-\> B:5:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lRENAME_REASON:avoid collision after fix types in other method\lBRIDGED_BY: kotlin.text.DelimitedRangesSequence$iterator$1.next():kotlin.ranges.IntRange\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

