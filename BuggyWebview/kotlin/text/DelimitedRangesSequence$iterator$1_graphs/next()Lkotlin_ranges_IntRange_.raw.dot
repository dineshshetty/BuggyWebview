digraph "CFG forkotlin.text.DelimitedRangesSequence$iterator$1.next()Lkotlin\/ranges\/IntRange;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int  (LINE:1210)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) type: DIRECT call: kotlin.text.DelimitedRangesSequence$iterator$1.calcNext():void A[MD:():void (m)] (LINE:1211)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int  (LINE:1212)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IGET  (r0 I:kotlin.ranges.IntRange) = (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange  (LINE:1214)\l0x000e: CONST_STR  (r2 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.ranges.IntRange\" \l0x0010: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1216)\l0x0014: IPUT  (r2 I:kotlin.ranges.IntRange), (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextItem kotlin.ranges.IntRange \l0x0016: IPUT  (r1 I:int), (r3 I:kotlin.text.DelimitedRangesSequence$iterator$1) kotlin.text.DelimitedRangesSequence$iterator$1.nextState int  (LINE:1217)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:kotlin.ranges.IntRange A[D('result' kotlin.ranges.IntRange)])  (LINE:1218)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('result' kotlin.ranges.IntRange)]) =  java.util.NoSuchElementException  (LINE:1213)\l0x001b: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public kotlin.ranges.IntRange kotlin.text.DelimitedRangesSequence$iterator$1.next((r3 'this' I:kotlin.text.DelimitedRangesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\lCROSS_EDGE: B:10:0x001e \-\> B:1:?, CROSS_EDGE: B:3:0x0003 \-\> B:5:0x0008\lDebug Info:\l  0x0013\-0x0019: r0 'result' Lkotlin\/ranges\/IntRange;\lBRIDGED_BY: kotlin.text.DelimitedRangesSequence$iterator$1.next():kotlin.ranges.IntRange\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

