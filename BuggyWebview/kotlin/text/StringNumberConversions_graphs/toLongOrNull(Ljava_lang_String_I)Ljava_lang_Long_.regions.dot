digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Long;" {
subgraph cluster_Region_796708634 {
label = "R(2:1|(2:(1:3)|(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45)))))(1:47)|13|(2:15|(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))))|38))) | DECL_VAR: int start, boolean isNegative, long limit, char firstChar, long limitForMaxRadix\l";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r20, \"\<this\>\")\lkotlin.text.CharsKt.checkRadix(r21)\lint int r2 = r20.length()\l}"];
subgraph cluster_Region_1843627825 {
label = "R(2:(1:3)|(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45)))))(1:47)|13|(2:15|(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))))|38))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1637775258 {
label = "IF [B:55:0x0011] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_55 [shape=record,label="{55\:\ 0x0011|if (r2 == 0) goto L3\l}"];
subgraph cluster_Region_1242049743 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0013|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1678913078 {
label = "R(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45)))))(1:47)|13|(2:15|(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))))|38)";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x0014|char char r8 = r20.charAt(0)\l}"];
subgraph cluster_IfRegion_1150677582 {
label = "IF [B:58:0x0023] THEN: R(1:(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45))))) ELSE: R(1:47)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0023|if (kotlin.jvm.internal.Intrinsics.compare((int) r8, 48) \< 0) goto L7\l}"];
subgraph cluster_Region_597272501 {
label = "R(1:(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1196915626 {
label = "R(2:(1:9)|(2:10|(1:12)(1:(1:46)(1:45))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_724776669 {
label = "IF [B:60:0x0026] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0026|if (r2 == 1) goto L9\l}"];
subgraph cluster_Region_914138750 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x0028|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_791941644 {
label = "R(2:10|(1:12)(1:(1:46)(1:45)))";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x0029|r4 = 1\l}"];
subgraph cluster_IfRegion_278548900 {
label = "IF [B:63:0x002c] THEN: R(1:12) ELSE: R(1:(1:46)(1:45))";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x002c|if (r8 == '\-') goto L12\l}"];
subgraph cluster_Region_545214983 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x002e|r5 = true\lr6 = Long.MIN_VALUE\l}"];
}
subgraph cluster_Region_1025083946 {
label = "R(1:(1:46)(1:45)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1703722527 {
label = "IF [B:66:0x0034] THEN: R(1:46) ELSE: R(1:45) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0034|if (r8 != '+') goto L46\l}"];
subgraph cluster_Region_1406350899 {
label = "R(1:46)";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x003d|RETURN\l|return null\l}"];
}
subgraph cluster_Region_659811121 {
label = "R(1:45)";
node [shape=record,color=blue];
Node_67 [shape=record,label="{67\:\ 0x0036|r5 = false\lr6 = \-9223372036854775807L\l}"];
}
}
}
}
}
}
}
subgraph cluster_Region_801648044 {
label = "R(1:47)";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x003e|r4 = 0\lr5 = false\lr6 = \-9223372036854775807L\l}"];
}
}
Node_70 [shape=record,label="{70\:\ 0x0045|PHI: r4 r5 r6 \l  PHI: (r4v2 'start' int) = (r4v1 'start' int), (r4v3 'start' int), (r4v3 'start' int) binds: [B:69:0x003e, B:67:0x0036, B:64:0x002e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 'isNegative' boolean) = (r5v1 'isNegative' boolean), (r5v3 'isNegative' boolean), (r5v4 'isNegative' boolean) binds: [B:69:0x003e, B:67:0x0036, B:64:0x002e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'limit' long) = (r6v1 'limit' long), (r6v3 'limit' long), (r6v4 'limit' long) binds: [B:69:0x003e, B:67:0x0036, B:64:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|long r9 = \-256204778801521550L\llong r11 = \-256204778801521550L\llong r13 = 0\lint r15 = r4\l}"];
subgraph cluster_LoopRegion_761208984 {
label = "LOOP:0: (2:15|(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))))";
node [shape=record,color=blue];
Node_71 [shape=record,label="{71\:\ 0x004e|LOOP_START\lLOOP:0: B:71:0x004e\-\>B:92:0x0086\lPHI: r8 r9 r11 r13 r15 \l  PHI: (r8v2 'firstChar' char) = (r8v1 'firstChar' char), (r8v9 'firstChar' char) binds: [B:70:0x0045, B:92:0x0086] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v3 'limitForMaxRadix' long) = (r9v2 'limitForMaxRadix' long), (r9v5 'limitForMaxRadix' long) binds: [B:70:0x0045, B:92:0x0086] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'limitBeforeMul' long) = (r11v0 'limitBeforeMul' long), (r11v2 'limitBeforeMul' long) binds: [B:70:0x0045, B:92:0x0086] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 'result' long) = (r13v0 'result' long), (r13v3 'result' long) binds: [B:70:0x0045, B:92:0x0086] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r15v1 'i' int) = (r15v0 'i' int), (r15v2 'i' int) binds: [B:70:0x0045, B:92:0x0086] A[DONT_GENERATE, DONT_INLINE]\l|if (r15 \< r2) goto L15\l}"];
subgraph cluster_Region_1923075642 {
label = "R(2:15|(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))))";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0050|int int r3 = kotlin.text.CharsKt.digitOf(r20.charAt(r15), r21)\l}"];
subgraph cluster_Region_799378888 {
label = "R(2:(1:35)|(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1671593161 {
label = "IF [B:73:0x0058] THEN: R(1:35) ELSE: null";
node [shape=record,color=blue];
Node_73 [shape=record,label="{73\:\ 0x0058|if (r3 \< 0) goto L34\l}"];
subgraph cluster_Region_2092536084 {
label = "R(1:35)";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x005a|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1219541764 {
label = "R(3:(1:33)(1:(2:21|(2:(1:30)|(1:23)))(1:32))|24|(2:(1:28)|(1:26)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2041385008 {
label = "IF [B:77:0x005f] THEN: R(1:33) ELSE: R(1:(2:21|(2:(1:30)|(1:23)))(1:32))";
node [shape=record,color=blue];
Node_77 [shape=record,label="{77\:\ 0x005f|if (r13 \>= r11) goto L33\l}"];
subgraph cluster_Region_116507608 {
label = "R(1:33)";
node [shape=record,color=blue];
Node_87 [shape=record,label="{87\:\ 0x0077|r17 = r8\lr18 = r9\l}"];
}
subgraph cluster_Region_226495603 {
label = "R(1:(2:21|(2:(1:30)|(1:23)))(1:32)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1320464105 {
label = "IF [B:79:0x0063] THEN: R(2:21|(2:(1:30)|(1:23))) ELSE: R(1:32) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_79 [shape=record,label="{79\:\ 0x0063|if (r11 == r9) goto L21\l}"];
subgraph cluster_Region_1839023818 {
label = "R(2:21|(2:(1:30)|(1:23)))";
node [shape=record,color=blue];
Node_80 [shape=record,label="{80\:\ 0x0065|r17 = r8\lr18 = r9\llong long r8 = r6 \/ r21\l}"];
subgraph cluster_Region_1202241886 {
label = "R(2:(1:30)|(1:23))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_588814952 {
label = "IF [B:81:0x006e] THEN: R(1:30) ELSE: null";
node [shape=record,color=blue];
Node_81 [shape=record,label="{81\:\ 0x006e|if (r13 \< r8) goto L29\l}"];
subgraph cluster_Region_1147195310 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0070|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1092575553 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_84 [shape=record,label="{84\:\ 0x0072|r11 = r8\l}"];
}
}
}
subgraph cluster_Region_1960953607 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_85 [shape=record,label="{85\:\ 0x0075|RETURN\l|return null\l}"];
}
}
}
}
Node_88 [shape=record,label="{88\:\ 0x007b|PHI: r11 r17 r18 \l  PHI: (r11v2 'limitBeforeMul' long) = (r11v1 'limitBeforeMul' long), (r11v3 'limitBeforeMul' long) binds: [B:87:0x0077, B:84:0x0072] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r17v3 'firstChar' char) = (r17v2 'firstChar' char), (r17v5 'firstChar' char) binds: [B:87:0x0077, B:84:0x0072] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r18v2 'limitForMaxRadix' long) = (r18v1 'limitForMaxRadix' long), (r18v3 'limitForMaxRadix' long) binds: [B:87:0x0077, B:84:0x0072] A[DONT_GENERATE, DONT_INLINE]\l|long long r13 = r13 * r21\l}"];
subgraph cluster_Region_2031070844 {
label = "R(2:(1:28)|(1:26))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_76439823 {
label = "IF [B:89:0x0082] THEN: R(1:28) ELSE: null";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0082|if (r13 \< (r3 + r6)) goto L27\l}"];
subgraph cluster_Region_2024546866 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x0084|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1981986697 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_92 [shape=record,label="{92\:\ 0x0086|LOOP_END\lLOOP:0: B:71:0x004e\-\>B:92:0x0086\l|long r13 = r13 \- r3\lr15++\lr8 = r17\lr9 = r18\l}"];
}
}
}
}
}
}
Node_94 [shape=record,label="{94\:\ 0x0095|RETURN\l|return r5 ? java.lang.Long.valueOf(r13) : java.lang.Long.valueOf(\-r13)\l}"];
}
}
}
Node_52 [shape=record,color=red,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_53 [shape=record,color=red,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0025}"];
Node_76 [shape=record,color=red,label="{76\:\ 0x005d}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x0061}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x0084|SYNTHETIC\l}"];
Node_101 [shape=record,color=red,label="{101\:\ 0x0070|SYNTHETIC\l}"];
Node_99 [shape=record,color=red,label="{99\:\ 0x0075|SYNTHETIC\l}"];
Node_102 [shape=record,color=red,label="{102\:\ 0x005a|SYNTHETIC\l}"];
Node_100 [shape=record,color=red,label="{100\:\ 0x0091|SYNTHETIC\l}"];
Node_93 [shape=record,color=red,label="{93\:\ 0x0091}"];
Node_95 [shape=record,color=red,label="{95\:\ 0x0097}"];
Node_103 [shape=record,color=red,label="{103\:\ ?|SYNTHETIC\l}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x009c}"];
Node_97 [shape=record,color=red,label="{97\:\ 0x00a1|ORIG_RETURN\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x0032}"];
MethodNode[shape=record,label="{public static final java.lang.Long kotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull((r20v0 '$this$toLongOrNull' java.lang.String A[D('$this$toLongOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 'radix' int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x0028 \-\> B:53:?, CROSS_EDGE: B:75:0x005c \-\> B:53:?, CROSS_EDGE: B:83:0x0071 \-\> B:53:?, CROSS_EDGE: B:91:0x0085 \-\> B:53:?, BACK_EDGE: B:92:0x0086 \-\> B:71:0x004e, CROSS_EDGE: B:86:0x0076 \-\> B:53:?, CROSS_EDGE: B:87:0x0077 \-\> B:88:0x007b, CROSS_EDGE: B:97:0x00a1 \-\> B:53:?, CROSS_EDGE: B:96:0x009c \-\> B:97:0x00a1, CROSS_EDGE: B:67:0x0036 \-\> B:70:0x0045, CROSS_EDGE: B:68:0x003d \-\> B:53:?, CROSS_EDGE: B:69:0x003e \-\> B:70:0x0045\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_52;Node_54 -> Node_55;
Node_55 -> Node_56;
Node_55 -> Node_57[style=dashed];
Node_56 -> Node_53;
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_58 -> Node_69[style=dashed];
Node_60 -> Node_61;
Node_60 -> Node_62[style=dashed];
Node_61 -> Node_53;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_63 -> Node_65[style=dashed];
Node_64 -> Node_70;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_68 -> Node_53;
Node_67 -> Node_70;
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72;
Node_71 -> Node_100[style=dashed];
Node_72 -> Node_73;
Node_73 -> Node_76[style=dashed];
Node_73 -> Node_102;
Node_74 -> Node_53;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_87;
Node_87 -> Node_88;
Node_79 -> Node_80;
Node_79 -> Node_99[style=dashed];
Node_80 -> Node_81;
Node_81 -> Node_84[style=dashed];
Node_81 -> Node_101;
Node_82 -> Node_53;
Node_84 -> Node_88;
Node_85 -> Node_53;
Node_88 -> Node_89;
Node_89 -> Node_92[style=dashed];
Node_89 -> Node_98;
Node_90 -> Node_53;
Node_92 -> Node_71;
Node_94 -> Node_95;
Node_94 -> Node_96;
Node_52 -> Node_54;
Node_59 -> Node_60;
Node_76 -> Node_77;
Node_78 -> Node_79;
Node_98 -> Node_90;
Node_101 -> Node_82;
Node_99 -> Node_85;
Node_102 -> Node_74;
Node_100 -> Node_93;
Node_93 -> Node_94;
Node_95 -> Node_103;
Node_103 -> Node_53;
Node_96 -> Node_97;
Node_97 -> Node_53;
Node_65 -> Node_66;
}

