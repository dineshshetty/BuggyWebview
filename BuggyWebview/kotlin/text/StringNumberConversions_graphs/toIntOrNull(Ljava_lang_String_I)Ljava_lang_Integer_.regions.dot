digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Integer;" {
subgraph cluster_Region_72768128 {
label = "R(2:1|(2:(1:3)|(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40)))))(1:42)|13|(2:15|(2:(1:31)|(1:(2:(1:29)|(1:27)))))|33))) | DECL_VAR: int start, boolean isNegative, int limit, int result\l";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"\<this\>\")\lkotlin.text.CharsKt.checkRadix(r13)\lint int r0 = r12.length()\l}"];
subgraph cluster_Region_430880320 {
label = "R(2:(1:3)|(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40)))))(1:42)|13|(2:15|(2:(1:31)|(1:(2:(1:29)|(1:27)))))|33))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_160256021 {
label = "IF [B:46:0x000d] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x000d|if (r0 == 0) goto L3\l}"];
subgraph cluster_Region_1944160518 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x000f|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_201868369 {
label = "R(5:5|(1:(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40)))))(1:42)|13|(2:15|(2:(1:31)|(1:(2:(1:29)|(1:27)))))|33)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0010|char char r5 = r12.charAt(0)\l}"];
subgraph cluster_IfRegion_1877389373 {
label = "IF [B:49:0x001e] THEN: R(1:(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40))))) ELSE: R(1:42)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x001e|if (kotlin.jvm.internal.Intrinsics.compare((int) r5, 48) \< 0) goto L7\l}"];
subgraph cluster_Region_1551191256 {
label = "R(1:(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40)))))";
node [shape=record,color=blue];
subgraph cluster_Region_943894465 {
label = "R(2:(1:9)|(2:10|(1:12)(1:(1:41)(1:40))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_639385918 {
label = "IF [B:51:0x0021] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x0021|if (r0 == 1) goto L9\l}"];
subgraph cluster_Region_1420952127 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x0023|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1632781611 {
label = "R(2:10|(1:12)(1:(1:41)(1:40)))";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x0024|r2 = 1\l}"];
subgraph cluster_IfRegion_733415758 {
label = "IF [B:54:0x0027] THEN: R(1:12) ELSE: R(1:(1:41)(1:40))";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x0027|if (r5 == '\-') goto L12\l}"];
subgraph cluster_Region_1530301715 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_55 [shape=record,label="{55\:\ 0x0029|r3 = true\lr4 = Integer.MIN_VALUE\l}"];
}
subgraph cluster_Region_736364566 {
label = "R(1:(1:41)(1:40)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1972081951 {
label = "IF [B:57:0x002f] THEN: R(1:41) ELSE: R(1:40) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x002f|if (r5 != '+') goto L41\l}"];
subgraph cluster_Region_1568772670 {
label = "R(1:41)";
node [shape=record,color=blue];
Node_59 [shape=record,label="{59\:\ 0x0036|RETURN\l|return null\l}"];
}
subgraph cluster_Region_1924975926 {
label = "R(1:40)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0031|r3 = false\lr4 = \-2147483647\l}"];
}
}
}
}
}
}
}
subgraph cluster_Region_1005546803 {
label = "R(1:42)";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0037|r2 = 0\lr3 = false\lr4 = \-2147483647\l}"];
}
}
Node_61 [shape=record,label="{61\:\ 0x003c|PHI: r2 r3 r4 \l  PHI: (r2v2 'start' int) = (r2v1 'start' int), (r2v3 'start' int), (r2v3 'start' int) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'isNegative' boolean) = (r3v1 'isNegative' boolean), (r3v3 'isNegative' boolean), (r3v4 'isNegative' boolean) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'limit' int) = (r4v1 'limit' int), (r4v3 'limit' int), (r4v4 'limit' int) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|int r7 = \-59652323\lint r8 = 0\lint r9 = r2\l}"];
subgraph cluster_LoopRegion_977046476 {
label = "LOOP:0: (2:15|(2:(1:31)|(1:(2:(1:29)|(1:27)))))";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x0042|LOOP_START\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\lPHI: r7 r8 r9 \l  PHI: (r7v1 'limitBeforeMul' int) = (r7v0 'limitBeforeMul' int), (r7v2 'limitBeforeMul' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 'result' int) = (r8v0 'result' int), (r8v3 'result' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'i' int) = (r9v0 'i' int), (r9v2 'i' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 \< r0) goto L15\l}"];
subgraph cluster_Region_2092512703 {
label = "R(2:15|(2:(1:31)|(1:(2:(1:29)|(1:27)))))";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x0044|int int r10 = kotlin.text.CharsKt.digitOf(r12.charAt(r9), r13)\l}"];
subgraph cluster_Region_1888486120 {
label = "R(2:(1:31)|(1:(2:(1:29)|(1:27))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_327708974 {
label = "IF [B:64:0x004c] THEN: R(1:31) ELSE: null";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x004c|if (r10 \< 0) goto L30\l}"];
subgraph cluster_Region_880235839 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x004e|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1071140639 {
label = "R(1:(2:(1:29)|(1:27)))";
node [shape=record,color=blue];
subgraph cluster_Region_1855535800 {
label = "R(2:(1:29)|(1:27))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_460383667 {
label = "IF [B:66:0x004f, B:67:0x0051, B:69:0x0055, B:73:0x005d] THEN: R(1:29) ELSE: null";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x004f|if (r8 \< r7) goto L18\l}"];
Node_67 [shape=record,label="{67\:\ 0x0051|ADDED_TO_REGION\l|if (r7 != (\-59652323)) goto L23\l}"];
Node_69 [shape=record,label="{69\:\ 0x0055|ADDED_TO_REGION\l|if (r8 \< (r7 = r4 \/ r13)) goto L21\l}"];
Node_73 [shape=record,label="{73\:\ 0x005d|ADDED_TO_REGION\l|if ((r8 = r8 * r13) \< (r4 + r10)) goto L28\l}"];
subgraph cluster_Region_518976193 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x005f|RETURN\lADDED_TO_REGION\l|return null\l}"];
}
}
subgraph cluster_Region_1761116395 {
label = "R(1:27)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x0060|LOOP_END\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\l|int r8 = r8 \- r10\lr9++\l}"];
}
}
}
}
}
}
Node_76 [shape=record,label="{76\:\ 0x0064|RETURN\l|return r3 ? java.lang.Integer.valueOf(r8) : java.lang.Integer.valueOf(\-r8)\l}"];
}
}
}
Node_43 [shape=record,color=red,label="{43\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_44 [shape=record,color=red,label="{44\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x0020}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x0053}"];
Node_82 [shape=record,color=red,label="{82\:\ 0x0057|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_70 [shape=record,color=red,label="{70\:\ 0x0057|RETURN\lADDED_TO_REGION\l|return null\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x0058|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x0058|RETURN\lADDED_TO_REGION\l|return null\l}"];
Node_72 [shape=record,color=red,label="{72\:\ 0x0059|PHI: r7 \l  PHI: (r7v2 'limitBeforeMul' int) = (r7v1 'limitBeforeMul' int), (r7v3 'limitBeforeMul' int) binds: [B:66:0x004f, B:69:0x0055] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x005f|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x004e|SYNTHETIC\l}"];
Node_81 [shape=record,color=red,label="{81\:\ 0x0064|SYNTHETIC\l}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0066}"];
Node_85 [shape=record,color=red,label="{85\:\ ?|SYNTHETIC\l}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x006b}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0070|ORIG_RETURN\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x002d}"];
MethodNode[shape=record,label="{public static final java.lang.Integer kotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull((r12v0 '$this$toIntOrNull' java.lang.String A[D('$this$toIntOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'radix' int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:52:0x0023 \-\> B:44:?, CROSS_EDGE: B:65:0x004e \-\> B:44:?, CROSS_EDGE: B:70:0x0057 \-\> B:44:?, CROSS_EDGE: B:74:0x005f \-\> B:44:?, BACK_EDGE: B:75:0x0060 \-\> B:62:0x0042, CROSS_EDGE: B:71:0x0058 \-\> B:44:?, CROSS_EDGE: B:66:0x004f \-\> B:72:0x0059, CROSS_EDGE: B:79:0x0070 \-\> B:44:?, CROSS_EDGE: B:78:0x006b \-\> B:79:0x0070, CROSS_EDGE: B:58:0x0031 \-\> B:61:0x003c, CROSS_EDGE: B:59:0x0036 \-\> B:44:?, CROSS_EDGE: B:60:0x0037 \-\> B:61:0x003c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_43;Node_45 -> Node_46;
Node_46 -> Node_47;
Node_46 -> Node_48[style=dashed];
Node_47 -> Node_44;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_49 -> Node_60[style=dashed];
Node_51 -> Node_52;
Node_51 -> Node_53[style=dashed];
Node_52 -> Node_44;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_54 -> Node_56[style=dashed];
Node_55 -> Node_61;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_59 -> Node_44;
Node_58 -> Node_61;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_62 -> Node_81[style=dashed];
Node_63 -> Node_64;
Node_64 -> Node_66[style=dashed];
Node_64 -> Node_83;
Node_65 -> Node_44;
Node_66 -> Node_67;
Node_66 -> Node_72[style=dashed];
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_80;
Node_69 -> Node_72[style=dashed];
Node_69 -> Node_82;
Node_73 -> Node_75[style=dashed];
Node_73 -> Node_84;
Node_74 -> Node_44;
Node_75 -> Node_62;
Node_76 -> Node_77;
Node_76 -> Node_78;
Node_43 -> Node_45;
Node_50 -> Node_51;
Node_68 -> Node_69;
Node_82 -> Node_70;
Node_70 -> Node_44;
Node_80 -> Node_71;
Node_71 -> Node_44;
Node_72 -> Node_73;
Node_84 -> Node_74;
Node_83 -> Node_65;
Node_81 -> Node_76;
Node_77 -> Node_85;
Node_85 -> Node_44;
Node_78 -> Node_79;
Node_79 -> Node_44;
Node_56 -> Node_57;
}

