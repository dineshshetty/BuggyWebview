digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Integer;" {
Node_43 [shape=record,label="{43\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r12 I:java.lang.Object A[D('$this$toIntOrNull' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r13 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:67)\l0x0008: INVOKE  (r0 I:int) = (r12 I:java.lang.String A[D('$this$toIntOrNull' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:69)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:70)\l}"];
Node_46 [shape=record,label="{46\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0010 \l}"];
Node_47 [shape=record,label="{47\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:java.lang.Integer) \l}"];
Node_44 [shape=record,label="{44\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0010|0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:76)\l0x0014: INVOKE  (r5 I:char) = (r12 I:java.lang.String A[D('$this$toIntOrNull' java.lang.String)]), (r5 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0018: CONST  (r6 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char])  (LINE:77)\l0x001a: INVOKE  (r6 I:int) = (r5 I:int A[D('firstChar' char)]), (r6 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x001e|0x001e: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:60:0x0037 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0020|0x0020: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:78)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0024 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:java.lang.Integer) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0024|0x0024: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('start' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:80)\l0x0025: CONST  (r6 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char])  (LINE:82)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0027|0x0027: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x002d \l}"];
Node_55 [shape=record,label="{55\:\ 0x0029|0x0029: CONST  (r3 I:??[boolean, int, float, short, byte, char] A[D('isNegative' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:83)\l0x002a: CONST  (r4 I:??[int, float, short, byte, char] A[D('limit' int)]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:84)\l}"];
Node_61 [shape=record,label="{61\:\ 0x003c|0x003c: CONST  (r6 I:??[int, float, short, byte, char]) = (\-59652323(0xfffffffffc71c71d, float:\-5.0215282E36) ??[int, float, short, byte, char])  (LINE:97)\l0x003f: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limitForMaxRadix' int)])  (LINE:99)\l0x0040: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:100)\l0x0041: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:101)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0042|LOOP_START\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\l|0x0042: IF  (r9 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:81:0x0064 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0044|0x0044: INVOKE  (r10 I:char) = (r12 I:java.lang.String A[D('$this$toIntOrNull' java.lang.String)]), (r9 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:102)\l0x0048: INVOKE  (r10 I:int) = (r10 I:char), (r13 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_64 [shape=record,label="{64\:\ 0x004c|0x004c: IF  (r10 I:??[int, byte, short, char] A[D('digit' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:66:0x004f  (LINE:104)\l}"];
Node_66 [shape=record,label="{66\:\ 0x004f|0x004f: IF  (r8 I:??[int, byte, short, char] A[D('result' int)]) \>= (r7 I:??[int, byte, short, char] A[D('limitBeforeMul' int)])  \-\> B:72:0x0059  (LINE:105)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0051|0x0051: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limitBeforeMul' int)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limitForMaxRadix' int)])  \-\> B:80:0x0058  (LINE:106)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0053|0x0053: ARITH  (r7 I:int A[D('limitBeforeMul' int)]) = (r4 I:int A[D('limit' int)]) \/ (r13 I:int A[D('radix' int)])  (LINE:107)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0055|0x0055: IF  (r8 I:??[int, byte, short, char] A[D('result' int)]) \>= (r7 I:??[int, byte, short, char] A[D('limitBeforeMul' int)])  \-\> B:72:0x0059  (LINE:109)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0057|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0057|RETURN\l|0x0057: RETURN  (r1 I:java.lang.Integer)  (LINE:110)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0058|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0058|RETURN\l|0x0058: RETURN  (r1 I:java.lang.Integer)  (LINE:113)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0059|0x0059: ARITH  (r8 I:int) = (r8 I:int A[D('result' int)]) * (r13 I:int A[D('radix' int)])  (LINE:117)\l0x005b: ARITH  (r11 I:int) = (r4 I:int A[D('limit' int)]) + (r10 I:int A[D('digit' int)])  (LINE:119)\l}"];
Node_73 [shape=record,label="{73\:\ 0x005d|0x005d: IF  (r8 I:??[int, byte, short, char] A[D('result' int)]) \>= (r11 I:??[int, byte, short, char])  \-\> B:75:0x0060 \l}"];
Node_75 [shape=record,label="{75\:\ 0x0060|LOOP_END\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\l|0x0060: ARITH  (r8 I:int) = (r8 I:int A[D('result' int)]) \- (r10 I:int A[D('digit' int)])  (LINE:121)\l0x0061: ARITH  (r9 I:int) = (r9 I:int A[D('i' int)]) + (1 int)  (LINE:101)\l}"];
Node_84 [shape=record,label="{84\:\ 0x005f|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x005f|RETURN\l|0x005f: RETURN  (r1 I:java.lang.Integer) \l}"];
Node_83 [shape=record,label="{83\:\ 0x004e|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x004e|RETURN\l|0x004e: RETURN  (r1 I:java.lang.Integer) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0064|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0064|0x0064: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isNegative' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x006b  (LINE:124)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0066|0x0066: INVOKE  (r1 I:java.lang.Integer) = (r8 I:int A[D('result' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l}"];
Node_85 [shape=record,label="{85\:\ ?|SYNTHETIC\lRETURN\l|0x0070: RETURN  (r1 I:java.lang.Integer) A[SYNTHETIC]\l}"];
Node_78 [shape=record,label="{78\:\ 0x006b|0x006b: NEG  (r1 I:int) = (r8 I:int A[D('result' int)]) \l0x006c: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l}"];
Node_79 [shape=record,label="{79\:\ 0x0070|RETURN\lORIG_RETURN\l|0x0070: RETURN  (r1 I:java.lang.Integer) \l}"];
Node_56 [shape=record,label="{56\:\ 0x002d|0x002d: CONST  (r6 I:??[int, float, short, byte, char]) = (43 ??[int, float, short, byte, char])  (LINE:85)\l}"];
Node_57 [shape=record,label="{57\:\ 0x002f|0x002f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0036 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0031|0x0031: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isNegative' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:86)\l0x0032: CONST  (r4 I:??[int, float, short, byte, char] A[D('limit' int)]) = (\-2147483647(0xffffffff80000001, float:\-1.4E\-45) ??[int, float, short, byte, char])  (LINE:87)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:java.lang.Integer)  (LINE:89)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0037|0x0037: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:91)\l0x0038: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isNegative' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:92)\l0x0039: CONST  (r4 I:??[int, float, short, byte, char] A[D('limit' int)]) = (\-2147483647(0xffffffff80000001, float:\-1.4E\-45) ??[int, float, short, byte, char])  (LINE:93)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Integer kotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull((r12 I:java.lang.String A[D('$this$toIntOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:52:0x0023 \-\> B:44:?, CROSS_EDGE: B:65:0x004e \-\> B:44:?, CROSS_EDGE: B:70:0x0057 \-\> B:44:?, CROSS_EDGE: B:74:0x005f \-\> B:44:?, BACK_EDGE: B:75:0x0060 \-\> B:62:0x0042, CROSS_EDGE: B:71:0x0058 \-\> B:44:?, CROSS_EDGE: B:66:0x004f \-\> B:72:0x0059, CROSS_EDGE: B:79:0x0070 \-\> B:44:?, CROSS_EDGE: B:78:0x006b \-\> B:79:0x0070, CROSS_EDGE: B:58:0x0031 \-\> B:61:0x003c, CROSS_EDGE: B:59:0x0036 \-\> B:44:?, CROSS_EDGE: B:60:0x0037 \-\> B:61:0x003c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004c\-0x0061: r10 'digit' I\l  0x0042\-0x0064: r9 'i' I\l  0x000c\-0x0070: r0 'length' I\l  0x0011\-0x0070: r2 'start' I\l  0x0012\-0x0070: r3 'isNegative' Z\l  0x0013\-0x0070: r4 'limit' I\l  0x0018\-0x0070: r5 'firstChar' C\l  0x003f\-0x0070: r6 'limitForMaxRadix' I\l  0x0040\-0x0070: r7 'limitBeforeMul' I\l  0x0041\-0x0070: r8 'result' I\l  \-1 \-0x0070: r12 '$this$toIntOrNull' Ljava\/lang\/String;\l  \-1 \-0x0070: r13 'radix' I\l}"];
MethodNode -> Node_43;Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_44;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_60;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_44;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_81;
Node_63 -> Node_64;
Node_64 -> Node_66;
Node_64 -> Node_83[style=dashed];
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_72;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_80;
Node_68 -> Node_69;
Node_69 -> Node_72;
Node_69 -> Node_82[style=dashed];
Node_82 -> Node_70;
Node_70 -> Node_44;
Node_80 -> Node_71;
Node_71 -> Node_44;
Node_72 -> Node_73;
Node_73 -> Node_75;
Node_73 -> Node_84[style=dashed];
Node_75 -> Node_62;
Node_84 -> Node_74;
Node_74 -> Node_44;
Node_83 -> Node_65;
Node_65 -> Node_44;
Node_81 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_78;
Node_77 -> Node_85;
Node_85 -> Node_44;
Node_78 -> Node_79;
Node_79 -> Node_44;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_61;
Node_59 -> Node_44;
Node_60 -> Node_61;
}

