digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Integer;" {
Node_43 [shape=record,label="{43\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"\<this\>\")\lkotlin.text.CharsKt.checkRadix(r13)\lint r0 = r12.length()\l}"];
Node_46 [shape=record,label="{46\:\ 0x000d|if (r0 != 0) goto L5\l}"];
Node_47 [shape=record,label="{47\:\ 0x000f|RETURN\l|return null\l}"];
Node_44 [shape=record,label="{44\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0010|char r5 = r12.charAt(0)\l}"];
Node_49 [shape=record,label="{49\:\ 0x001e|if (kotlin.jvm.internal.Intrinsics.compare(r5, 48) \>= 0) goto L42\l}"];
Node_50 [shape=record,label="{50\:\ 0x0020}"];
Node_51 [shape=record,label="{51\:\ 0x0021|if (r0 != 1) goto L10\l}"];
Node_52 [shape=record,label="{52\:\ 0x0023|RETURN\l|return null\l}"];
Node_53 [shape=record,label="{53\:\ 0x0024|r2 = 1\l}"];
Node_54 [shape=record,label="{54\:\ 0x0027|if (r5 != '\-') goto L38\l}"];
Node_55 [shape=record,label="{55\:\ 0x0029|r3 = true\lr4 = Integer.MIN_VALUE\l}"];
Node_61 [shape=record,label="{61\:\ 0x003c|PHI: r2 r3 r4 \l  PHI: (r2v2 'start' int) = (r2v1 'start' int), (r2v3 'start' int), (r2v3 'start' int) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'isNegative' boolean) = (r3v1 'isNegative' boolean), (r3v3 'isNegative' boolean), (r3v4 'isNegative' boolean) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'limit' int) = (r4v1 'limit' int), (r4v3 'limit' int), (r4v4 'limit' int) binds: [B:60:0x0037, B:58:0x0031, B:55:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|r7 = \-59652323\lr8 = 0\lr9 = r2\l}"];
Node_62 [shape=record,label="{62\:\ 0x0042|LOOP_START\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\lPHI: r7 r8 r9 \l  PHI: (r7v1 'limitBeforeMul' int) = (r7v0 'limitBeforeMul' int), (r7v2 'limitBeforeMul' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v1 'result' int) = (r8v0 'result' int), (r8v3 'result' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'i' int) = (r9v0 'i' int), (r9v2 'i' int) binds: [B:61:0x003c, B:75:0x0060] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 \>= r0) goto L32\l}"];
Node_63 [shape=record,label="{63\:\ 0x0044|int r10 = kotlin.text.CharsKt.digitOf(r12.charAt(r9), r13)\l}"];
Node_64 [shape=record,label="{64\:\ 0x004c|if (r10 \>= 0) goto L17\l}"];
Node_66 [shape=record,label="{66\:\ 0x004f|if (r8 \>= r7) goto L25\l}"];
Node_67 [shape=record,label="{67\:\ 0x0051|if (r7 != (\-59652323)) goto L23\l}"];
Node_68 [shape=record,label="{68\:\ 0x0053|int r7 = r4 \/ r13\l}"];
Node_69 [shape=record,label="{69\:\ 0x0055|if (r8 \>= r7) goto L25\l}"];
Node_82 [shape=record,label="{82\:\ 0x0057|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0057|RETURN\l|return null\l}"];
Node_80 [shape=record,label="{80\:\ 0x0058|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0058|RETURN\l|return null\l}"];
Node_72 [shape=record,label="{72\:\ 0x0059|PHI: r7 \l  PHI: (r7v2 'limitBeforeMul' int) = (r7v1 'limitBeforeMul' int), (r7v3 'limitBeforeMul' int) binds: [B:66:0x004f, B:69:0x0055] A[DONT_GENERATE, DONT_INLINE]\l|int r8 = r8 * r13\l}"];
Node_73 [shape=record,label="{73\:\ 0x005d|if (r8 \>= (r4 + r10)) goto L27\l}"];
Node_75 [shape=record,label="{75\:\ 0x0060|LOOP_END\lLOOP:0: B:62:0x0042\-\>B:75:0x0060\l|int r8 = r8 \- r10\lint r9 = r9 + 1\l}"];
Node_84 [shape=record,label="{84\:\ 0x005f|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x005f|RETURN\l|return null\l}"];
Node_83 [shape=record,label="{83\:\ 0x004e|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x004e|RETURN\l|return null\l}"];
Node_81 [shape=record,label="{81\:\ 0x0064|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0064|if (r3 == false) goto L36\l}"];
Node_77 [shape=record,label="{77\:\ 0x0066}"];
Node_85 [shape=record,label="{85\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Integer.valueOf(r8)\l}"];
Node_78 [shape=record,label="{78\:\ 0x006b}"];
Node_79 [shape=record,label="{79\:\ 0x0070|RETURN\lORIG_RETURN\l|return java.lang.Integer.valueOf(\-r8)\l}"];
Node_56 [shape=record,label="{56\:\ 0x002d}"];
Node_57 [shape=record,label="{57\:\ 0x002f|if (r5 != '+') goto L41\l}"];
Node_58 [shape=record,label="{58\:\ 0x0031|r3 = false\lr4 = \-2147483647\l}"];
Node_59 [shape=record,label="{59\:\ 0x0036|RETURN\l|return null\l}"];
Node_60 [shape=record,label="{60\:\ 0x0037|r2 = 0\lr3 = false\lr4 = \-2147483647\l}"];
MethodNode[shape=record,label="{public static final java.lang.Integer kotlin.text.StringsKt__StringNumberConversionsKt.toIntOrNull((r12v0 '$this$toIntOrNull' java.lang.String A[D('$this$toIntOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'radix' int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:52:0x0023 \-\> B:44:?, CROSS_EDGE: B:65:0x004e \-\> B:44:?, CROSS_EDGE: B:70:0x0057 \-\> B:44:?, CROSS_EDGE: B:74:0x005f \-\> B:44:?, BACK_EDGE: B:75:0x0060 \-\> B:62:0x0042, CROSS_EDGE: B:71:0x0058 \-\> B:44:?, CROSS_EDGE: B:66:0x004f \-\> B:72:0x0059, CROSS_EDGE: B:79:0x0070 \-\> B:44:?, CROSS_EDGE: B:78:0x006b \-\> B:79:0x0070, CROSS_EDGE: B:58:0x0031 \-\> B:61:0x003c, CROSS_EDGE: B:59:0x0036 \-\> B:44:?, CROSS_EDGE: B:60:0x0037 \-\> B:61:0x003c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_43;Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_44;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_60;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_44;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_81;
Node_63 -> Node_64;
Node_64 -> Node_66;
Node_64 -> Node_83[style=dashed];
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_72;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_80;
Node_68 -> Node_69;
Node_69 -> Node_72;
Node_69 -> Node_82[style=dashed];
Node_82 -> Node_70;
Node_70 -> Node_44;
Node_80 -> Node_71;
Node_71 -> Node_44;
Node_72 -> Node_73;
Node_73 -> Node_75;
Node_73 -> Node_84[style=dashed];
Node_75 -> Node_62;
Node_84 -> Node_74;
Node_74 -> Node_44;
Node_83 -> Node_65;
Node_65 -> Node_44;
Node_81 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_78;
Node_77 -> Node_85;
Node_85 -> Node_44;
Node_78 -> Node_79;
Node_79 -> Node_44;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_61;
Node_59 -> Node_44;
Node_60 -> Node_61;
}

