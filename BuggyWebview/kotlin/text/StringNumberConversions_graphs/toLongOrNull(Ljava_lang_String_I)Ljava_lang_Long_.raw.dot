digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull(Ljava\/lang\/String;I)Ljava\/lang\/Long;" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('$this$toLongOrNull' java.lang.String)]) \l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('radix' int)]) \l0x0004: CONST_STR  (r2 I:java.lang.String) =  \"\<this\>\" \l0x0006: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: INVOKE  (r21 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:142)\l0x000c: INVOKE  (r2 I:int) = (r20 I:java.lang.String A[D('$this$toLongOrNull' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:144)\l0x0010: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:145)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0014 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0013|RETURN\l|0x0013: RETURN  (r3 I:java.lang.Long) \l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_57 [shape=record,label="{57\:\ 0x0014|0x0014: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: CONST  (r6 I:??[long, double]) = (0 ??[long, double]) \l0x0018: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:151)\l0x0019: INVOKE  (r8 I:char) = (r0 I:java.lang.String), (r8 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x001d: CONST  (r9 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char])  (LINE:152)\l0x001f: INVOKE  (r9 I:int) = (r8 I:int A[D('firstChar' char)]), (r9 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0023|0x0023: IF  (r9 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:69:0x003e \l}"];
Node_59 [shape=record,label="{59\:\ 0x0025|0x0025: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:153)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0026|0x0026: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0029 \l}"];
Node_61 [shape=record,label="{61\:\ 0x0028|RETURN\l|0x0028: RETURN  (r3 I:java.lang.Long) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0029|0x0029: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('start' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:155)\l0x002a: CONST  (r9 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char])  (LINE:157)\l}"];
Node_63 [shape=record,label="{63\:\ 0x002c|0x002c: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0032 \l}"];
Node_64 [shape=record,label="{64\:\ 0x002e|0x002e: CONST  (r5 I:??[boolean, int, float, short, byte, char] A[D('isNegative' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:158)\l0x002f: CONST  (r6 I:??[long, double] A[D('limit' long)]) = (\-9223372036854775808 ??[long, double])  (LINE:159)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0045|0x0045: CONST  (r9 I:??[long, double]) = (\-256204778801521550(0xfc71c71c71c71c72, double:\-2.772000429909333E291) ??[long, double])  (LINE:172)\l0x004a: MOVE  (r11 I:??[long, double]) = (r9 I:??[long, double] A[D('limitForMaxRadix' long)])  (LINE:174)\l0x004b: CONST  (r13 I:??[long, double]) = (0 ??[long, double])  (LINE:175)\l0x004d: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:176)\l}"];
Node_71 [shape=record,label="{71\:\ 0x004e|LOOP_START\lLOOP:0: B:71:0x004e\-\>B:92:0x0086\l|0x004e: IF  (r15 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:100:0x0091 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0050|0x0050: INVOKE  (r3 I:char) = (r0 I:java.lang.String), (r15 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:177)\l0x0054: INVOKE  (r3 I:int) = (r3 I:char), (r1 I:int) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_73 [shape=record,label="{73\:\ 0x0058|0x0058: IF  (r3 I:??[int, byte, short, char] A[D('digit' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:76:0x005d  (LINE:179)\l}"];
Node_76 [shape=record,label="{76\:\ 0x005d|0x005d: CMP_L  (r17 I:int) = (r13 I:long A[D('result' long)]), (r11 I:long A[D('limitBeforeMul' long)])  (LINE:180)\l}"];
Node_77 [shape=record,label="{77\:\ 0x005f|0x005f: IF  (r17 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:87:0x0077 \l}"];
Node_78 [shape=record,label="{78\:\ 0x0061|0x0061: CMP_L  (r17 I:int) = (r11 I:long A[D('limitBeforeMul' long)]), (r9 I:long A[D('limitForMaxRadix' long)])  (LINE:181)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0063|0x0063: IF  (r17 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:99:0x0075 \l}"];
Node_80 [shape=record,label="{80\:\ 0x0065|0x0065: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstChar' char)])  (LINE:182)\l0x0067: MOVE  (r18 I:??[long, double]) = (r9 I:??[long, double] A[D('limitForMaxRadix' long)]) \l0x0069: CAST (r8 I:long A[D('firstChar' char)]) = (long) (r1 I:int) \l0x006a: ARITH  (r8 I:long) = (r6 I:long A[D('limit' long)]) \/ (r8 I:long) \l0x006c: CMP_L  (r10 I:int) = (r13 I:long A[D('result' long)]), (r8 I:long A[D('limitBeforeMul' long)])  (LINE:184)\l}"];
Node_81 [shape=record,label="{81\:\ 0x006e|0x006e: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:84:0x0072 \l}"];
Node_84 [shape=record,label="{84\:\ 0x0072|0x0072: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:184)\l0x0073: MOVE  (r11 I:??[long, double]) = (r8 I:??[long, double] A[D('limitBeforeMul' long)]) \l}"];
Node_88 [shape=record,label="{88\:\ 0x007b|0x007b: CAST (r8 I:long A[D('firstChar' char)]) = (long) (r1 I:int)  (LINE:192)\l0x007c: ARITH  (r13 I:long) = (r13 I:long A[D('result' long)]) * (r8 I:long) \l0x007e: CAST (r8 I:long) = (long) (r3 I:int A[D('digit' int)])  (LINE:194)\l0x007f: ARITH  (r8 I:long) = (r8 I:long) + (r6 I:long A[D('limit' long)]) \l0x0080: CMP_L  (r10 I:int) = (r13 I:long A[D('result' long)]), (r8 I:long) \l}"];
Node_89 [shape=record,label="{89\:\ 0x0082|0x0082: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:92:0x0086 \l}"];
Node_92 [shape=record,label="{92\:\ 0x0086|LOOP_END\lLOOP:0: B:71:0x004e\-\>B:92:0x0086\l|0x0086: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:196)\l0x0087: CAST (r9 I:long) = (long) (r3 I:int A[D('digit' int)]) \l0x0088: ARITH  (r13 I:long) = (r13 I:long A[D('result' long)]) \- (r9 I:long) \l0x0089: ARITH  (r15 I:int) = (r15 I:int A[D('i' int)]) + (1 int)  (LINE:176)\l0x008b: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x008c: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstChar' char)]) \l0x008e: MOVE  (r9 I:??[long, double]) = (r18 I:??[long, double] A[D('limitForMaxRadix' long)]) \l}"];
Node_98 [shape=record,label="{98\:\ 0x0084|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0084|RETURN\l|0x0084: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0085: RETURN  (r8 I:java.lang.Long) \l}"];
Node_101 [shape=record,label="{101\:\ 0x0070|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0070|RETURN\l|0x0070: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:185)\l0x0071: RETURN  (r10 I:java.lang.Long) \l}"];
Node_99 [shape=record,label="{99\:\ 0x0075|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0075|RETURN\l|0x0075: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:188)\l0x0076: RETURN  (r10 I:java.lang.Long) \l}"];
Node_87 [shape=record,label="{87\:\ 0x0077|0x0077: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstChar' char)])  (LINE:180)\l0x0079: MOVE  (r18 I:??[long, double]) = (r9 I:??[long, double] A[D('limitForMaxRadix' long)]) \l}"];
Node_102 [shape=record,label="{102\:\ 0x005a|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x005a|RETURN\l|0x005a: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x005c: RETURN  (r16 I:java.lang.Long) \l}"];
Node_100 [shape=record,label="{100\:\ 0x0091|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x0091|0x0091: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstChar' char)]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstChar' char)]) \l0x0093: MOVE  (r18 I:??[long, double]) = (r9 I:??[long, double] A[D('limitForMaxRadix' long)]) \l}"];
Node_94 [shape=record,label="{94\:\ 0x0095|0x0095: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isNegative' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x009c  (LINE:199)\l}"];
Node_95 [shape=record,label="{95\:\ 0x0097|0x0097: INVOKE  (r3 I:java.lang.Long) = (r13 I:long A[D('result' long)]) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l}"];
Node_103 [shape=record,label="{103\:\ ?|SYNTHETIC\lRETURN\l|0x00a1: RETURN  (r3 I:java.lang.Long) A[SYNTHETIC]\l}"];
Node_96 [shape=record,label="{96\:\ 0x009c|0x009c: NEG  (r8 I:long) = (r13 I:long A[D('result' long)]) \l0x009d: INVOKE  (r3 I:java.lang.Long) = (r8 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l}"];
Node_97 [shape=record,label="{97\:\ 0x00a1|RETURN\lORIG_RETURN\l|0x00a1: RETURN  (r3 I:java.lang.Long) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0032|0x0032: CONST  (r9 I:??[int, float, short, byte, char]) = (43 ??[int, float, short, byte, char])  (LINE:160)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0034|0x0034: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstChar' char)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x003d \l}"];
Node_67 [shape=record,label="{67\:\ 0x0036|0x0036: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isNegative' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:161)\l0x0037: CONST  (r6 I:??[long, double] A[D('limit' long)]) = (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ??[long, double])  (LINE:162)\l}"];
Node_68 [shape=record,label="{68\:\ 0x003d|RETURN\l|0x003d: RETURN  (r3 I:java.lang.Long)  (LINE:164)\l}"];
Node_69 [shape=record,label="{69\:\ 0x003e|0x003e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:166)\l0x003f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isNegative' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:167)\l0x0040: CONST  (r6 I:??[long, double] A[D('limit' long)]) = (\-9223372036854775807(0x8000000000000001, double:\-4.9E\-324) ??[long, double])  (LINE:168)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Long kotlin.text.StringsKt__StringNumberConversionsKt.toLongOrNull((r20 I:java.lang.String A[D('$this$toLongOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x0028 \-\> B:53:?, CROSS_EDGE: B:75:0x005c \-\> B:53:?, CROSS_EDGE: B:83:0x0071 \-\> B:53:?, CROSS_EDGE: B:91:0x0085 \-\> B:53:?, BACK_EDGE: B:92:0x0086 \-\> B:71:0x004e, CROSS_EDGE: B:86:0x0076 \-\> B:53:?, CROSS_EDGE: B:87:0x0077 \-\> B:88:0x007b, CROSS_EDGE: B:97:0x00a1 \-\> B:53:?, CROSS_EDGE: B:96:0x009c \-\> B:97:0x00a1, CROSS_EDGE: B:67:0x0036 \-\> B:70:0x0045, CROSS_EDGE: B:68:0x003d \-\> B:53:?, CROSS_EDGE: B:69:0x003e \-\> B:70:0x0045\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0069: r8 'firstChar' C\l  0x004a\-0x0069: r9 'limitForMaxRadix' J\l  0x004b\-0x006c: r11 'limitBeforeMul' J\l  0x0069\-0x0075: r17 'firstChar' C\l  0x0069\-0x0075: r18 'limitForMaxRadix' J\l  0x006c\-0x0075: r8 'limitBeforeMul' J\l  0x0075\-0x007b: r8 'firstChar' C\l  0x0075\-0x007b: r9 'limitForMaxRadix' J\l  0x0058\-0x0089: r3 'digit' I\l  0x007b\-0x0091: r17 'firstChar' C\l  0x007b\-0x0091: r18 'limitForMaxRadix' J\l  0x0091\-0x0095: r8 'firstChar' C\l  0x0091\-0x0095: r9 'limitForMaxRadix' J\l  0x004e\-0x0095: r15 'i' I\l  0x0010\-0x00a1: r2 'length' I\l  0x0015\-0x00a1: r4 'start' I\l  0x0016\-0x00a1: r5 'isNegative' Z\l  0x0018\-0x00a1: r6 'limit' J\l  0x0075\-0x00a1: r11 'limitBeforeMul' J\l  0x004d\-0x00a1: r13 'result' J\l  0x0095\-0x00a1: r17 'firstChar' C\l  0x0095\-0x00a1: r18 'limitForMaxRadix' J\l  \-1 \-0x00a1: r20 '$this$toLongOrNull' Ljava\/lang\/String;\l  \-1 \-0x00a1: r21 'radix' I\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_53;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_69;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_53;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_100;
Node_72 -> Node_73;
Node_73 -> Node_76;
Node_73 -> Node_102[style=dashed];
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_87;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_99;
Node_80 -> Node_81;
Node_81 -> Node_84;
Node_81 -> Node_101[style=dashed];
Node_84 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_92;
Node_89 -> Node_98[style=dashed];
Node_92 -> Node_71;
Node_98 -> Node_90;
Node_90 -> Node_53;
Node_101 -> Node_82;
Node_82 -> Node_53;
Node_99 -> Node_85;
Node_85 -> Node_53;
Node_87 -> Node_88;
Node_102 -> Node_74;
Node_74 -> Node_53;
Node_100 -> Node_93;
Node_93 -> Node_94;
Node_94 -> Node_95[style=dashed];
Node_94 -> Node_96;
Node_95 -> Node_103;
Node_103 -> Node_53;
Node_96 -> Node_97;
Node_97 -> Node_53;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_70;
Node_68 -> Node_53;
Node_69 -> Node_70;
}

