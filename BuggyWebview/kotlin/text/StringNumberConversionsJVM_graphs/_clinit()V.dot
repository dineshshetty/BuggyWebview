digraph "CFG forkotlin.text.ScreenFloatValueRegEx.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.text.StringNumberConversionsJVM.INSTANCE = new kotlin.text.StringNumberConversionsJVM()\lkotlin.text.ScreenFloatValueRegEx r0 = kotlin.text.StringNumberConversionsJVM.INSTANCE\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"[eE][+\-]?\")\lr4.append(\"(p\{Digit\}+)\")\ljava.lang.String r4 = r4.toString()\ljava.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"(0[xX]\")\lr5.append(\"(p\{XDigit\}+)\")\lr5.append(\"(.)?)\|(0[xX]\")\lr5.append(\"(p\{XDigit\}+)\")\lr5.append(\"?(.)\")\lr5.append(\"(p\{XDigit\}+)\")\lr5.append(')')\ljava.lang.String r5 = r5.toString()\ljava.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append('(')\lr7.append(\"(p\{Digit\}+)\")\lr7.append(\"(.)?(\")\lr7.append(\"(p\{Digit\}+)\")\lr7.append(\"?)(\")\lr7.append(r4)\lr7.append(\")?)\|(.(\")\lr7.append(\"(p\{Digit\}+)\")\lr7.append(\")(\")\lr7.append(r4)\lr7.append(\")?)\|((\")\lr7.append(r5)\lr7.append(\")[pP][+\-]?\")\lr7.append(\"(p\{Digit\}+)\")\lr7.append(')')\ljava.lang.String r6 = r7.toString()\ljava.lang.StringBuilder r7 = new java.lang.StringBuilder()\lr7.append(\"[x00\-x20]*[+\-]?(NaN\|Infinity\|((\")\lr7.append(r6)\lr7.append(\")[fFdD]?))[x00\-x20]*\")\ljava.lang.String r7 = r7.toString()\lkotlin.text.StringNumberConversionsJVM.value = new kotlin.text.Regex(r7)\l}"];
Node_3 [shape=record,label="{3\:\ 0x00b0|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.text.ScreenFloatValueRegEx.\<clinit\>()  | TYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [260=4, 263=8]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

