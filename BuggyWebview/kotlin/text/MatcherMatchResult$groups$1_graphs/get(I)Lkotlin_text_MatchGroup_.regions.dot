digraph "CFG forkotlin.text.MatcherMatchResult$groups$1.get(I)Lkotlin\/text\/MatchGroup;" {
subgraph cluster_Region_1777295767 {
label = "R(2:1|(2:(2:3|4)|(1:6))) | DECL_VAR: java.util.regex.MatchResult null, kotlin.ranges.IntRange range, java.util.regex.MatchResult null\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|java.util.regex.MatchResult r0 = r4.this$0.getMatchResult()\lkotlin.ranges.IntRange r0 = kotlin.text.RegexKt.range(r0, r5)\l}"];
subgraph cluster_Region_1562751062 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1187616693 {
label = "IF [B:11:0x0012] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0012|if (r0.getStart().intValue() \>= 0) goto L3\l}"];
subgraph cluster_Region_235402118 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0014|java.util.regex.MatchResult r2 = r4.this$0.getMatchResult()\ljava.lang.String java.lang.String r2 = r2.group(r5)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r2, \"matchResult.group(index)\")\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return new kotlin.text.MatchGroup(r2, r0)\l}"];
}
}
subgraph cluster_Region_1655572789 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchGroup kotlin.text.MatcherMatchResult$groups$1.get((r4v0 'this' kotlin.text.MatcherMatchResult$groups$1 A[IMMUTABLE_TYPE, THIS]), (r5v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:14:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.text.MatchGroupCollection.get(int):kotlin.text.MatchGroup]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_9;
Node_8 -> Node_10;
}

