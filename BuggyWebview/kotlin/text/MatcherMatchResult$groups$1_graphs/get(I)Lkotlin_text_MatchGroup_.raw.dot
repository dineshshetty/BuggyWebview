digraph "CFG forkotlin.text.MatcherMatchResult$groups$1.get(I)Lkotlin\/text\/MatchGroup;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.text.MatcherMatchResult) = (r4 I:kotlin.text.MatcherMatchResult$groups$1) kotlin.text.MatcherMatchResult$groups$1.this$0 kotlin.text.MatcherMatchResult  (LINE:364)\l0x0002: INVOKE  (r0 I:java.util.regex.MatchResult) = (r0 I:kotlin.text.MatcherMatchResult) type: STATIC call: kotlin.text.MatcherMatchResult.access$getMatchResult(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult A[MD:(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult (m)]\l0x0006: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r0 I:java.util.regex.MatchResult), (r5 I:int A[D('index' int)]) type: STATIC call: kotlin.text.RegexKt.access$range(java.util.regex.MatchResult, int):kotlin.ranges.IntRange A[MD:(java.util.regex.MatchResult, int):kotlin.ranges.IntRange (m)]\l0x000a: INVOKE  (r1 I:java.lang.Integer) = (r0 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getStart():java.lang.Integer A[MD:():java.lang.Integer (m)] (LINE:365)\l0x000e: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|0x0012: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:13:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: NEW_INSTANCE  (r1 I:kotlin.text.MatchGroup) =  kotlin.text.MatchGroup  (LINE:366)\l0x0016: IGET  (r2 I:kotlin.text.MatcherMatchResult) = (r4 I:kotlin.text.MatcherMatchResult$groups$1) kotlin.text.MatcherMatchResult$groups$1.this$0 kotlin.text.MatcherMatchResult \l0x0018: INVOKE  (r2 I:java.util.regex.MatchResult) = (r2 I:kotlin.text.MatcherMatchResult) type: STATIC call: kotlin.text.MatcherMatchResult.access$getMatchResult(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult A[MD:(kotlin.text.MatcherMatchResult):java.util.regex.MatchResult (m)]\l0x001c: INVOKE  (r2 I:java.lang.String) = (r2 I:java.util.regex.MatchResult), (r5 I:int A[D('index' int)]) type: INTERFACE call: java.util.regex.MatchResult.group(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"matchResult.group(index)\" \l0x0022: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0025: INVOKE  \l  (r1 I:kotlin.text.MatchGroup)\l  (r2 I:java.lang.String)\l  (r0 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)])\l type: DIRECT call: kotlin.text.MatchGroup.\<init\>(java.lang.String, kotlin.ranges.IntRange):void A[MD:(java.lang.String, kotlin.ranges.IntRange):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN  (r1 I:kotlin.text.MatchGroup) A[SYNTHETIC] (LINE:365)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\lORIG_RETURN\l|0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:368)\l0x002a: RETURN  (r1 I:kotlin.text.MatchGroup)  (LINE:365)\l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchGroup kotlin.text.MatcherMatchResult$groups$1.get((r4 'this' I:kotlin.text.MatcherMatchResult$groups$1 A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:14:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x002a: r0 'range' Lkotlin\/ranges\/IntRange;\l  \-1 \-0x002a: r5 'index' I\lMETHOD_OVERRIDE: [kotlin.text.MatchGroupCollection.get(int):kotlin.text.MatchGroup]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_9;
}

