digraph "CFG forkotlin.text.MatcherMatchResult.next()Lkotlin\/text\/MatchResult;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) type: DIRECT call: kotlin.text.MatcherMatchResult.getMatchResult():java.util.regex.MatchResult A[MD:():java.util.regex.MatchResult (m)] (LINE:390)\l0x0004: INVOKE  (r0 I:int) = (r0 I:java.util.regex.MatchResult) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)]\l0x0008: INVOKE  (r1 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) type: DIRECT call: kotlin.text.MatcherMatchResult.getMatchResult():java.util.regex.MatchResult A[MD:():java.util.regex.MatchResult (m)]\l0x000c: INVOKE  (r1 I:int) = (r1 I:java.util.regex.MatchResult) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)]\l0x0010: INVOKE  (r2 I:java.util.regex.MatchResult) = (r3 I:kotlin.text.MatcherMatchResult) type: DIRECT call: kotlin.text.MatcherMatchResult.getMatchResult():java.util.regex.MatchResult A[MD:():java.util.regex.MatchResult (m)]\l0x0014: INVOKE  (r2 I:int) = (r2 I:java.util.regex.MatchResult) type: INTERFACE call: java.util.regex.MatchResult.start():int A[MD:():int (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001c \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x001e: IGET  (r1 I:java.lang.CharSequence) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.input java.lang.CharSequence  (LINE:391)\l0x0020: INVOKE  (r1 I:int) = (r1 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: IF  (r0 I:??[int, byte, short, char] A[D('nextIndex' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:33:0x003e \l}"];
Node_32 [shape=record,label="{32\:\ 0x0026|0x0026: IGET  (r1 I:java.util.regex.Matcher) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.matcher java.util.regex.Matcher \l0x0028: INVOKE  (r1 I:java.util.regex.Pattern) = (r1 I:java.util.regex.Matcher) type: VIRTUAL call: java.util.regex.Matcher.pattern():java.util.regex.Pattern A[MD:():java.util.regex.Pattern (c)]\l0x002c: IGET  (r2 I:java.lang.CharSequence) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.input java.lang.CharSequence \l0x002e: INVOKE  (r1 I:java.util.regex.Matcher) = (r1 I:java.util.regex.Pattern), (r2 I:java.lang.CharSequence) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x0032: CONST_STR  (r2 I:java.lang.String) =  \"matcher.pattern().matcher(input)\" \l0x0034: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0037: IGET  (r2 I:java.lang.CharSequence) = (r3 I:kotlin.text.MatcherMatchResult) kotlin.text.MatcherMatchResult.input java.lang.CharSequence \l0x0039: INVOKE  (r1 I:kotlin.text.MatchResult) = (r1 I:java.util.regex.Matcher), (r0 I:int A[D('nextIndex' int)]), (r2 I:java.lang.CharSequence) type: STATIC call: kotlin.text.RegexKt.access$findNext(java.util.regex.Matcher, int, java.lang.CharSequence):kotlin.text.MatchResult A[MD:(java.util.regex.Matcher, int, java.lang.CharSequence):kotlin.text.MatchResult (m)]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN  (r1 I:kotlin.text.MatchResult) A[SYNTHETIC]\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x003e|RETURN\lORIG_RETURN\l|0x003e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003f: RETURN  (r1 I:kotlin.text.MatchResult) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|0x001c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchResult kotlin.text.MatcherMatchResult.next((r3 'this' I:kotlin.text.MatcherMatchResult A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x003e \-\> B:34:0x003f, CROSS_EDGE: B:29:0x001c \-\> B:30:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x003f: r0 'nextIndex' I\lMETHOD_OVERRIDE: [kotlin.text.MatchResult.next():kotlin.text.MatchResult]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_35;
Node_35 -> Node_25;
Node_33 -> Node_25;
Node_29 -> Node_30;
}

