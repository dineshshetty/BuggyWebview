digraph "CFG forkotlin.time.TimedValue.equals(Ljava\/lang\/Object;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000}"];
Node_18 [shape=record,label="{18\:\ 0x0001|if (r7 != r8) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004}"];
Node_21 [shape=record,label="{21\:\ 0x0007|if ((r8 instanceof kotlin.time.TimedValue) != false) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|RETURN\l|return false\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|kotlin.time.TimedValue r1 = (kotlin.time.TimedValue) r8\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|if (kotlin.jvm.internal.Intrinsics.areEqual(r7.value, r1.value) != false) goto L11\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|RETURN\l|return false\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018}"];
Node_27 [shape=record,label="{27\:\ 0x0020|if (kotlin.time.Duration.m1464equalsimpl0(r7.duration, r1.duration) != false) goto L14\l}"];
Node_28 [shape=record,label="{28\:\ 0x0022|RETURN\l|return false\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean kotlin.time.TimedValue.equals((r7v0 'this' kotlin.time.TimedValue\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:22:0x0009 \-\> B:16:?, CROSS_EDGE: B:25:0x0017 \-\> B:16:?, CROSS_EDGE: B:28:0x0022 \-\> B:16:?, CROSS_EDGE: B:29:0x0023 \-\> B:16:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_16;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_16;
Node_29 -> Node_16;
}

