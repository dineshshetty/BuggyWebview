digraph "CFG forkotlin.time.Duration.constructor\-impl(J)J" {
subgraph cluster_Region_825909404 {
label = "R(2:(1:(1:(2:7|8))(1:(2:16|17)(1:(2:14|15))))|18)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_650301562 {
label = "IF [B:24:0x0004] THEN: R(1:(1:(2:7|8))(1:(2:16|17)(1:(2:14|15)))) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0004|if (kotlin.time.DurationJvm.getDurationAssertionsEnabled() != false) goto L3\l}"];
subgraph cluster_Region_794736287 {
label = "R(1:(1:(2:7|8))(1:(2:16|17)(1:(2:14|15))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_295395852 {
label = "IF [B:26:0x000a] THEN: R(1:(2:7|8)) ELSE: R(1:(2:16|17)(1:(2:14|15)))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000a|if (m1490isInNanosimpl(r5) != false) goto L5\l}"];
subgraph cluster_Region_1934089763 {
label = "R(1:(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1127645489 {
label = "IF [B:28:0x0023] THEN: R(2:7|8) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0023|if (new kotlin.ranges.LongRange(\-4611686018426999999L, kotlin.time.DurationKt.MAX_NANOS).contains(m1486getValueimpl(r5)) == false) goto L7\l}"];
subgraph cluster_Region_428227974 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0027}"];
Node_31 [shape=record,label="{31\:\ 0x0041|throw new java.lang.AssertionError(m1486getValueimpl(r5) + \" ns is out of nanoseconds range\")\l}"];
}
}
}
subgraph cluster_Region_1405593528 {
label = "R(1:(2:16|17)(1:(2:14|15))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_515693861 {
label = "IF [B:33:0x0059] THEN: R(2:16|17) ELSE: R(1:(2:14|15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0059|if (new kotlin.ranges.LongRange(\-4611686018427387903L, kotlin.time.DurationKt.MAX_MILLIS).contains(m1486getValueimpl(r5)) == false) goto L16\l}"];
subgraph cluster_Region_1777662154 {
label = "R(2:16|17)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0090}"];
Node_40 [shape=record,label="{40\:\ 0x00aa|throw new java.lang.AssertionError(m1486getValueimpl(r5) + \" ms is out of milliseconds range\")\l}"];
}
subgraph cluster_Region_1094091391 {
label = "R(1:(2:14|15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_799152006 {
label = "IF [B:35:0x0072] THEN: R(2:14|15) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0072|if (new kotlin.ranges.LongRange(\-4611686018426L, 4611686018426L).contains(m1486getValueimpl(r5)) != false) goto L14\l}"];
subgraph cluster_Region_1469035170 {
label = "R(2:14|15)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0075}"];
Node_38 [shape=record,label="{38\:\ 0x008f|throw new java.lang.AssertionError(m1486getValueimpl(r5) + \" ms is denormalized\")\l}"];
}
}
}
}
}
}
}
}
Node_41 [shape=record,label="{41\:\ 0x00ab|RETURN\l|return r5\l}"];
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0000}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0006}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x000c}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0042}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x005b}"];
MethodNode[shape=record,label="{public static long kotlin.time.Duration.constructor\-impl((r5v0 'rawValue' long A[D('rawValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x00ab \-\> B:22:?, CROSS_EDGE: B:38:0x008f \-\> B:22:?, CROSS_EDGE: B:35:0x0072 \-\> B:41:0x00ab, CROSS_EDGE: B:40:0x00aa \-\> B:22:?, CROSS_EDGE: B:24:0x0004 \-\> B:41:0x00ab\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_24 -> Node_25;
Node_24 -> Node_41[style=dashed];
Node_26 -> Node_27;
Node_26 -> Node_32[style=dashed];
Node_28 -> Node_30;
Node_28 -> Node_41[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_22;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_22;
Node_35 -> Node_37;
Node_35 -> Node_41[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_41 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_32 -> Node_33;
Node_34 -> Node_35;
}

