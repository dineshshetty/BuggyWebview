digraph "CFG forkotlin.time.Duration.appendFractional\-impl(JLjava\/lang\/StringBuilder;IIILjava\/lang\/String;Z)V" {
subgraph cluster_Region_647949163 {
label = "R(3:1|(4:3|(1:(3:5|6|(1:(1:10))(2:12|1)))(0)|14|(1:17)(1:21))(0)|18)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|r15.append(r16)\l}"];
subgraph cluster_IfRegion_1767421584 {
label = "IF [B:27:0x0004] THEN: R(4:3|(1:(3:5|6|(1:(1:10))(2:12|1)))(0)|14|(1:17)(1:21)) ELSE: R(0)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0004|if (r17 != 0) goto L3\l}"];
subgraph cluster_Region_657356497 {
label = "R(4:3|(1:(3:5|6|(1:(1:10))(2:12|1)))(0)|14|(1:17)(1:21))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0006|r15.append('.')\ljava.lang.String java.lang.CharSequence r1 = kotlin.text.StringsKt.padStart(java.lang.String.valueOf(r17), r18, '0')\ljava.lang.CharSequence java.lang.CharSequence r4 = r1\lint r7 = \-1\lint int r6 = r4.length() \- 1\l}"];
subgraph cluster_IfRegion_774502026 {
label = "IF [B:29:0x0023] THEN: R(1:(3:5|6|(1:(1:10))(2:12|1))) ELSE: R(0)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0023|if (r6 \>= 0) goto L5\l}"];
subgraph cluster_Region_734182046 {
label = "R(1:(3:5|6|(1:(1:10))(2:12|1)))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1036798565 {
label = "LOOP:0: (3:5|6|(1:(1:10))(2:12|1))";
node [shape=record,color=blue];
subgraph cluster_Region_1359790549 {
label = "R(3:5|6|(1:(1:10))(2:12|1))";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0025|LOOP_START\lLOOP:0: B:30:0x0025\-\>B:36:0x0035\lPHI: r6 \l  PHI: (r6v5 int) = (r6v1 int), (r6v6 int) binds: [B:29:0x0023, B:36:0x0035] A[DONT_GENERATE, DONT_INLINE]\l|int r10 = r6\lr6\-\-\lchar char r11 = r4.charAt(r10)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|char r11 = r11 != '0' ? (char) 1 : (char) 0\l}"];
subgraph cluster_IfRegion_1301570952 {
label = "IF [B:34:0x0031] THEN: R(1:(1:10)) ELSE: R(2:12|1)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0031|PHI: r11 \l  PHI: (r11v2 'it' char) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r11 == 0) goto L9\l}"];
subgraph cluster_Region_1826106116 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2047824764 {
label = "IF [B:36:0x0035] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0035|LOOP_END\lLOOP:0: B:30:0x0025\-\>B:36:0x0035\l|if (r6 \< 0) goto L10\l}"];
subgraph cluster_Region_1083767865 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x0038|SYNTHETIC\lEDGE_INSN: B:47:0x0038\-\>B:38:0x0038 ?: BREAK  \l|break\l}"];
}
}
}
subgraph cluster_Region_88124891 {
label = "R(2:12|1)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0033|EDGE_INSN: B:35:0x0033\-\>B:38:0x0038 ?: BREAK  \l|r7 = r10\l}"];
Node_InsnContainer_2117122302 [shape=record,label="{|break\l}"];
}
}
}
}
}
subgraph cluster_Region_561007167 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_38 [shape=record,label="{38\:\ 0x0038|EDGE_INSN: B:35:0x0033\-\>B:38:0x0038 ?: BREAK  , EDGE_INSN: B:47:0x0038\-\>B:38:0x0038 ?: BREAK  \lPHI: r7 \l  PHI: (r7v1 int) = (r7v0 int), (r7v3 int), (r7v0 int) binds: [B:29:0x0023, B:35:0x0033, B:47:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|int int r7 = r7 + 1\l}"];
subgraph cluster_IfRegion_1295656833 {
label = "IF [B:39:0x003d, B:40:0x003f] THEN: R(1:17) ELSE: R(1:21)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x003d|if (r20 == false) goto L16\l}"];
Node_40 [shape=record,label="{40\:\ 0x003f|ADDED_TO_REGION\l|if (r7 \< 3) goto L17\l}"];
subgraph cluster_Region_1192069616 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0041|r15.append(r1, 0, r7)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r15, \"this.append(value, startIndex, endIndex)\")\l}"];
}
subgraph cluster_Region_2116373233 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x004b|r15.append(r1, 0, ((r7 + 2) \/ 3) * 3)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r15, \"this.append(value, startIndex, endIndex)\")\l}"];
}
}
}
subgraph cluster_Region_207475998 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_44 [shape=record,label="{44\:\ 0x005c|r15.append(r19)\l}"];
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x002e}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0033|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0030}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0061}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x005a}"];
MethodNode[shape=record,label="{private static final void kotlin.time.Duration.appendFractional\-impl((r13v0 'arg0' long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 '$this$appendFractional' java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'whole' int A[D('whole' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'fractional' int A[D('fractional' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'fractionalSize' int A[D('fractionalSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'unit' java.lang.String A[D('unit' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'isoZeroes' boolean A[D('isoZeroes' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x004b \-\> B:44:0x005c, CROSS_EDGE: B:39:0x003d \-\> B:42:0x004b, BACK_EDGE: B:36:0x0035 \-\> B:30:0x0025, CROSS_EDGE: B:36:0x0035 \-\> B:38:0x0038, CROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0023 \-\> B:38:0x0038, CROSS_EDGE: B:43:0x005a \-\> B:44:0x005c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_43[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_38[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_33;
Node_34 -> Node_36;
Node_34 -> Node_46[style=dashed];
Node_36 -> Node_30[style=dashed];
Node_36 -> Node_47;
Node_47 -> Node_38;
Node_35 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_42[style=dashed];
Node_40 -> Node_41;
Node_40 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_44;
Node_44 -> Node_45;
Node_24 -> Node_26;
Node_32 -> Node_34;
Node_46 -> Node_35;
Node_33 -> Node_34;
Node_45 -> Node_25;
Node_43 -> Node_44;
}

