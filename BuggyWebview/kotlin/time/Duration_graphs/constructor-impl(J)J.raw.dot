digraph "CFG forkotlin.time.Duration.constructor\-impl(J)J" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlin.time.DurationJvmKt.getDurationAssertionsEnabled():boolean A[MD:():boolean (m)] (LINE:44)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00ab \l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.isInNanos\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:45)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0042 \l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:46)\l0x000e: CONST  (r1 I:??[long, double]) = (\-4611686018426999999(0xc00000000005eb41, double:\-2.0000000001722644) ??[long, double]) \l0x0013: CONST  (r3 I:??[long, double]) = (4611686018426999999(0x3ffffffffffa14bf, double:1.9999999999138678) ??[long, double]) \l0x0018: INVOKE  (r0 I:kotlin.ranges.LongRange), (r1 I:long), (r3 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x001b: INVOKE  (r1 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x001f: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.LongRange), (r1 I:long) type: VIRTUAL call: kotlin.ranges.LongRange.contains(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0027 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0029: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002b: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002e: INVOKE  (r2 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:long) type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)]\l0x0035: CONST_STR  (r2 I:java.lang.String) =  \" ns is out of nanoseconds range\" \l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003e: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0041|0x0041: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0042|0x0042: NEW_INSTANCE  (r0 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:48)\l0x0044: CONST  (r1 I:??[long, double]) = (\-4611686018427387903(0xc000000000000001, double:\-2.0000000000000004) ??[long, double]) \l0x0049: CONST  (r3 I:??[long, double]) = (4611686018427387903(0x3fffffffffffffff, double:1.9999999999999998) ??[long, double]) \l0x004e: INVOKE  (r0 I:kotlin.ranges.LongRange), (r1 I:long), (r3 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x0051: INVOKE  (r1 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x0055: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.LongRange), (r1 I:long) type: VIRTUAL call: kotlin.ranges.LongRange.contains(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0059|0x0059: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0090 \l}"];
Node_34 [shape=record,label="{34\:\ 0x005b|0x005b: NEW_INSTANCE  (r0 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:49)\l0x005d: CONST  (r1 I:??[long, double]) = (\-4611686018426(0xfffffbce4217d286, double:NaN) ??[long, double]) \l0x0062: CONST  (r3 I:??[long, double]) = (4611686018426(0x431bde82d7a, double:2.2784756311107E\-311) ??[long, double]) \l0x0067: INVOKE  (r0 I:kotlin.ranges.LongRange), (r1 I:long), (r3 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x006a: INVOKE  (r1 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x006e: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.LongRange), (r1 I:long) type: VIRTUAL call: kotlin.ranges.LongRange.contains(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0072|0x0072: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0075 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0075|0x0075: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0077: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0079: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x007c: INVOKE  (r2 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x0080: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:long) type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)]\l0x0083: CONST_STR  (r2 I:java.lang.String) =  \" ms is denormalized\" \l0x0085: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0088: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x008c: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x008f|0x008f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0090|0x0090: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:48)\l0x0092: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0094: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0097: INVOKE  (r2 I:long) = (r5 I:long A[D('rawValue' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x009b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:long) type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)]\l0x009e: CONST_STR  (r2 I:java.lang.String) =  \" ms is out of milliseconds range\" \l0x00a0: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00a3: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00a7: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x00aa|0x00aa: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x00ab|RETURN\l|0x00ab: RETURN  (r5 I:long A[D('rawValue' long)])  (LINE:49)\l}"];
MethodNode[shape=record,label="{public static long kotlin.time.Duration.constructor\-impl((r5 I:long A[D('rawValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x00ab \-\> B:22:?, CROSS_EDGE: B:38:0x008f \-\> B:22:?, CROSS_EDGE: B:35:0x0072 \-\> B:41:0x00ab, CROSS_EDGE: B:40:0x00aa \-\> B:22:?, CROSS_EDGE: B:24:0x0004 \-\> B:41:0x00ab\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x00ab: r5 'rawValue' J\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_41;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_41[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_22;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_39;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_41[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_39 -> Node_40;
Node_40 -> Node_22;
Node_41 -> Node_22;
}

