digraph "CFG forkotlin.time.Duration.getNanosecondsComponent\-impl(J)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: INVOKE  (r0 I:boolean) = (r4 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInfinite\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:728)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0009 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|SYNTHETIC\lRETURN\l|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:731)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: INVOKE  (r0 I:boolean) = (r4 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInMillis\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:729)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x001d \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: INVOKE  (r0 I:long) = (r4 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)]\l0x0013: CONST  (r2 I:??[int, float, short, byte, char]) = (1000(0x3e8, float:1.401E\-42) ??[int, float, short, byte, char]) \l0x0015: CAST (r2 I:long) = (long) (r2 I:int) \l0x0016: ARITH  (r0 I:long) = (r0 I:long) % (r2 I:long) \l0x0017: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.time.DurationKt.access$millisToNanos(long):long A[MD:(long):long (m)]\l0x001b: CAST (r0 I:int) = (int) (r0 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0027: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:731)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|0x001d: INVOKE  (r0 I:long) = (r4 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)] (LINE:730)\l0x0021: CONST  (r2 I:??[int, float, short, byte, char]) = (1000000000(0x3b9aca00, float:0.0047237873) ??[int, float, short, byte, char]) \l0x0024: CAST (r2 I:long) = (long) (r2 I:int) \l0x0025: ARITH  (r0 I:long) = (r0 I:long) % (r2 I:long) \l0x0026: CAST (r0 I:int) = (int) (r0 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|RETURN\lORIG_RETURN\l|0x0027: RETURN  (r0 I:int)  (LINE:731)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.time.Duration.getNanosecondsComponent\-impl((r4 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000f \-\> B:21:0x0027, CROSS_EDGE: B:20:0x001d \-\> B:21:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0027: r4 'arg0' J\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

