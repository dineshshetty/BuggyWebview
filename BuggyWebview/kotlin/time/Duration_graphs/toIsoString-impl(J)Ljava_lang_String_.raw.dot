digraph "CFG forkotlin.time.Duration.toIsoString\-impl(J)Ljava\/lang\/String;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:1036)\l0x0002: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0005: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0006: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r1 I:boolean) = (r27 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isNegative\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:1037)\l}"];
Node_41 [shape=record,label="{41\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0012 \l}"];
Node_42 [shape=record,label="{42\:\ 0x000d|0x000d: CONST  (r1 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char]) \l0x000f: INVOKE  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0012|0x0012: CONST_STR  (r1 I:java.lang.String) =  \"PT\"  (LINE:1038)\l0x0014: INVOKE  \l  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)])\l  (r1 I:java.lang.String)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0017: INVOKE  (r11 I:long) = (r27 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getAbsoluteValue\-UwyO8pc(long):long A[MD:(long):long (m)] (LINE:1039)\l0x001b: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: INVOKE  (r1 I:long) = (r11 I:long A[D('arg0$iv' long)]) type: STATIC call: kotlin.time.Duration.getInWholeHours\-impl(long):long A[MD:(long):long (m)] (LINE:1479)\l0x0021: INVOKE  (r14 I:int) = (r11 I:long A[D('arg0$iv' long)]) type: STATIC call: kotlin.time.Duration.getMinutesComponent\-impl(long):int A[MD:(long):int (m)]\l0x0025: INVOKE  (r15 I:int) = (r11 I:long A[D('arg0$iv' long)]) type: STATIC call: kotlin.time.Duration.getSecondsComponent\-impl(long):int A[MD:(long):int (m)]\l0x0029: INVOKE  (r16 I:int) = (r11 I:long A[D('arg0$iv' long)]) type: STATIC call: kotlin.time.Duration.getNanosecondsComponent\-impl(long):int A[MD:(long):int (m)]\l0x002d: MOVE  (r17 I:??[long, double]) = (r1 I:??[long, double] A[D('hours' long)]) \l0x002f: CONST  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: INVOKE  (r3 I:boolean) = (r27 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInfinite\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:1042)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0037|0x0037: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0040 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0039|0x0039: CONST  (r1 I:??[long, double] A[D('hours' long)]) = (9999999999999(0x9184e729fff, double:4.940656458412E\-311) ??[long, double])  (LINE:1044)\l0x003e: MOVE  (r7 I:??[long, double]) = (r1 I:??[long, double] A[D('hours' long)]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0041|0x0041: CONST  (r1 I:??[long, double] A[D('hours' long)]) = (0 ??[long, double])  (LINE:1046)\l0x0043: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0044: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0045: CMP_L  (r5 I:int) = (r7 I:long A[D('hours' long)]), (r1 I:long) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0047|0x0047: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x004b \l}"];
Node_49 [shape=record,label="{49\:\ 0x0049|0x0049: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x004c|0x004c: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x004e|0x004e: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seconds' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0055  (LINE:1047)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0050|0x0050: IF  (r16 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nanoseconds' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0053 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0053|0x0053: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0056|0x0056: MOVE  (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0058|0x0058: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('minutes' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0060  (LINE:1048)\l}"];
Node_59 [shape=record,label="{59\:\ 0x005a|0x005a: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasSeconds' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x005f \l}"];
Node_60 [shape=record,label="{60\:\ 0x005c|0x005c: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasHours' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x005f \l}"];
Node_62 [shape=record,label="{62\:\ 0x005f|0x005f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0060|0x0060: MOVE  (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0062|0x0062: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasHours' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x006c  (LINE:1049)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0064|0x0064: INVOKE  \l  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)])\l  (r7 I:long A[D('hours' long)])\l type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)] (LINE:1050)\l0x0067: CONST  (r1 I:??[int, float, short, byte, char]) = (72 ??[int, float, short, byte, char]) \l0x0069: INVOKE  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l}"];
Node_66 [shape=record,label="{66\:\ 0x006c|0x006c: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasMinutes' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0076  (LINE:1052)\l}"];
Node_67 [shape=record,label="{67\:\ 0x006e|0x006e: INVOKE  \l  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)])\l  (r14 I:int A[D('minutes' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)] (LINE:1053)\l0x0071: CONST  (r1 I:??[int, float, short, byte, char]) = (77 ??[int, float, short, byte, char]) \l0x0073: INVOKE  (r9 I:java.lang.StringBuilder A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l}"];
Node_68 [shape=record,label="{68\:\ 0x0076|0x0076: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasSeconds' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0080  (LINE:1055)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0078|0x0078: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasHours' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x007d \l}"];
Node_70 [shape=record,label="{70\:\ 0x007a|0x007a: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasMinutes' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x007d \l}"];
Node_72 [shape=record,label="{72\:\ 0x007d|0x007d: MOVE  (r25 I:??[long, double]) = (r7 I:??[long, double] A[D('hours' long)]) \l}"];
Node_74 [shape=record,label="{74\:\ 0x0095|0x0097: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:1036)\l0x009b: CONST_STR  (r1 I:java.lang.String) =  \"StringBuilder().apply(builderAction).toString()\" \l0x009d: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x00a0|RETURN\l|0x00a0: RETURN  (r0 I:java.lang.String)  (LINE:1059)\l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0080|0x0080: CONST  (r6 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char])  (LINE:1056)\l0x0082: CONST  (r23 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0084: CONST_STR  (r24 I:java.lang.String) =  \"S\" \l0x0086: MOVE  (r1 I:??[long, double]) = (r27 I:??[long, double] A[D('arg0' long)]) \l0x0088: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$toIsoString_impl_u24lambda_u2d9' java.lang.StringBuilder)]) \l0x0089: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('seconds' int)]) \l0x008a: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nanoseconds' int)]) \l0x008c: MOVE  (r25 I:??[long, double]) = (r7 I:??[long, double] A[D('hours' long)]) \l0x008e: MOVE  (r7 I:??[OBJECT, ARRAY] A[D('hours' long)]) = (r24 I:??[OBJECT, ARRAY]) \l0x0090: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0092: INVOKE  \l  (r1 I:long)\l  (r3 I:java.lang.StringBuilder)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.String)\l  (r8 I:boolean)\l type: STATIC call: kotlin.time.Duration.appendFractional\-impl(long, java.lang.StringBuilder, int, int, int, java.lang.String, boolean):void A[MD:(long, java.lang.StringBuilder, int, int, int, java.lang.String, boolean):void (m)]\l}"];
Node_56 [shape=record,label="{56\:\ 0x0055|0x0055: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x004b|0x004b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0040|0x0040: MOVE  (r7 I:??[long, double]) = (r1 I:??[long, double] A[D('hours' long)])  (LINE:1042)\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.time.Duration.toIsoString\-impl((r27 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:73:0x0080 \-\> B:74:0x0095, CROSS_EDGE: B:69:0x0078 \-\> B:72:0x007d, CROSS_EDGE: B:68:0x0076 \-\> B:73:0x0080, CROSS_EDGE: B:66:0x006c \-\> B:68:0x0076, CROSS_EDGE: B:64:0x0062 \-\> B:66:0x006c, CROSS_EDGE: B:60:0x005c \-\> B:63:0x0060, CROSS_EDGE: B:59:0x005a \-\> B:62:0x005f, CROSS_EDGE: B:58:0x0058 \-\> B:63:0x0060, CROSS_EDGE: B:56:0x0055 \-\> B:57:0x0056, CROSS_EDGE: B:52:0x004e \-\> B:56:0x0055, CROSS_EDGE: B:50:0x004b \-\> B:51:0x004c, CROSS_EDGE: B:46:0x0040 \-\> B:47:0x0041, CROSS_EDGE: B:41:0x000b \-\> B:43:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0021\-0x002f: r1 'hours' J\l  0x0033\-0x0041: r1 'hours' J\l  0x0041\-0x008e: r7 'hours' J\l  0x001b\-0x0096: r11 'arg0$iv' J\l  0x001c\-0x0096: r13 '$i$f$toComponents\-impl' I\l  0x0025\-0x0096: r14 'minutes' I\l  0x0029\-0x0096: r15 'seconds' I\l  0x002d\-0x0096: r16 'nanoseconds' I\l  0x002f\-0x0096: r17 'hours' J\l  0x0031\-0x0096: r19 '$i$a$\-toComponents\-impl\-Duration$toIsoString$1$1' I\l  0x004e\-0x0096: r20 'hasHours' Z\l  0x0058\-0x0096: r21 'hasSeconds' Z\l  0x0062\-0x0096: r22 'hasMinutes' Z\l  0x008e\-0x0096: r25 'hours' J\l  0x0006\-0x0097: r9 '$this$toIsoString_impl_u24lambda_u2d9' Ljava\/lang\/StringBuilder;\l  0x0007\-0x0097: r10 '$i$a$\-buildString\-Duration$toIsoString$1' I\l  \-1 \-0x00a0: r27 'arg0' J\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_56;
Node_53 -> Node_55;
Node_53 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_63;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_62;
Node_60 -> Node_62;
Node_60 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_73;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_72;
Node_70 -> Node_72;
Node_70 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_39;
Node_73 -> Node_74;
Node_56 -> Node_57;
Node_50 -> Node_51;
Node_46 -> Node_47;
}

