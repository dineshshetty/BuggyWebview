digraph "CFG forkotlin.time.Duration.div\-UwyO8pc(JD)J" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r8 I:double A[D('scale' double)]) type: STATIC call: kotlin.math.MathKt.roundToInt(double):int A[MD:(double):int (m)] (LINE:604)\l0x0004: CAST (r1 I:double) = (double) (r0 I:int A[D('intScale' int)])  (LINE:605)\l0x0005: CMP_G  (r3 I:int) = (r1 I:double), (r8 I:double A[D('scale' double)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|0x0009: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0015 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('intScale' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0015 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: INVOKE  (r1 I:long) = (r6 I:long A[D('arg0' long)]), (r0 I:int A[D('intScale' int)]) type: STATIC call: kotlin.time.Duration.div\-UwyO8pc(long, int):long A[MD:(long, int):long (m)] (LINE:606)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: INVOKE  (r1 I:kotlin.time.DurationUnit) = (r6 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getStorageUnit\-impl(long):kotlin.time.DurationUnit A[MD:(long):kotlin.time.DurationUnit (m)] (LINE:609)\l0x0019: INVOKE  (r2 I:double) = (r6 I:long A[D('arg0' long)]), (r1 I:kotlin.time.DurationUnit A[D('unit' kotlin.time.DurationUnit)]) type: STATIC call: kotlin.time.Duration.toDouble\-impl(long, kotlin.time.DurationUnit):double A[MD:(long, kotlin.time.DurationUnit):double (m)] (LINE:610)\l0x001d: ARITH  (r2 I:double) = (r2 I:double) \/ (r8 I:double A[D('scale' double)]) \l0x001e: INVOKE  (r4 I:long) = (r2 I:double A[D('result' double)]), (r1 I:kotlin.time.DurationUnit A[D('unit' kotlin.time.DurationUnit)]) type: STATIC call: kotlin.time.DurationKt.toDuration(double, kotlin.time.DurationUnit):long A[MD:(double, kotlin.time.DurationUnit):long (m)] (LINE:611)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|RETURN\l|0x0022: RETURN  (r4 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.time.Duration.div\-UwyO8pc((r6 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[D('scale' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0022 \-\> B:13:?, CROSS_EDGE: B:18:0x000c \-\> B:22:0x0015, CROSS_EDGE: B:17:0x000b \-\> B:18:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0022: r0 'intScale' I\l  0x0019\-0x0022: r1 'unit' Lkotlin\/time\/DurationUnit;\l  0x001e\-0x0022: r2 'result' D\l  \-1 \-0x0022: r6 'arg0' J\l  \-1 \-0x0022: r8 'scale' D\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
}

