digraph "CFG forkotlin.time.Duration.equals\-impl(JLjava\/lang\/Object;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY]) kotlin.time.Duration \l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0006 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0007: CHECK_CAST (r0 I:kotlin.time.Duration) = (kotlin.time.Duration) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r2 I:long) = (r0 I:kotlin.time.Duration) type: VIRTUAL call: kotlin.time.Duration.unbox\-impl():long A[MD:():long (m)]\l0x000d: CMP_L  (r0 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0012 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|RETURN\l|0x0011: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|RETURN\l|0x0012: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0013: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean kotlin.time.Duration.equals\-impl((r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:17:0x0011 \-\> B:11:?, CROSS_EDGE: B:19:0x0013 \-\> B:11:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_11;
}

