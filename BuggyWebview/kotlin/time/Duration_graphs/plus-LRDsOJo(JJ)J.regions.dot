digraph "CFG forkotlin.time.Duration.plus\-LRDsOJo(JJ)J" {
subgraph cluster_Region_2070865584 {
label = "R(1:(1:(2:(1:10)|(1:8)))(1:(1:13)(1:(2:16|(2:(2:18|19)|(2:20|21)))(1:(1:25)(1:27))))) | DECL_VAR: long null, long null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1513646056 {
label = "IF [B:32:0x0005] THEN: R(1:(2:(1:10)|(1:8))) ELSE: R(1:(1:13)(1:(2:16|(2:(2:18|19)|(2:20|21)))(1:(1:25)(1:27))))";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0005|if (m1491isInfiniteimpl(r10) != false) goto L3\l}"];
subgraph cluster_Region_1949539018 {
label = "R(1:(2:(1:10)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1133127835 {
label = "R(2:(1:10)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1339886908 {
label = "IF [B:34:0x000b, B:36:0x0013] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x000b|if (m1488isFiniteimpl(r12) != false) goto L10\l}"];
Node_36 [shape=record,label="{36\:\ 0x0013|ADDED_TO_REGION\l|if ((r10 ^ r12) \>= 0) goto L10\l}"];
subgraph cluster_Region_1455633416 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x001e|RETURN\l|return r10\l}"];
}
}
subgraph cluster_Region_1053688272 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001d|throw new java.lang.IllegalArgumentException(\"Summing infinite durations of different signs yields an undefined result.\")\l}"];
}
}
}
subgraph cluster_Region_747780194 {
label = "R(1:(1:13)(1:(2:16|(2:(2:18|19)|(2:20|21)))(1:(1:25)(1:27)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_184644641 {
label = "IF [B:42:0x0023] THEN: R(1:13) ELSE: R(1:(2:16|(2:(2:18|19)|(2:20|21)))(1:(1:25)(1:27))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0023|if (m1491isInfiniteimpl(r12) == true) goto L13\l}"];
subgraph cluster_Region_1152217661 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0025|RETURN\l|return r12\l}"];
}
subgraph cluster_Region_170081273 {
label = "R(1:(2:16|(2:(2:18|19)|(2:20|21)))(1:(1:25)(1:27)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_927941623 {
label = "IF [B:45:0x002f] THEN: R(2:16|(2:(2:18|19)|(2:20|21))) ELSE: R(1:(1:25)(1:27))";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x002f|if ((((int) r10) & 1) == (((int) r12) & 1)) goto L16\l}"];
subgraph cluster_Region_719107918 {
label = "R(2:16|(2:(2:18|19)|(2:20|21)))";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x0031|long long r0 = m1486getValueimpl(r10) + m1486getValueimpl(r12)\l}"];
subgraph cluster_Region_930060611 {
label = "R(2:(2:18|19)|(2:20|21))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_410790153 {
label = "IF [B:47:0x003f] THEN: R(2:18|19) ELSE: null";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x003f|if (m1490isInNanosimpl(r10) != false) goto L18\l}"];
subgraph cluster_Region_972500023 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0041|long r2 = kotlin.time.DurationKt.durationOfNanosNormalized(r0)\l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_846487262 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x0046|long r2 = kotlin.time.DurationKt.durationOfMillisNormalized(r0)\l}"];
Node_56 [shape=record,label="{56\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
}
}
}
subgraph cluster_Region_194196748 {
label = "R(1:(1:25)(1:27)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1183747954 {
label = "IF [B:51:0x004f] THEN: R(1:25) ELSE: R(1:27) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x004f|if (m1489isInMillisimpl(r10) != false) goto L24\l}"];
subgraph cluster_Region_232829793 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lRETURN\l|return m1455addValuesMixedRangesUwyO8pc(r10, m1486getValueimpl(r10), m1486getValueimpl(r12))\l}"];
}
subgraph cluster_Region_1957554101 {
label = "R(1:27)";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x006c|RETURN\lORIG_RETURN\l|return m1455addValuesMixedRangesUwyO8pc(r10, m1486getValueimpl(r12), m1486getValueimpl(r10))\l}"];
}
}
}
}
}
}
}
}
}
Node_29 [shape=record,color=red,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0001}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0007}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x000d}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0016}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x001f}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x0026}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x004b}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0051}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x005f}"];
MethodNode[shape=record,label="{public static final long kotlin.time.Duration.plus\-LRDsOJo((r10v0 'arg0' long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'other' long A[D('other' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x001e \-\> B:30:?, CROSS_EDGE: B:34:0x000b \-\> B:40:0x001e, CROSS_EDGE: B:43:0x0025 \-\> B:30:?, CROSS_EDGE: B:54:0x006c \-\> B:30:?, CROSS_EDGE: B:49:0x0046 \-\> B:54:0x006c, CROSS_EDGE: B:52:0x0051 \-\> B:54:0x006c, CROSS_EDGE: B:53:0x005f \-\> B:54:0x006c\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_29;Node_32 -> Node_33;
Node_32 -> Node_41[style=dashed];
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_36 -> Node_38[style=dashed];
Node_36 -> Node_40;
Node_40 -> Node_30;
Node_39 -> Node_30;
Node_42 -> Node_43;
Node_42 -> Node_44[style=dashed];
Node_43 -> Node_30;
Node_45 -> Node_46;
Node_45 -> Node_50[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_47 -> Node_49[style=dashed];
Node_48 -> Node_55;
Node_55 -> Node_30;
Node_49 -> Node_56;
Node_56 -> Node_30;
Node_51 -> Node_52;
Node_51 -> Node_53[style=dashed];
Node_57 -> Node_30;
Node_54 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_35 -> Node_36;
Node_38 -> Node_39;
Node_41 -> Node_42;
Node_44 -> Node_45;
Node_50 -> Node_51;
Node_52 -> Node_57;
Node_53 -> Node_54;
}

