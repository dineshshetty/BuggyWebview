digraph "CFG forkotlin.time.Duration.appendFractional\-impl(JLjava\/lang\/StringBuilder;IIILjava\/lang\/String;Z)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('$this$appendFractional' java.lang.StringBuilder)])  (LINE:986)\l0x0001: INVOKE  (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder)]), (r16 I:int A[D('whole' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: IF  (r17 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fractional' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x005a  (LINE:987)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char])  (LINE:988)\l0x0008: INVOKE  (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x000b: INVOKE  (r1 I:java.lang.String) = (r17 I:int A[D('fractional' int)]) type: STATIC call: java.lang.String.valueOf(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:989)\l0x000f: CONST  (r2 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char]) \l0x0011: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fractionalSize' int)]) \l0x0013: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r3 I:int), (r2 I:char) type: STATIC call: kotlin.text.StringsKt.padStart(java.lang.String, int, char):java.lang.String A[MD:(java.lang.String, int, char):java.lang.String (m)]\l0x0017: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('fracString' java.lang.String)])  (LINE:990)\l0x0018: CHECK_CAST (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:??[OBJECT, ARRAY]) \l0x001a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r6 I:int) = (r4 I:java.lang.CharSequence A[D('$this$indexOfLast$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1471)\l0x001f: CONST  (r7 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0020: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x0021: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0022: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|0x0023: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:38:0x0038 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|LOOP_START\lLOOP:0: B:30:0x0025\-\>B:36:0x0035\l|0x0025: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x0027: INVOKE  (r11 I:char) = (r4 I:java.lang.CharSequence A[D('$this$indexOfLast$iv' java.lang.CharSequence)]), (r10 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1472)\l0x002b: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|0x002c: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030  (LINE:990)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|0x002e: CONST  (r11 I:??[boolean, int, float, short, byte, char] A[D('it' char)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|0x0031: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0035 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0035|LOOP_END\lLOOP:0: B:30:0x0025\-\>B:36:0x0035\l|0x0035: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x0025  (LINE:1471)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0038|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0033|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0033|0x0033: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)])  (LINE:1473)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|0x0030: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' char)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0038|0x0038: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int)  (LINE:990)\l0x003a: CONST_STR  (r2 I:java.lang.String) =  \"this.append(value, startIndex, endIndex)\"  (LINE:992)\l0x003c: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x003d|0x003d: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isoZeroes' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x004b \l}"];
Node_40 [shape=record,label="{40\:\ 0x003f|0x003f: IF  (r7 I:??[int, byte, short, char] A[D('nonZeroDigits' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:42:0x004b \l}"];
Node_41 [shape=record,label="{41\:\ 0x0041|0x0041: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('fracString' java.lang.String)]) \l0x0042: CHECK_CAST (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:??[OBJECT, ARRAY]) \l0x0044: INVOKE  \l  (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder)])\l  (r4 I:java.lang.CharSequence)\l  (r9 I:int)\l  (r7 I:int A[D('nonZeroDigits' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x0047: INVOKE  (r15 I:java.lang.Object A[D('$this$appendFractional' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x005c|0x005c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('unit' java.lang.String)])  (LINE:996)\l0x005e: INVOKE  (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder)]), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0061|RETURN\l|0x0061: RETURN    (LINE:997)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x004b|0x004b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('fracString' java.lang.String)])  (LINE:993)\l0x004c: CHECK_CAST (r5 I:java.lang.CharSequence) = (java.lang.CharSequence) (r5 I:??[OBJECT, ARRAY]) \l0x004e: ARITH  (r6 I:int) = (r7 I:int A[D('nonZeroDigits' int)]) + (2 int) \l0x0050: ARITH  (r6 I:int) = (r6 I:int) \/ (r4 I:int) \l0x0051: ARITH  (r6 I:int) = (r6 I:int) * (3 int) \l0x0053: INVOKE  \l  (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder)])\l  (r5 I:java.lang.CharSequence)\l  (r9 I:int)\l  (r6 I:int)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x0056: INVOKE  (r15 I:java.lang.Object A[D('$this$appendFractional' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x005a|0x005a: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fractionalSize' int)])  (LINE:987)\l}"];
MethodNode[shape=record,label="{private static final void kotlin.time.Duration.appendFractional\-impl((r13 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:java.lang.StringBuilder A[D('$this$appendFractional' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('whole' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('fractional' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('fractionalSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:java.lang.String A[D('unit' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[D('isoZeroes' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x004b \-\> B:44:0x005c, CROSS_EDGE: B:39:0x003d \-\> B:42:0x004b, BACK_EDGE: B:36:0x0035 \-\> B:30:0x0025, CROSS_EDGE: B:36:0x0035 \-\> B:38:0x0038, CROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0023 \-\> B:38:0x0038, CROSS_EDGE: B:43:0x005a \-\> B:44:0x005c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002b\-0x0031: r11 'it' C\l  0x002c\-0x0031: r12 '$i$a$\-indexOfLast\-Duration$appendFractional$nonZeroDigits$1' I\l  0x0026\-0x0037: r10 'index$iv' I\l  0x001a\-0x0038: r4 '$this$indexOfLast$iv' Ljava\/lang\/CharSequence;\l  0x001b\-0x0038: r5 '$i$f$indexOfLast' I\l  0x0017\-0x005a: r1 'fracString' Ljava\/lang\/String;\l  0x0039\-0x005a: r7 'nonZeroDigits' I\l  \-1 \-0x0061: r13 'arg0' J\l  \-1 \-0x0061: r15 '$this$appendFractional' Ljava\/lang\/StringBuilder;\l  \-1 \-0x0061: r16 'whole' I\l  \-1 \-0x0061: r17 'fractional' I\l  \-1 \-0x0061: r18 'fractionalSize' I\l  \-1 \-0x0061: r19 'unit' Ljava\/lang\/String;\l  \-1 \-0x0061: r20 'isoZeroes' Z\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_43;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_46[style=dashed];
Node_36 -> Node_30;
Node_36 -> Node_47[style=dashed];
Node_47 -> Node_38;
Node_46 -> Node_35;
Node_35 -> Node_38;
Node_33 -> Node_34;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_42 -> Node_44;
Node_43 -> Node_44;
}

