digraph "CFG forkotlin.time.Duration.times\-UwyO8pc(JI)J" {
Node_47 [shape=record,label="{47\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scale' int)])  (LINE:509)\l0x0002: INVOKE  (r1 I:boolean) = (r20 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInfinite\-impl(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x001d \l}"];
Node_51 [shape=record,label="{51\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0015  (LINE:511)\l}"];
Node_52 [shape=record,label="{52\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:54:0x0010  (LINE:512)\l}"];
Node_53 [shape=record,label="{53\:\ 0x000d|0x000d: MOVE  (r1 I:??[long, double]) = (r20 I:??[long, double] A[D('arg0' long)]) \l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|0x0014: RETURN  (r1 I:long) A[SYNTHETIC] (LINE:510)\l}"];
Node_48 [shape=record,label="{48\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0010|0x0010: INVOKE  (r1 I:long) = (r20 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.unaryMinus\-UwyO8pc(long):long A[MD:(long):long (m)] (LINE:513)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0014|RETURN\lORIG_RETURN\l|0x0014: RETURN  (r1 I:long)  (LINE:510)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0015|0x0015: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:511)\l0x0017: CONST_STR  (r2 I:java.lang.String) =  \"Multiplying infinite duration by zero yields an undefined result.\" \l0x0019: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x001c|0x001c: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_58 [shape=record,label="{58\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0022  (LINE:516)\l}"];
Node_59 [shape=record,label="{59\:\ 0x001f|0x001f: SGET  (r1 I:long) =  kotlin.time.Duration.ZERO long \l}"];
Node_60 [shape=record,label="{60\:\ 0x0021|RETURN\l|0x0021: RETURN  (r1 I:long) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0022|0x0022: INVOKE  (r1 I:long) = (r20 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)] (LINE:518)\l0x0026: CAST (r3 I:long) = (long) (r0 I:int)  (LINE:519)\l0x0027: ARITH  (r3 I:long) = (r3 I:long) * (r1 I:long A[D('value' long)]) \l0x0029: INVOKE  (r5 I:boolean) = (r20 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInNanos\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:520)\l}"];
Node_62 [shape=record,label="{62\:\ 0x002d|0x002d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x00a9 \l}"];
Node_63 [shape=record,label="{63\:\ 0x002f|0x002f: NEW_INSTANCE  (r5 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:521)\l0x0031: CONST  (r10 I:??[long, double]) = (\-2147483647(0xffffffff80000001, double:NaN) ??[long, double]) \l0x0034: CONST  (r12 I:??[long, double]) = (2147483647(0x7fffffff, double:1.060997895E\-314) ??[long, double]) \l0x0037: INVOKE  (r5 I:kotlin.ranges.LongRange), (r10 I:long), (r12 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x003a: INVOKE  (r5 I:boolean) = (r5 I:kotlin.ranges.LongRange), (r1 I:long A[D('value' long)]) type: VIRTUAL call: kotlin.ranges.LongRange.contains(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_64 [shape=record,label="{64\:\ 0x003e|0x003e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0046 \l}"];
Node_65 [shape=record,label="{65\:\ 0x0040|0x0040: INVOKE  (r5 I:long) = (r3 I:long A[D('result' long)]) type: STATIC call: kotlin.time.DurationKt.access$durationOfNanos(long):long A[MD:(long):long (m)] (LINE:523)\l}"];
Node_87 [shape=record,label="{87\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0046|0x0046: CAST (r10 I:long) = (long) (r0 I:int)  (LINE:525)\l0x0047: ARITH  (r10 I:long) = (r3 I:long A[D('result' long)]) \/ (r10 I:long) \l0x0049: CMP_L  (r5 I:int) = (r10 I:long), (r1 I:long A[D('value' long)]) \l}"];
Node_67 [shape=record,label="{67\:\ 0x004b|0x004b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0053 \l}"];
Node_68 [shape=record,label="{68\:\ 0x004d|0x004d: INVOKE  (r5 I:long) = (r3 I:long A[D('result' long)]) type: STATIC call: kotlin.time.DurationKt.access$durationOfNanosNormalized(long):long A[MD:(long):long (m)] (LINE:526)\l}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0053|0x0053: INVOKE  (r10 I:long) = (r1 I:long A[D('value' long)]) type: STATIC call: kotlin.time.DurationKt.access$nanosToMillis(long):long A[MD:(long):long (m)] (LINE:528)\l0x0057: INVOKE  (r12 I:long) = (r10 I:long A[D('millis' long)]) type: STATIC call: kotlin.time.DurationKt.access$millisToNanos(long):long A[MD:(long):long (m)] (LINE:529)\l0x005b: ARITH  (r12 I:long) = (r1 I:long A[D('value' long)]) \- (r12 I:long) \l0x005d: CAST (r14 I:long) = (long) (r0 I:int)  (LINE:530)\l0x005e: ARITH  (r14 I:long) = (r14 I:long) * (r10 I:long A[D('millis' long)]) \l0x0060: CAST (r6 I:long) = (long) (r0 I:int)  (LINE:531)\l0x0061: ARITH  (r6 I:long) = (r6 I:long) * (r12 I:long A[D('remNanos' long)]) \l0x0063: INVOKE  (r5 I:long) = (r6 I:long) type: STATIC call: kotlin.time.DurationKt.access$nanosToMillis(long):long A[MD:(long):long (m)]\l0x0067: ARITH  (r5 I:long) = (r5 I:long) + (r14 I:long A[D('resultMillis' long)]) \l0x0068: CAST (r8 I:long) = (long) (r0 I:int)  (LINE:532)\l0x0069: ARITH  (r7 I:long) = (r14 I:long A[D('resultMillis' long)]) \/ (r8 I:long) \l0x006b: CMP_L  (r9 I:int) = (r7 I:long), (r10 I:long A[D('millis' long)]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x006d|0x006d: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0094 \l}"];
Node_71 [shape=record,label="{71\:\ 0x006f|0x006f: ARITH  (r7 I:long) = (r5 I:long A[D('totalMillis' long)]) ^ (r14 I:long A[D('resultMillis' long)]) \l0x0071: CONST  (r18 I:??[long, double]) = (0 ??[long, double]) \l0x0073: CMP_L  (r9 I:int) = (r7 I:long), (r18 I:long) \l}"];
Node_72 [shape=record,label="{72\:\ 0x0075|0x0075: IF  (r9 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:74:0x0094 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0077|0x0077: NEW_INSTANCE  (r7 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:533)\l0x0079: MOVE  (r16 I:??[long, double]) = (r10 I:??[long, double] A[D('millis' long)]) \l0x007b: CONST  (r8 I:??[long, double]) = (4611686018427387903(0x3fffffffffffffff, double:1.9999999999999998) ??[long, double]) \l0x0080: CONST  (r10 I:??[long, double] A[D('millis' long)]) = (\-4611686018427387903(0xc000000000000001, double:\-2.0000000000000004) ??[long, double]) \l0x0085: INVOKE  (r7 I:kotlin.ranges.LongRange), (r10 I:long A[D('millis' long)]), (r8 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x0088: CHECK_CAST (r7 I:kotlin.ranges.ClosedRange) = (kotlin.ranges.ClosedRange) (r7 I:??[OBJECT, ARRAY]) \l0x008a: INVOKE  (r7 I:long) = (r5 I:long A[D('totalMillis' long)]), (r7 I:kotlin.ranges.ClosedRange) type: STATIC call: kotlin.ranges.RangesKt.coerceIn(long, kotlin.ranges.ClosedRange):long A[MD:(long, kotlin.ranges.ClosedRange\<java.lang.Long\>):long (m)]\l0x008e: INVOKE  (r7 I:long) = (r7 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfMillis(long):long A[MD:(long):long (m)]\l0x0092: MOVE  (r5 I:??[long, double] A[D('totalMillis' long)]) = (r7 I:??[long, double]) \l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0094|0x0094: MOVE  (r16 I:??[long, double] A[D('millis' long)]) = (r10 I:??[long, double] A[D('millis' long)])  (LINE:532)\l0x0096: INVOKE  (r7 I:int) = (r1 I:long A[D('value' long)]) type: STATIC call: kotlin.math.MathKt.getSign(long):int A[MD:(long):int (m)] (LINE:535)\l0x009a: INVOKE  (r8 I:int) = (r22 I:int A[D('scale' int)]) type: STATIC call: kotlin.math.MathKt.getSign(int):int A[MD:(int):int (m)]\l0x009e: ARITH  (r7 I:int) = (r7 I:int) * (r8 I:int) \l}"];
Node_75 [shape=record,label="{75\:\ 0x00a0|0x00a0: IF  (r7 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:77:0x00a6 \l}"];
Node_76 [shape=record,label="{76\:\ 0x00a2|0x00a2: SGET  (r7 I:long) =  kotlin.time.Duration.INFINITE long \l0x00a4: MOVE  (r5 I:??[long, double] A[D('totalMillis' long)]) = (r7 I:??[long, double]) \l}"];
Node_90 [shape=record,label="{90\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_77 [shape=record,label="{77\:\ 0x00a6|0x00a6: SGET  (r5 I:long A[D('totalMillis' long)]) =  kotlin.time.Duration.NEG_INFINITE long \l}"];
Node_91 [shape=record,label="{91\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_78 [shape=record,label="{78\:\ 0x00a9|0x00a9: CAST (r5 I:long) = (long) (r0 I:int)  (LINE:540)\l0x00aa: ARITH  (r5 I:long) = (r3 I:long A[D('result' long)]) \/ (r5 I:long) \l0x00ac: CMP_L  (r7 I:int) = (r5 I:long), (r1 I:long A[D('value' long)]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x00ae|0x00ae: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x00ca \l}"];
Node_80 [shape=record,label="{80\:\ 0x00b0|0x00b0: NEW_INSTANCE  (r5 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:541)\l0x00b2: CONST  (r6 I:??[long, double]) = (4611686018427387903(0x3fffffffffffffff, double:1.9999999999999998) ??[long, double]) \l0x00b7: CONST  (r8 I:??[long, double]) = (\-4611686018427387903(0xc000000000000001, double:\-2.0000000000000004) ??[long, double]) \l0x00bc: INVOKE  (r5 I:kotlin.ranges.LongRange), (r8 I:long), (r6 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x00bf: CHECK_CAST (r5 I:kotlin.ranges.ClosedRange) = (kotlin.ranges.ClosedRange) (r5 I:??[OBJECT, ARRAY]) \l0x00c1: INVOKE  (r5 I:long) = (r3 I:long A[D('result' long)]), (r5 I:kotlin.ranges.ClosedRange) type: STATIC call: kotlin.ranges.RangesKt.coerceIn(long, kotlin.ranges.ClosedRange):long A[MD:(long, kotlin.ranges.ClosedRange\<java.lang.Long\>):long (m)]\l0x00c5: INVOKE  (r5 I:long) = (r5 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfMillis(long):long A[MD:(long):long (m)]\l}"];
Node_92 [shape=record,label="{92\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_81 [shape=record,label="{81\:\ 0x00ca|0x00ca: INVOKE  (r5 I:int) = (r1 I:long A[D('value' long)]) type: STATIC call: kotlin.math.MathKt.getSign(long):int A[MD:(long):int (m)] (LINE:543)\l0x00ce: INVOKE  (r6 I:int) = (r22 I:int A[D('scale' int)]) type: STATIC call: kotlin.math.MathKt.getSign(int):int A[MD:(int):int (m)]\l0x00d2: ARITH  (r5 I:int) = (r5 I:int) * (r6 I:int) \l}"];
Node_82 [shape=record,label="{82\:\ 0x00d4|0x00d4: IF  (r5 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:84:0x00d9 \l}"];
Node_83 [shape=record,label="{83\:\ 0x00d6|0x00d6: SGET  (r5 I:long) =  kotlin.time.Duration.INFINITE long \l}"];
Node_93 [shape=record,label="{93\:\ ?|SYNTHETIC\lRETURN\l|0x00db: RETURN  (r5 I:long) A[SYNTHETIC] (LINE:520)\l}"];
Node_84 [shape=record,label="{84\:\ 0x00d9|0x00d9: SGET  (r5 I:long) =  kotlin.time.Duration.NEG_INFINITE long \l}"];
Node_85 [shape=record,label="{85\:\ 0x00db|RETURN\lORIG_RETURN\l|0x00db: RETURN  (r5 I:long)  (LINE:520)\l}"];
MethodNode[shape=record,label="{public static final long kotlin.time.Duration.times\-UwyO8pc((r20 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('scale' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:54:0x0010 \-\> B:55:0x0014, CROSS_EDGE: B:57:0x001c \-\> B:48:?, CROSS_EDGE: B:60:0x0021 \-\> B:48:?, CROSS_EDGE: B:85:0x00db \-\> B:48:?, CROSS_EDGE: B:68:0x004d \-\> B:85:0x00db, CROSS_EDGE: B:73:0x0077 \-\> B:85:0x00db, CROSS_EDGE: B:76:0x00a2 \-\> B:85:0x00db, CROSS_EDGE: B:77:0x00a6 \-\> B:85:0x00db, CROSS_EDGE: B:70:0x006d \-\> B:74:0x0094, CROSS_EDGE: B:80:0x00b0 \-\> B:85:0x00db, CROSS_EDGE: B:83:0x00d6 \-\> B:85:0x00db, CROSS_EDGE: B:84:0x00d9 \-\> B:85:0x00db\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0057\-0x0085: r10 'millis' J\l  0x0085\-0x0094: r16 'millis' J\l  0x0094\-0x0096: r10 'millis' J\l  0x0068\-0x00a8: r5 'totalMillis' J\l  0x005d\-0x00a8: r12 'remNanos' J\l  0x0060\-0x00a8: r14 'resultMillis' J\l  0x0096\-0x00a8: r16 'millis' J\l  0x0026\-0x00db: r1 'value' J\l  0x0029\-0x00db: r3 'result' J\l  \-1 \-0x00db: r20 'arg0' J\l  \-1 \-0x00db: r22 'scale' I\l}"];
MethodNode -> Node_47;Node_47 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_58;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_56;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_86;
Node_86 -> Node_48;
Node_54 -> Node_55;
Node_55 -> Node_48;
Node_56 -> Node_57;
Node_57 -> Node_48;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_61;
Node_59 -> Node_60;
Node_60 -> Node_48;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_78;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_87;
Node_87 -> Node_48;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_88;
Node_88 -> Node_48;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_74;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_73 -> Node_89;
Node_89 -> Node_48;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_76 -> Node_90;
Node_90 -> Node_48;
Node_77 -> Node_91;
Node_91 -> Node_48;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_81;
Node_80 -> Node_92;
Node_92 -> Node_48;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_93;
Node_93 -> Node_48;
Node_84 -> Node_85;
Node_85 -> Node_48;
}

