digraph "CFG forkotlin.time.Duration.toString\-impl(JLkotlin\/time\/DurationUnit;I)Ljava\/lang\/String;" {
subgraph cluster_Region_263885859 {
label = "R(2:1|(2:(2:12|13)|(2:5|(2:(1:8)|(2:10|11)))))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"unit\")\l}"];
subgraph cluster_Region_1588540014 {
label = "R(2:(2:12|13)|(2:5|(2:(1:8)|(2:10|11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1333530505 {
label = "IF [B:21:0x000a] THEN: R(2:12|13) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7 \>= 0) == false) goto L12\l}"];
subgraph cluster_Region_1752597292 {
label = "R(2:12|13)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0039}"];
Node_29 [shape=record,label="{29\:\ 0x0054|throw new java.lang.IllegalArgumentException((\"decimals must be not negative, but was \" + r7).toString())\l}"];
}
}
subgraph cluster_Region_1411951468 {
label = "R(2:5|(2:(1:8)|(2:10|11)))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x000c|double double r0 = m1502toDoubleimpl(r4, r6)\l}"];
subgraph cluster_Region_867568013 {
label = "R(2:(1:8)|(2:10|11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_756535206 {
label = "IF [B:23:0x0014] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0014|if (java.lang.Double.isInfinite(r0) == true) goto L7\l}"];
subgraph cluster_Region_159986351 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x001a|RETURN\l|return java.lang.String.valueOf(r0)\l}"];
}
}
subgraph cluster_Region_653867377 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x001b}"];
Node_27 [shape=record,label="{27\:\ 0x0038|RETURN\l|return kotlin.time.DurationJvm.formatToExactDecimals(r0, kotlin.ranges.RangesKt.coerceAtMost(r7, 12)) + kotlin.time.DurationUnitKt.shortName(r6)\l}"];
}
}
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0005}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0007}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0016}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0009}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.time.Duration.toString\-impl((r4v0 'arg0' long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'unit' kotlin.time.DurationUnit A[D('unit' kotlin.time.DurationUnit), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'decimals' int A[D('decimals' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0038 \-\> B:16:?, CROSS_EDGE: B:29:0x0054 \-\> B:16:?, CROSS_EDGE: B:20:0x0009 \-\> B:21:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_17 -> Node_18;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_15 -> Node_17;
Node_18 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_24 -> Node_25;
Node_20 -> Node_21;
}

