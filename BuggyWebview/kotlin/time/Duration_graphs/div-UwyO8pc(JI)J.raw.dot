digraph "CFG forkotlin.time.Duration.div\-UwyO8pc(JI)J" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scale' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x001d  (LINE:574)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0003|0x0003: INVOKE  (r0 I:boolean) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isPositive\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:576)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000c \l}"];
Node_32 [shape=record,label="{32\:\ 0x0009|0x0009: SGET  (r0 I:long) =  kotlin.time.Duration.INFINITE long \l}"];
Node_53 [shape=record,label="{53\:\ ?|SYNTHETIC\lRETURN\l|0x0014: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:575)\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isNegative\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:577)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0015 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0012|0x0012: SGET  (r0 I:long) =  kotlin.time.Duration.NEG_INFINITE long \l}"];
Node_36 [shape=record,label="{36\:\ 0x0014|RETURN\lORIG_RETURN\l|0x0014: RETURN  (r0 I:long)  (LINE:575)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:578)\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"Dividing zero duration by zero yields an undefined result.\" \l0x0019: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x001d|0x001d: INVOKE  (r0 I:boolean) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInNanos\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:581)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x002e \l}"];
Node_41 [shape=record,label="{41\:\ 0x0023|0x0023: INVOKE  (r0 I:long) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)] (LINE:582)\l0x0027: CAST (r2 I:long) = (long) (r9 I:int A[D('scale' int)]) \l0x0028: ARITH  (r0 I:long) = (r0 I:long) \/ (r2 I:long) \l0x0029: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfNanos(long):long A[MD:(long):long (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:long) \l}"];
Node_43 [shape=record,label="{43\:\ 0x002e|0x002e: INVOKE  (r0 I:boolean) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isInfinite\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:584)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0032|0x0032: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x003d \l}"];
Node_45 [shape=record,label="{45\:\ 0x0034|0x0034: INVOKE  (r0 I:int) = (r9 I:int A[D('scale' int)]) type: STATIC call: kotlin.math.MathKt.getSign(int):int A[MD:(int):int (m)] (LINE:585)\l0x0038: INVOKE  (r0 I:long) = (r7 I:long A[D('arg0' long)]), (r0 I:int) type: STATIC call: kotlin.time.Duration.times\-UwyO8pc(long, int):long A[MD:(long, int):long (m)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x003c|RETURN\l|0x003c: RETURN  (r0 I:long) \l}"];
Node_47 [shape=record,label="{47\:\ 0x003d|0x003d: INVOKE  (r0 I:long) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)] (LINE:587)\l0x0041: CAST (r2 I:long) = (long) (r9 I:int A[D('scale' int)]) \l0x0042: ARITH  (r0 I:long) = (r0 I:long) \/ (r2 I:long) \l0x0043: NEW_INSTANCE  (r2 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:589)\l0x0045: CONST  (r3 I:??[long, double]) = (\-4611686018426(0xfffffbce4217d286, double:NaN) ??[long, double]) \l0x004a: CONST  (r5 I:??[long, double]) = (4611686018426(0x431bde82d7a, double:2.2784756311107E\-311) ??[long, double]) \l0x004f: INVOKE  (r2 I:kotlin.ranges.LongRange), (r3 I:long), (r5 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x0052: INVOKE  (r2 I:boolean) = (r2 I:kotlin.ranges.LongRange), (r0 I:long A[D('result' long)]) type: VIRTUAL call: kotlin.ranges.LongRange.contains(long):boolean A[MD:(long):boolean (m)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0056|0x0056: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0070 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0058|0x0058: INVOKE  (r2 I:long) = (r7 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.getValue\-impl(long):long A[MD:(long):long (m)] (LINE:590)\l0x005c: CAST (r4 I:long) = (long) (r9 I:int A[D('scale' int)]) \l0x005d: ARITH  (r4 I:long) = (r4 I:long) * (r0 I:long A[D('result' long)]) \l0x005f: ARITH  (r2 I:long) = (r2 I:long) \- (r4 I:long) \l0x0060: INVOKE  (r2 I:long) = (r2 I:long) type: STATIC call: kotlin.time.DurationKt.access$millisToNanos(long):long A[MD:(long):long (m)]\l0x0064: CAST (r4 I:long) = (long) (r9 I:int A[D('scale' int)]) \l0x0065: ARITH  (r2 I:long) = (r2 I:long) \/ (r4 I:long) \l0x0066: INVOKE  (r4 I:long) = (r0 I:long A[D('result' long)]) type: STATIC call: kotlin.time.DurationKt.access$millisToNanos(long):long A[MD:(long):long (m)] (LINE:591)\l0x006a: ARITH  (r4 I:long) = (r4 I:long) + (r2 I:long A[D('rem' long)]) \l0x006b: INVOKE  (r4 I:long) = (r4 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfNanos(long):long A[MD:(long):long (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x006f|RETURN\l|0x006f: RETURN  (r4 I:long) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0070|0x0070: INVOKE  (r2 I:long) = (r0 I:long A[D('result' long)]) type: STATIC call: kotlin.time.DurationKt.access$durationOfMillis(long):long A[MD:(long):long (m)] (LINE:593)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0074|RETURN\l|0x0074: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.time.Duration.div\-UwyO8pc((r7 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('scale' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0012 \-\> B:36:0x0014, CROSS_EDGE: B:38:0x001c \-\> B:28:?, CROSS_EDGE: B:42:0x002d \-\> B:28:?, CROSS_EDGE: B:46:0x003c \-\> B:28:?, CROSS_EDGE: B:50:0x006f \-\> B:28:?, CROSS_EDGE: B:52:0x0074 \-\> B:28:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0066\-0x0070: r2 'rem' J\l  0x0043\-0x0074: r0 'result' J\l  \-1 \-0x0074: r7 'arg0' J\l  \-1 \-0x0074: r9 'scale' I\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_39;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_53;
Node_53 -> Node_28;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_28;
Node_37 -> Node_38;
Node_38 -> Node_28;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_28;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_47;
Node_45 -> Node_46;
Node_46 -> Node_28;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_51;
Node_49 -> Node_50;
Node_50 -> Node_28;
Node_51 -> Node_52;
Node_52 -> Node_28;
}

