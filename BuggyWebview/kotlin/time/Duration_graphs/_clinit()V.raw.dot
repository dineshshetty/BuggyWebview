digraph "CFG forkotlin.time.Duration.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.time.Duration$Companion) =  kotlin.time.Duration$Companion \l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:kotlin.time.Duration$Companion), (r1 I:kotlin.jvm.internal.DefaultConstructorMarker) type: DIRECT call: kotlin.time.Duration.Companion.\<init\>(kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0006: SPUT  (r0 I:kotlin.time.Duration$Companion) kotlin.time.Duration.Companion kotlin.time.Duration$Companion \l0x0008: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:56)\l0x000a: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.time.Duration.constructor\-impl(long):long A[MD:(long):long (m)]\l0x000e: SPUT  (r0 I:long) kotlin.time.Duration.ZERO long \l0x0010: CONST  (r0 I:??[long, double]) = (4611686018427387903(0x3fffffffffffffff, double:1.9999999999999998) ??[long, double])  (LINE:59)\l0x0015: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfMillis(long):long A[MD:(long):long (m)]\l0x0019: SPUT  (r0 I:long) kotlin.time.Duration.INFINITE long \l0x001b: CONST  (r0 I:??[long, double]) = (\-4611686018427387903(0xc000000000000001, double:\-2.0000000000000004) ??[long, double])  (LINE:60)\l0x0020: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.time.DurationKt.access$durationOfMillis(long):long A[MD:(long):long (m)]\l0x0024: SPUT  (r0 I:long) kotlin.time.Duration.NEG_INFINITE long \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|RETURN\l|0x0026: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.time.Duration.\<clinit\>()  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

