digraph "CFG forkotlin.time.Duration.constructor\-impl(J)J" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000}"];
Node_24 [shape=record,label="{24\:\ 0x0004|if (kotlin.time.DurationJvm.getDurationAssertionsEnabled() == false) goto L18\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006}"];
Node_26 [shape=record,label="{26\:\ 0x000a|if (m1490isInNanosimpl(r5) == false) goto L10\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c}"];
Node_28 [shape=record,label="{28\:\ 0x0023|if (new kotlin.ranges.LongRange(\-4611686018426999999L, kotlin.time.DurationKt.MAX_NANOS).contains(m1486getValueimpl(r5)) == false) goto L7\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(m1486getValueimpl(r5))\lr1.append(\" ns is out of nanoseconds range\")\l}"];
Node_31 [shape=record,label="{31\:\ 0x0041|throw new java.lang.AssertionError(r1.toString())\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0042}"];
Node_33 [shape=record,label="{33\:\ 0x0059|if (new kotlin.ranges.LongRange(\-4611686018427387903L, kotlin.time.DurationKt.MAX_MILLIS).contains(m1486getValueimpl(r5)) == false) goto L16\l}"];
Node_34 [shape=record,label="{34\:\ 0x005b}"];
Node_35 [shape=record,label="{35\:\ 0x0072|if (new kotlin.ranges.LongRange(\-4611686018426L, 4611686018426L).contains(m1486getValueimpl(r5)) != false) goto L14\l}"];
Node_37 [shape=record,label="{37\:\ 0x0075|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(m1486getValueimpl(r5))\lr1.append(\" ms is denormalized\")\l}"];
Node_38 [shape=record,label="{38\:\ 0x008f|throw new java.lang.AssertionError(r1.toString())\l}"];
Node_39 [shape=record,label="{39\:\ 0x0090|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(m1486getValueimpl(r5))\lr1.append(\" ms is out of milliseconds range\")\l}"];
Node_40 [shape=record,label="{40\:\ 0x00aa|throw new java.lang.AssertionError(r1.toString())\l}"];
Node_41 [shape=record,label="{41\:\ 0x00ab|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public static long kotlin.time.Duration.constructor\-impl((r5v0 'rawValue' long A[D('rawValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x00ab \-\> B:22:?, CROSS_EDGE: B:38:0x008f \-\> B:22:?, CROSS_EDGE: B:35:0x0072 \-\> B:41:0x00ab, CROSS_EDGE: B:40:0x00aa \-\> B:22:?, CROSS_EDGE: B:24:0x0004 \-\> B:41:0x00ab\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_41;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_41[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_22;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_39;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_41[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_39 -> Node_40;
Node_40 -> Node_22;
Node_41 -> Node_22;
}

