digraph "CFG forkotlin.time.Duration.toIsoString\-impl(J)Ljava\/lang\/String;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\l}"];
Node_41 [shape=record,label="{41\:\ 0x000b|if (m1492isNegativeimpl(r27) == false) goto L4\l}"];
Node_42 [shape=record,label="{42\:\ 0x000d|r0.append('\-')\l}"];
Node_43 [shape=record,label="{43\:\ 0x0012|r0.append(\"PT\")\llong r11 = m1465getAbsoluteValueUwyO8pc(r27)\llong r1 = m1475getInWholeHoursimpl(r11)\lint r14 = m1481getMinutesComponentimpl(r11)\lint r15 = m1483getSecondsComponentimpl(r11)\lint r16 = m1482getNanosecondsComponentimpl(r11)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0037|if (m1491isInfiniteimpl(r27) == false) goto L34\l}"];
Node_45 [shape=record,label="{45\:\ 0x0039|r7 = 9999999999999L\l}"];
Node_47 [shape=record,label="{47\:\ 0x0041|PHI: r7 \l  PHI: (r7v1 'hours' long) = (r7v0 'hours' long), (r7v3 'hours' long) binds: [B:46:0x0040, B:45:0x0039] A[DONT_GENERATE, DONT_INLINE]\l|r3 = true\l}"];
Node_48 [shape=record,label="{48\:\ 0x0047|if ((r7 \> 0 ? 1 : (r7 == 0 ? 0 : \-1)) == 0) goto L33\l}"];
Node_49 [shape=record,label="{49\:\ 0x0049|r1 = true\l}"];
Node_51 [shape=record,label="{51\:\ 0x004c|PHI: r1 \l  PHI: (r1v5 boolean) = (r1v4 boolean), (r1v13 boolean) binds: [B:50:0x004b, B:49:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|r20 = r1\l}"];
Node_52 [shape=record,label="{52\:\ 0x004e|if (r15 != 0) goto L32\l}"];
Node_53 [shape=record,label="{53\:\ 0x0050|if (r16 == 0) goto L13\l}"];
Node_55 [shape=record,label="{55\:\ 0x0053|r1 = false\l}"];
Node_57 [shape=record,label="{57\:\ 0x0056|PHI: r1 \l  PHI: (r1v7 boolean) = (r1v6 boolean), (r1v12 boolean) binds: [B:56:0x0055, B:55:0x0053] A[DONT_GENERATE, DONT_INLINE]\l|r21 = r1\l}"];
Node_58 [shape=record,label="{58\:\ 0x0058|if (r14 != 0) goto L19\l}"];
Node_59 [shape=record,label="{59\:\ 0x005a|if (r21 == false) goto L18\l}"];
Node_60 [shape=record,label="{60\:\ 0x005c|if (r20 == false) goto L18\l}"];
Node_62 [shape=record,label="{62\:\ 0x005f|r3 = false\l}"];
Node_63 [shape=record,label="{63\:\ 0x0060|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v4 boolean), (r3v1 boolean) binds: [B:58:0x0058, B:62:0x005f, B:60:0x005c] A[DONT_GENERATE, DONT_INLINE]\l|r22 = r3\l}"];
Node_64 [shape=record,label="{64\:\ 0x0062|if (r20 == false) goto L22\l}"];
Node_65 [shape=record,label="{65\:\ 0x0064|r0.append(r7)\lr0.append('H')\l}"];
Node_66 [shape=record,label="{66\:\ 0x006c|if (r22 == false) goto L24\l}"];
Node_67 [shape=record,label="{67\:\ 0x006e|r0.append(r14)\lr0.append('M')\l}"];
Node_68 [shape=record,label="{68\:\ 0x0076|if (r21 != false) goto L31\l}"];
Node_69 [shape=record,label="{69\:\ 0x0078|if (r20 != false) goto L27\l}"];
Node_70 [shape=record,label="{70\:\ 0x007a|if (r22 != false) goto L27\l}"];
Node_72 [shape=record,label="{72\:\ 0x007d}"];
Node_74 [shape=record,label="{74\:\ 0x0095|java.lang.String r0 = r0.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"StringBuilder().apply(builderAction).toString()\")\l}"];
Node_75 [shape=record,label="{75\:\ 0x00a0|RETURN\l|return r0\l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0080|m1456appendFractionalimpl(r27, r0, r15, r16, 9, \"S\", true)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0055|r1 = true\l}"];
Node_50 [shape=record,label="{50\:\ 0x004b|r1 = false\l}"];
Node_46 [shape=record,label="{46\:\ 0x0040|r7 = r1\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.time.Duration.toIsoString\-impl((r27v0 'arg0' long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:73:0x0080 \-\> B:74:0x0095, CROSS_EDGE: B:69:0x0078 \-\> B:72:0x007d, CROSS_EDGE: B:68:0x0076 \-\> B:73:0x0080, CROSS_EDGE: B:66:0x006c \-\> B:68:0x0076, CROSS_EDGE: B:64:0x0062 \-\> B:66:0x006c, CROSS_EDGE: B:60:0x005c \-\> B:63:0x0060, CROSS_EDGE: B:59:0x005a \-\> B:62:0x005f, CROSS_EDGE: B:58:0x0058 \-\> B:63:0x0060, CROSS_EDGE: B:56:0x0055 \-\> B:57:0x0056, CROSS_EDGE: B:52:0x004e \-\> B:56:0x0055, CROSS_EDGE: B:50:0x004b \-\> B:51:0x004c, CROSS_EDGE: B:46:0x0040 \-\> B:47:0x0041, CROSS_EDGE: B:41:0x000b \-\> B:43:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_56;
Node_53 -> Node_55;
Node_53 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_63;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_62;
Node_60 -> Node_62;
Node_60 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_73;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_72;
Node_70 -> Node_72;
Node_70 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_39;
Node_73 -> Node_74;
Node_56 -> Node_57;
Node_50 -> Node_51;
Node_46 -> Node_47;
}

