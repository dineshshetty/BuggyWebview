digraph "CFG forkotlin.time.Duration.compareTo\-LRDsOJo(JJ)I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: ARITH  (r0 I:long) = (r5 I:long A[D('arg0' long)]) ^ (r7 I:long A[D('other' long)])  (LINE:636)\l0x0002: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:637)\l0x0004: CMP_L  (r4 I:int) = (r0 I:long A[D('compareBits' long)]), (r2 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:27:0x0021 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|0x0008: CAST (r2 I:int) = (int) (r0 I:long A[D('compareBits' long)]) \l0x0009: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:640)\l0x000f: CAST (r3 I:int) = (int) (r5 I:long A[D('arg0' long)])  (LINE:1468)\l0x0010: ARITH  (r2 I:??[int, boolean] A[D('$i$f$getUnitDiscriminator\-impl' int)]) = (r3 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char]) \l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:640)\l0x0013: CAST (r4 I:int) = (int) (r7 I:long A[D('other' long)])  (LINE:1468)\l0x0014: ARITH  (r3 I:??[int, boolean] A[D('$i$f$getUnitDiscriminator\-impl' int)]) = (r4 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char]) \l0x0016: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int A[D('$i$f$getUnitDiscriminator\-impl' int)])  (LINE:640)\l0x0017: INVOKE  (r3 I:boolean) = (r5 I:long A[D('arg0' long)]) type: STATIC call: kotlin.time.Duration.isNegative\-impl(long):boolean A[MD:(long):boolean (m)] (LINE:641)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|0x001b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001f \l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|0x001d: NEG  (r3 I:int) = (r2 I:int A[D('r' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r3 I:int) A[SYNTHETIC]\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|0x001f: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('r' int)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN  (r3 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: INVOKE  (r2 I:int) = (r5 I:long A[D('arg0' long)]), (r7 I:long A[D('other' long)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(long, long):int A[MD:(long, long):int (m)] (LINE:638)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static int kotlin.time.Duration.compareTo\-LRDsOJo((r5 I:long A[D('arg0' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[D('other' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001f \-\> B:26:0x0020, CROSS_EDGE: B:28:0x0025 \-\> B:16:?, CROSS_EDGE: B:18:0x0006 \-\> B:27:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0012: r2 '$i$f$getUnitDiscriminator\-impl' I\l  0x0013\-0x0016: r3 '$i$f$getUnitDiscriminator\-impl' I\l  0x0017\-0x0021: r2 'r' I\l  0x0002\-0x0025: r0 'compareBits' J\l  \-1 \-0x0025: r5 'arg0' J\l  \-1 \-0x0025: r7 'other' J\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_27[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_29;
Node_29 -> Node_16;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_27 -> Node_28;
Node_28 -> Node_16;
}

