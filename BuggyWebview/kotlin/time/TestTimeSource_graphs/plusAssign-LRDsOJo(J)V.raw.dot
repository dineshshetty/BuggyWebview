digraph "CFG forkotlin.time.TestTimeSource.plusAssign\-LRDsOJo(J)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.time.DurationUnit) = (r11 I:kotlin.time.TestTimeSource) type: VIRTUAL call: kotlin.time.TestTimeSource.getUnit():kotlin.time.DurationUnit A[MD:():kotlin.time.DurationUnit (m)] (LINE:91)\l0x0004: INVOKE  (r0 I:long) = (r12 I:long A[D('duration' long)]), (r0 I:kotlin.time.DurationUnit) type: STATIC call: kotlin.time.Duration.toLong\-impl(long, kotlin.time.DurationUnit):long A[MD:(long, kotlin.time.DurationUnit):long (m)]\l0x0008: CONST  (r2 I:??[long, double]) = (\-9223372036854775808 ??[long, double])  (LINE:92)\l0x000a: CMP_L  (r4 I:int) = (r0 I:long A[D('longDelta' long)]), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: CONST  (r2 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l0x0013: CMP_L  (r4 I:int) = (r0 I:long A[D('longDelta' long)]), (r2 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002d \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r2 I:long) = (r11 I:kotlin.time.TestTimeSource) kotlin.time.TestTimeSource.reading long  (LINE:94)\l0x0019: ARITH  (r4 I:long) = (r2 I:long) + (r0 I:long A[D('longDelta' long)]) \l0x001b: ARITH  (r6 I:long) = (r2 I:long) ^ (r0 I:long A[D('longDelta' long)])  (LINE:95)\l0x001d: CONST  (r8 I:??[long, double]) = (0 ??[long, double]) \l0x001f: CMP_L  (r10 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r10 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: ARITH  (r2 I:long) = (r2 I:long) ^ (r4 I:long A[D('newReading' long)]) \l0x0024: CMP_L  (r6 I:int) = (r2 I:long), (r8 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:18:0x004a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: INVOKE  (r11 I:kotlin.time.TestTimeSource), (r12 I:long A[D('duration' long)]) type: DIRECT call: kotlin.time.TestTimeSource.overflow\-LRDsOJo(long):void A[MD:(long):void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|0x004a: IPUT  (r4 I:long A[D('newReading' double)]), (r11 I:kotlin.time.TestTimeSource) kotlin.time.TestTimeSource.reading long  (LINE:92)\l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|RETURN\l|0x004c: RETURN    (LINE:104)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: INVOKE  (r2 I:kotlin.time.DurationUnit) = (r11 I:kotlin.time.TestTimeSource) type: VIRTUAL call: kotlin.time.TestTimeSource.getUnit():kotlin.time.DurationUnit A[MD:():kotlin.time.DurationUnit (m)] (LINE:98)\l0x0031: INVOKE  (r2 I:double) = (r12 I:long A[D('duration' long)]), (r2 I:kotlin.time.DurationUnit) type: STATIC call: kotlin.time.Duration.toDouble\-impl(long, kotlin.time.DurationUnit):double A[MD:(long, kotlin.time.DurationUnit):double (m)]\l0x0035: IGET  (r4 I:long) = (r11 I:kotlin.time.TestTimeSource) kotlin.time.TestTimeSource.reading long  (LINE:100)\l0x0037: CAST (r4 I:double) = (double) (r4 I:long) \l0x0038: ARITH  (r4 I:double) = (r4 I:double) + (r2 I:double A[D('delta' double)]) \l0x0039: CONST  (r6 I:??[long, double]) = (4890909195324358656(0x43e0000000000000, double:9.223372036854776E18) ??[long, double])  (LINE:101)\l0x003b: CMP_L  (r8 I:int) = (r4 I:double A[D('newReading' double)]), (r6 I:double) \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: IF  (r8 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:16:0x0045 \l}"];
Node_14 [shape=record,label="{14\:\ 0x003f|0x003f: CONST  (r6 I:??[long, double]) = (\-4332462841530417152(0xc3e0000000000000, double:\-9.223372036854776E18) ??[long, double]) \l0x0041: CMP_G  (r8 I:int) = (r4 I:double A[D('newReading' double)]), (r6 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0043|0x0043: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x0048 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: CAST (r6 I:long) = (long) (r4 I:double A[D('newReading' double)])  (LINE:102)\l0x0049: MOVE  (r4 I:??[long, double] A[D('newReading' double)]) = (r6 I:??[long, double]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|0x0045: INVOKE  (r11 I:kotlin.time.TestTimeSource), (r12 I:long A[D('duration' long)]) type: DIRECT call: kotlin.time.TestTimeSource.overflow\-LRDsOJo(long):void A[MD:(long):void (m)]\l}"];
MethodNode[shape=record,label="{public final void kotlin.time.TestTimeSource.plusAssign\-LRDsOJo((r11 'this' I:kotlin.time.TestTimeSource A[IMMUTABLE_TYPE, THIS]), (r12 I:long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0026 \-\> B:18:0x004a, CROSS_EDGE: B:7:0x0021 \-\> B:18:0x004a, CROSS_EDGE: B:17:0x0048 \-\> B:18:0x004a, CROSS_EDGE: B:15:0x0043 \-\> B:17:0x0048, CROSS_EDGE: B:13:0x003d \-\> B:16:0x0045, CROSS_EDGE: B:3:0x000c \-\> B:12:0x002d\lDebug Info:\l  0x001b\-0x002c: r4 'newReading' J\l  0x0035\-0x004a: r2 'delta' D\l  0x0039\-0x004a: r4 'newReading' D\l  0x0008\-0x004c: r0 'longDelta' J\l  \-1 \-0x004c: r12 'duration' J\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_16 -> Node_17;
}

