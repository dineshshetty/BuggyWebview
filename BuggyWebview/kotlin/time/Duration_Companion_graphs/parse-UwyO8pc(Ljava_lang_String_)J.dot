digraph "CFG forkotlin.time.Duration.Companion.parse\-UwyO8pc(Ljava\/lang\/String;)J" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"value\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IllegalArgumentException \-\> 0x000c, blocks: (B:13:0x0007), top: B:18:0x0007 \}\lCatch: IllegalArgumentException \-\> 0x000c\l|long r0 = kotlin.time.DurationKt.parseDuration(r5, false)     \/\/ Catch: java.lang.IllegalArgumentException \-\> Lc\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|ExcHandler: IllegalArgumentException \-\> 0x000c\l|java.lang.IllegalArgumentException r0 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Invalid duration string format: '\")\lr2.append(r5)\lr2.append(\"'.\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|throw new java.lang.IllegalArgumentException(r2.toString(), r0)\l}"];
MethodNode[shape=record,label="{public final long kotlin.time.Duration.Companion.parse\-UwyO8pc((r4v0 'this' kotlin.time.Duration$Companion A[IMMUTABLE_TYPE, THIS]), (r5v0 'value' java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x002b \-\> B:11:?, CROSS_EDGE: B:18:0x0007 \-\> B:15:0x000c\lINLINE_NOT_NEEDED\lTryCatch #0 \{IllegalArgumentException \-\> 0x000c, blocks: (B:13:0x0007), top: B:18:0x0007 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_18;
Node_18 -> Node_13;
Node_18 -> Node_15;
Node_13 -> Node_14;
Node_13 -> Node_19;
Node_14 -> Node_11;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_11;
}

