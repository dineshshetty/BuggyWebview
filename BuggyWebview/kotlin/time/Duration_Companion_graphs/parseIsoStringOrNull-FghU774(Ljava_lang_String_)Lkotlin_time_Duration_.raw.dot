digraph "CFG forkotlin.time.Duration.Companion.parseIsoStringOrNull\-FghU774(Ljava\/lang\/String;)Lkotlin\/time\/Duration;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"value\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('value' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:438)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IllegalArgumentException \-\> 0x0010, blocks: (B:14:0x0007), top: B:19:0x0007 \}\lCatch: IllegalArgumentException \-\> 0x0010\l|0x0007: INVOKE  (r0 I:long) = (r4 I:java.lang.String A[D('value' java.lang.String)]), (r0 I:boolean) type: STATIC call: kotlin.time.DurationKt.access$parseDuration(java.lang.String, boolean):long A[Catch: IllegalArgumentException \-\> 0x0010, MD:(java.lang.String, boolean):long (m), TRY_ENTER]\l0x000b: INVOKE  (r0 I:kotlin.time.Duration) = (r0 I:long) type: STATIC call: kotlin.time.Duration.box\-impl(long):kotlin.time.Duration A[Catch: IllegalArgumentException \-\> 0x0010, MD:(long):kotlin.time.Duration (m), TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN  (r0 I:kotlin.time.Duration A[D('e' java.lang.IllegalArgumentException)]) A[SYNTHETIC] (LINE:441)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|ExcHandler: IllegalArgumentException \-\> 0x0010\l|0x0010: MOVE_EXCEPTION  (r0 I:java.lang.IllegalArgumentException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalArgumentException \-\> 0x0010] (LINE:439)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:440)\l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0013: CHECK_CAST (r2 I:kotlin.time.Duration) = (kotlin.time.Duration) (r2 I:??[OBJECT, ARRAY]) \l0x0015: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('e' java.lang.IllegalArgumentException)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN  (r0 I:kotlin.time.Duration A[D('e' java.lang.IllegalArgumentException)])  (LINE:441)\l}"];
MethodNode[shape=record,label="{public final kotlin.time.Duration kotlin.time.Duration.Companion.parseIsoStringOrNull\-FghU774((r3 'this' I:kotlin.time.Duration$Companion A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0011 \-\> B:18:0x0016, CROSS_EDGE: B:19:0x0007 \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0016: r0 'e' Ljava\/lang\/IllegalArgumentException;\l  \-1 \-0x0016: r4 'value' Ljava\/lang\/String;\lTryCatch #0 \{IllegalArgumentException \-\> 0x0010, blocks: (B:14:0x0007), top: B:19:0x0007 \}\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_19;
Node_19 -> Node_14;
Node_19 -> Node_16;
Node_14 -> Node_20;
Node_14 -> Node_21;
Node_20 -> Node_16;
Node_21 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_12;
}

