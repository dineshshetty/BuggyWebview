digraph "CFG forkotlin.time.DurationUnitKt__DurationUnitKt.WhenMappings.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.time.DurationUnit[]) =  type: STATIC call: kotlin.time.DurationUnit.values():kotlin.time.DurationUnit[] A[MD:():kotlin.time.DurationUnit[] (m)]\l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0005: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0007: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.NANOSECONDS kotlin.time.DurationUnit \l0x0009: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x000d: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0010: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.MICROSECONDS kotlin.time.DurationUnit \l0x0012: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x0016: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0017: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0019: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.MILLISECONDS kotlin.time.DurationUnit \l0x001b: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x001f: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0020: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0022: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.SECONDS kotlin.time.DurationUnit \l0x0024: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x0028: CONST  (r2 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0029: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x002b: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.MINUTES kotlin.time.DurationUnit \l0x002d: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x0031: CONST  (r2 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char]) \l0x0032: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0034: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.HOURS kotlin.time.DurationUnit \l0x0036: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x003a: CONST  (r2 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char]) \l0x003b: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x003d: SGET  (r1 I:kotlin.time.DurationUnit) =  kotlin.time.DurationUnit.DAYS kotlin.time.DurationUnit \l0x003f: INVOKE  (r1 I:int) = (r1 I:kotlin.time.DurationUnit) type: VIRTUAL call: kotlin.time.DurationUnit.ordinal():int A[MD:():int (c)]\l0x0043: CONST  (r2 I:??[int, float, short, byte, char]) = (7 ??[int, float, short, byte, char]) \l0x0044: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0046: SPUT  (r0 I:int[]) kotlin.time.DurationUnitKt__DurationUnitKt.WhenMappings.$EnumSwitchMapping$0 int[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x0048|RETURN\l|0x0048: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.time.DurationUnitKt__DurationUnitKt.WhenMappings.\<clinit\>()  | INLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

