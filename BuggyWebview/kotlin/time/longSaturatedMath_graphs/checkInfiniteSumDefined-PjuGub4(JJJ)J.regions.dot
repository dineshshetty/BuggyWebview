digraph "CFG forkotlin.time.LongSaturatedMathKt.checkInfiniteSumDefined\-PjuGub4(JJJ)J" {
subgraph cluster_Region_1394146012 {
label = "R(1:(2:(1:8)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_560384080 {
label = "R(2:(1:8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_606154110 {
label = "IF [B:13:0x0004, B:15:0x000c] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0004|if (kotlin.time.Duration.m1491isInfiniteimpl(r7) == true) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|ADDED_TO_REGION\l|if ((r5 ^ r9) \>= 0) goto L8\l}"];
subgraph cluster_Region_1567834932 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0017|RETURN\l|return r5\l}"];
}
}
subgraph cluster_Region_1227463772 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0016|throw new java.lang.IllegalArgumentException(\"Summing infinities of different signs\")\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0006}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000f}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final long kotlin.time.LongSaturatedMathKt.checkInfiniteSumDefined\-PjuGub4((r5v0 'longNs' long A[D('longNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'duration' long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'durationNs' long A[D('durationNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0017 \-\> B:11:?, CROSS_EDGE: B:13:0x0004 \-\> B:19:0x0017\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_19[style=dashed];
Node_15 -> Node_17[style=dashed];
Node_15 -> Node_19;
Node_19 -> Node_11;
Node_18 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_17 -> Node_18;
}

