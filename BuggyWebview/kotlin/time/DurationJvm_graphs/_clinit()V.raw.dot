digraph "CFG forkotlin.time.DurationJvmKt.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<kotlin.time.Duration\>) =  kotlin.time.Duration.class  (LINE:12)\l0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: SPUT  (r0 I:boolean) kotlin.time.DurationJvmKt.durationAssertionsEnabled boolean \l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:14)\l0x0006: NEW_ARRAY  (r2 I:java.lang.ThreadLocal[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.ThreadLocal[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:4:0x000a\l|0x0008: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:4:0x000a\l|0x000a: NEW_INSTANCE  (r3 I:java.lang.ThreadLocal) =  java.lang.ThreadLocal \l0x000c: INVOKE  (r3 I:java.lang.ThreadLocal) type: DIRECT call: java.lang.ThreadLocal.\<init\>():void A[MD:():void (c)]\l0x000f: APUT  (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) \l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: SPUT  (r2 I:java.lang.ThreadLocal\<java.text.DecimalFormat\>[]) kotlin.time.DurationJvmKt.precisionFormats java.lang.ThreadLocal[] \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|RETURN\l|0x0016: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.time.DurationJvmKt.\<clinit\>()  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x000a \-\> B:3:0x0008\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_3;
Node_7 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

