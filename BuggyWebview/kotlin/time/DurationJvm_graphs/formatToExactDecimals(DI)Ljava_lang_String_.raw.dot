digraph "CFG forkotlin.time.DurationJvmKt.formatToExactDecimals(DI)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.ThreadLocal\<java.text.DecimalFormat\>[]) =  kotlin.time.DurationJvmKt.precisionFormats java.lang.ThreadLocal[]  (LINE:22)\l0x0002: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r5 I:??[int, byte, short, char] A[D('decimals' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:9:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char] A[D('decimals' int)])  (LINE:23)\l0x0007: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.lang.ThreadLocal) type: VIRTUAL call: java.lang.ThreadLocal.get():java.lang.Object A[MD:():T (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0016 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:34)\l0x000e: INVOKE  (r1 I:java.text.DecimalFormat A[D('$i$a$\-getOrSet\-DurationJvmKt$formatToExactDecimals$format$1' int)]) = (r5 I:int A[D('decimals' int)]) type: STATIC call: kotlin.time.DurationJvmKt.createFormatForDecimals(int):java.text.DecimalFormat A[MD:(int):java.text.DecimalFormat (m)] (LINE:23)\l0x0012: INVOKE  \l  (r0 I:java.lang.ThreadLocal)\l  (r1 I:java.lang.Object A[D('$i$a$\-getOrSet\-DurationJvmKt$formatToExactDecimals$format$1' int)])\l type: VIRTUAL call: java.lang.ThreadLocal.set(java.lang.Object):void A[MD:(T):void (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: CHECK_CAST (r1 I:java.text.DecimalFormat) = (java.text.DecimalFormat) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:22)\l0x0023: INVOKE  (r1 I:java.lang.String) = (r0 I:java.text.DecimalFormat A[D('format' java.text.DecimalFormat)]), (r3 I:double A[D('value' double)]) type: VIRTUAL call: java.text.DecimalFormat.format(double):java.lang.String A[MD:(double):java.lang.String (c)] (LINE:26)\l0x0027: CONST_STR  (r2 I:java.lang.String) =  \"format.format(value)\" \l0x0029: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|RETURN\l|0x002c: RETURN  (r1 I:java.lang.String) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: CONST_STR  (r0 I:java.lang.String) =  \"get() ?: default().also(this::set)\" \l0x0018: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: INVOKE  (r1 I:java.text.DecimalFormat) = (r5 I:int A[D('decimals' int)]) type: STATIC call: kotlin.time.DurationJvmKt.createFormatForDecimals(int):java.text.DecimalFormat A[MD:(int):java.text.DecimalFormat (m)] (LINE:25)\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.time.DurationJvmKt.formatToExactDecimals((r3 I:double A[D('value' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('decimals' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0016 \-\> B:8:0x001b, CROSS_EDGE: B:9:0x001e \-\> B:10:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0012: r1 '$i$a$\-getOrSet\-DurationJvmKt$formatToExactDecimals$format$1' I\l  0x0023\-0x002c: r0 'format' Ljava\/text\/DecimalFormat;\l  \-1 \-0x002c: r3 'value' D\l  \-1 \-0x002c: r5 'decimals' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

