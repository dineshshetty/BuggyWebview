digraph "CFG forkotlin.time.AbstractDoubleTimeSource.markNow()Lkotlin\/time\/TimeMark;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r7 I:kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark) =  kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark  (LINE:57)\l0x0002: INVOKE  (r1 I:double) = (r8 I:kotlin.time.AbstractDoubleTimeSource) type: VIRTUAL call: kotlin.time.AbstractDoubleTimeSource.read():double A[MD:():double (m)]\l0x0006: SGET  (r0 I:kotlin.time.Duration$Companion) =  kotlin.time.Duration.Companion kotlin.time.Duration$Companion \l0x0008: INVOKE  (r4 I:long) = (r0 I:kotlin.time.Duration$Companion) type: VIRTUAL call: kotlin.time.Duration.Companion.getZERO\-UwyO8pc():long A[MD:():long (m)]\l0x000c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x000e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  \l  (r0 I:kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark)\l  (r1 I:double)\l  (r3 I:kotlin.time.AbstractDoubleTimeSource)\l  (r4 I:long)\l  (r6 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlin.time.AbstractDoubleTimeSource.DoubleTimeMark.\<init\>(double, kotlin.time.AbstractDoubleTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(double, kotlin.time.AbstractDoubleTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0012: CHECK_CAST (r7 I:kotlin.time.TimeMark) = (kotlin.time.TimeMark) (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|RETURN\l|0x0014: RETURN  (r7 I:kotlin.time.TimeMark) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlin.time.TimeMark kotlin.time.AbstractDoubleTimeSource.markNow((r8 'this' I:kotlin.time.AbstractDoubleTimeSource A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lMETHOD_OVERRIDE: [kotlin.time.TimeSource.markNow():kotlin.time.TimeMark]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

