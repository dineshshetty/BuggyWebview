digraph "CFG forkotlin.time.AbstractLongTimeSource.LongTimeMark.plus\-LRDsOJo(J)Lkotlin\/time\/TimeMark;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r7 I:kotlin.time.AbstractLongTimeSource$LongTimeMark) =  kotlin.time.AbstractLongTimeSource$LongTimeMark  (LINE:32)\l0x0002: IGET  (r1 I:long) = (r8 I:kotlin.time.AbstractLongTimeSource$LongTimeMark) kotlin.time.AbstractLongTimeSource.LongTimeMark.startedAt long \l0x0004: IGET  (r3 I:kotlin.time.AbstractLongTimeSource) = (r8 I:kotlin.time.AbstractLongTimeSource$LongTimeMark) kotlin.time.AbstractLongTimeSource.LongTimeMark.timeSource kotlin.time.AbstractLongTimeSource \l0x0006: IGET  (r4 I:long) = (r8 I:kotlin.time.AbstractLongTimeSource$LongTimeMark) kotlin.time.AbstractLongTimeSource.LongTimeMark.offset long \l0x0008: INVOKE  (r4 I:long) = (r4 I:long), (r9 I:long A[D('duration' long)]) type: STATIC call: kotlin.time.Duration.plus\-LRDsOJo(long, long):long A[MD:(long, long):long (m)]\l0x000c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  \l  (r0 I:kotlin.time.AbstractLongTimeSource$LongTimeMark)\l  (r1 I:long)\l  (r3 I:kotlin.time.AbstractLongTimeSource)\l  (r4 I:long)\l  (r6 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlin.time.AbstractLongTimeSource.LongTimeMark.\<init\>(long, kotlin.time.AbstractLongTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(long, kotlin.time.AbstractLongTimeSource, long, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0011: CHECK_CAST (r7 I:kotlin.time.TimeMark) = (kotlin.time.TimeMark) (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\l|0x0013: RETURN  (r7 I:kotlin.time.TimeMark) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlin.time.TimeMark kotlin.time.AbstractLongTimeSource.LongTimeMark.plus\-LRDsOJo((r8 'this' I:kotlin.time.AbstractLongTimeSource$LongTimeMark A[IMMUTABLE_TYPE, THIS]), (r9 I:long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0013: r9 'duration' J\lMETHOD_OVERRIDE: [kotlin.time.TimeMark.plus\-LRDsOJo(long):kotlin.time.TimeMark]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

