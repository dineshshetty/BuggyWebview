digraph "CFG forkotlin.time.DurationKt.substringWhile(Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$substringWhile' java.lang.String)])  (LINE:1416)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)])  (LINE:1489)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|LOOP_START\lLOOP:0: B:27:0x0004\-\>B:31:0x001e\l|0x0004: INVOKE  (r4 I:int) = (r1 I:java.lang.String A[D('$this$skipWhile$iv' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:1490)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: IF  (r3 I:??[int, byte, short, char] A[D('i$iv' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:34:0x0021 \l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|0x000a: INVOKE  (r4 I:char) = (r1 I:java.lang.String A[D('$this$skipWhile$iv' java.lang.String)]), (r3 I:int A[D('i$iv' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x000e: INVOKE  (r4 I:java.lang.Character) = (r4 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0012: INVOKE  (r4 I:java.lang.Object) = (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r4 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0016: CHECK_CAST (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|0x001c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0021 \l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|LOOP_END\lLOOP:0: B:27:0x0004\-\>B:31:0x001e\l|0x001e: ARITH  (r3 I:int) = (r3 I:int A[D('i$iv' int)]) + (1 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0021|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|0x0022: CONST_STR  (r1 I:java.lang.String A[D('$this$skipWhile$iv' java.lang.String)]) =  \"null cannot be cast to non\-null type java.lang.String\"  (LINE:1416)\l0x0024: INVOKE  (r5 I:java.lang.Object A[D('$this$substringWhile' java.lang.String)]), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0027: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.String A[D('$this$substringWhile' java.lang.String)]), (r6 I:int A[D('startIndex' int)]), (r3 I:int) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x002b: CONST_STR  (r2 I:java.lang.String) =  \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\" \l0x002d: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|RETURN\l|0x0030: RETURN  (r1 I:java.lang.String) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.time.DurationKt.substringWhile((r5 I:java.lang.String A[D('$this$substringWhile' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x001e \-\> B:27:0x0004, CROSS_EDGE: B:28:0x0008 \-\> B:32:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0022: r1 '$this$skipWhile$iv' Ljava\/lang\/String;\l  0x0003\-0x0022: r2 '$i$f$skipWhile' I\l  0x0004\-0x0022: r3 'i$iv' I\l  0x0001\-0x0030: r0 '$i$f$substringWhile' I\l  \-1 \-0x0030: r5 '$this$substringWhile' Ljava\/lang\/String;\l  \-1 \-0x0030: r6 'startIndex' I\l  \-1 \-0x0030: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_27;
Node_35 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_32;
}

