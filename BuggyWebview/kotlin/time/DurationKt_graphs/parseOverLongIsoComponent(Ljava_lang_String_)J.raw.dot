digraph "CFG forkotlin.time.DurationKt.parseOverLongIsoComponent(Ljava\/lang\/String;)J" {
Node_72 [shape=record,label="{72\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_74 [shape=record,label="{74\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r15 I:java.lang.String A[D('value' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:1402)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1403)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1404)\l0x0006: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('length' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:79:0x001a \l}"];
Node_76 [shape=record,label="{76\:\ 0x000a|0x000a: CONST_STR  (r5 I:java.lang.String) =  \"+\-\" \l0x000c: CHECK_CAST (r5 I:java.lang.CharSequence) = (java.lang.CharSequence) (r5 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r6 I:char) = (r15 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0012: INVOKE  (r5 I:boolean) = (r5 I:java.lang.CharSequence), (r6 I:char), (r4 I:boolean), (r3 I:int), (r2 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.contains$default(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_77 [shape=record,label="{77\:\ 0x0016|0x0016: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x001a \l}"];
Node_78 [shape=record,label="{78\:\ 0x0018|0x0018: ARITH  (r1 I:int) = (r1 I:int A[D('startIndex' int)]) + (1 int) \l}"];
Node_79 [shape=record,label="{79\:\ 0x001a|0x001a: ARITH  (r5 I:int) = (r0 I:int A[D('length' int)]) \- (r1 I:int A[D('startIndex' int)])  (LINE:1405)\l0x001c: CONST  (r6 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l0x001e: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_80 [shape=record,label="{80\:\ 0x001f|0x001f: IF  (r5 I:??[int, byte, short, char]) \<= (r6 I:??[int, byte, short, char])  \-\> B:99:0x007b \l}"];
Node_81 [shape=record,label="{81\:\ 0x0021|0x0021: NEW_INSTANCE  (r5 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0023: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('value' java.lang.String)]) \l0x0024: CHECK_CAST (r6 I:java.lang.CharSequence) = (java.lang.CharSequence) (r6 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r6 I:int) = (r6 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x002a: INVOKE  (r5 I:kotlin.ranges.IntRange), (r1 I:int A[D('startIndex' int)]), (r6 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x002d: CHECK_CAST (r5 I:java.lang.Iterable) = (java.lang.Iterable) (r5 I:??[OBJECT, ARRAY]) \l0x002f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0030: INSTANCE_OF  (r8 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) java.util.Collection  (LINE:1486)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0032|0x0032: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x003f \l}"];
Node_83 [shape=record,label="{83\:\ 0x0034|0x0034: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) \l0x0035: CHECK_CAST (r8 I:java.util.Collection) = (java.util.Collection) (r8 I:??[OBJECT, ARRAY]) \l0x0037: INVOKE  (r8 I:boolean) = (r8 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_84 [shape=record,label="{84\:\ 0x003b|0x003b: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x003f \l}"];
Node_85 [shape=record,label="{85\:\ 0x003d|0x003d: CONST  (r5 I:??[boolean, int, float, short, byte, char] A[D('$this$all$iv' java.lang.Iterable)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_93 [shape=record,label="{93\:\ 0x0068|0x0068: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$all$iv' java.lang.Iterable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:99:0x007b  (LINE:1405)\l}"];
Node_94 [shape=record,label="{94\:\ 0x006a|0x006a: INVOKE  (r2 I:char) = (r15 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:1407)\l0x006e: CONST  (r3 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char]) \l}"];
Node_95 [shape=record,label="{95\:\ 0x0070|0x0070: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x0075 \l}"];
Node_96 [shape=record,label="{96\:\ 0x0072|SYNTHETIC\lRETURN\l|0x0072: CONST  (r2 I:??[long, double]) = (\-9223372036854775808 ??[long, double]) \l0x007a: RETURN  (r2 I:long) A[SYNTHETIC]\l}"];
Node_73 [shape=record,label="{73\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_97 [shape=record,label="{97\:\ 0x0075|RETURN\lORIG_RETURN\l|0x0075: CONST  (r2 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l0x007a: RETURN  (r2 I:long) \l}"];
Node_86 [shape=record,label="{86\:\ 0x003f|0x003f: INVOKE  (r8 I:java.util.Iterator) = (r5 I:java.lang.Iterable A[D('$this$all$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1487)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0043|LOOP_START\lLOOP:0: B:87:0x0043\-\>B:90:0x0063\l|0x0043: INVOKE  (r9 I:boolean) = (r8 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_88 [shape=record,label="{88\:\ 0x0047|0x0047: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:105:0x0067 \l}"];
Node_89 [shape=record,label="{89\:\ 0x0049|0x0049: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x004a: CHECK_CAST (r9 I:kotlin.collections.IntIterator) = (kotlin.collections.IntIterator) (r9 I:??[OBJECT, ARRAY]) \l0x004c: INVOKE  (r9 I:int) = (r9 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0050: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' int)]) \l0x0051: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0052: NEW_INSTANCE  (r12 I:kotlin.ranges.CharRange) =  kotlin.ranges.CharRange  (LINE:1405)\l0x0054: CONST  (r13 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char]) \l0x0056: CONST  (r14 I:??[int, float, short, byte, char]) = (57 ??[int, float, short, byte, char]) \l0x0058: INVOKE  (r12 I:kotlin.ranges.CharRange), (r13 I:char), (r14 I:char) type: DIRECT call: kotlin.ranges.CharRange.\<init\>(char, char):void A[MD:(char, char):void (m)]\l0x005b: INVOKE  (r13 I:char) = (r15 I:java.lang.String A[D('value' java.lang.String)]), (r10 I:int A[D('it' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x005f: INVOKE  (r10 I:boolean A[D('it' int)]) = (r12 I:kotlin.ranges.CharRange), (r13 I:char) type: VIRTUAL call: kotlin.ranges.CharRange.contains(char):boolean A[MD:(char):boolean (m)]\l}"];
Node_90 [shape=record,label="{90\:\ 0x0063|LOOP_END\lLOOP:0: B:87:0x0043\-\>B:90:0x0063\l|0x0063: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:87:0x0043 \l}"];
Node_104 [shape=record,label="{104\:\ 0x0065|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0065|0x0065: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_105 [shape=record,label="{105\:\ 0x0067|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x0067|0x0067: CONST  (r5 I:??[boolean, int, float, short, byte, char] A[D('$this$all$iv' java.lang.Iterable)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1488)\l}"];
Node_99 [shape=record,label="{99\:\ 0x007b|0x007b: CONST_STR  (r5 I:java.lang.String) =  \"+\"  (LINE:1410)\l0x007d: INVOKE  (r2 I:boolean) = \l  (r15 I:java.lang.String A[D('value' java.lang.String)])\l  (r5 I:java.lang.String)\l  (r4 I:boolean)\l  (r3 I:int)\l  (r2 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.startsWith$default(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean A[MD:(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_100 [shape=record,label="{100\:\ 0x0081|0x0081: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:102:0x008c \l}"];
Node_101 [shape=record,label="{101\:\ 0x0083|0x0083: INVOKE  (r2 I:java.lang.String) = (r15 I:java.lang.String A[D('value' java.lang.String)]), (r7 I:int) type: STATIC call: kotlin.text.StringsKt.drop(java.lang.String, int):java.lang.String A[MD:(java.lang.String, int):java.lang.String (m)]\l0x0087: INVOKE  (r2 I:long) = (r2 I:java.lang.String) type: STATIC call: java.lang.Long.parseLong(java.lang.String):long A[MD:(java.lang.String):long throws java.lang.NumberFormatException (c)]\l}"];
Node_107 [shape=record,label="{107\:\ ?|SYNTHETIC\lRETURN\l|0x0090: RETURN  (r2 I:long) A[SYNTHETIC]\l}"];
Node_102 [shape=record,label="{102\:\ 0x008c|0x008c: INVOKE  (r2 I:long) = (r15 I:java.lang.String A[D('value' java.lang.String)]) type: STATIC call: java.lang.Long.parseLong(java.lang.String):long A[MD:(java.lang.String):long throws java.lang.NumberFormatException (c)]\l}"];
Node_103 [shape=record,label="{103\:\ 0x0090|RETURN\lORIG_RETURN\l|0x0090: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{private static final long kotlin.time.DurationKt.parseOverLongIsoComponent((r15 I:java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:97:0x0075 \-\> B:98:0x007a, CROSS_EDGE: B:103:0x0090 \-\> B:73:?, CROSS_EDGE: B:102:0x008c \-\> B:103:0x0090, BACK_EDGE: B:90:0x0063 \-\> B:87:0x0043, CROSS_EDGE: B:91:0x0065 \-\> B:93:0x0068, CROSS_EDGE: B:92:0x0067 \-\> B:93:0x0068, CROSS_EDGE: B:82:0x0032 \-\> B:86:0x003f, CROSS_EDGE: B:80:0x001f \-\> B:99:0x007b, CROSS_EDGE: B:77:0x0016 \-\> B:79:0x001a, CROSS_EDGE: B:75:0x0008 \-\> B:79:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0051\-0x0063: r10 'it' I\l  0x0052\-0x0063: r11 '$i$a$\-all\-DurationKt$parseOverLongIsoComponent$1' I\l  0x0050\-0x0067: r9 'element$iv' I\l  0x002f\-0x0068: r5 '$this$all$iv' Ljava\/lang\/Iterable;\l  0x0030\-0x0068: r6 '$i$f$all' I\l  0x0004\-0x0090: r0 'length' I\l  0x0005\-0x0090: r1 'startIndex' I\l  \-1 \-0x0090: r15 'value' Ljava\/lang\/String;\l}"];
MethodNode -> Node_72;Node_72 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_79;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_79;
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_99;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_86;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_86;
Node_85 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_99;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_97;
Node_96 -> Node_73;
Node_97 -> Node_73;
Node_86 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_105;
Node_89 -> Node_90;
Node_90 -> Node_87;
Node_90 -> Node_104[style=dashed];
Node_104 -> Node_91;
Node_91 -> Node_93;
Node_105 -> Node_92;
Node_92 -> Node_93;
Node_99 -> Node_100;
Node_100 -> Node_101[style=dashed];
Node_100 -> Node_102;
Node_101 -> Node_107;
Node_107 -> Node_73;
Node_102 -> Node_103;
Node_103 -> Node_73;
}

