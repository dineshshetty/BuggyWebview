digraph "CFG forkotlin.time.DurationKt.skipWhile(Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function1;)I" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)])  (LINE:1419)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|LOOP_START\lLOOP:0: B:25:0x0002\-\>B:29:0x001c\l|0x0002: INVOKE  (r2 I:int) = (r3 I:java.lang.String A[D('$this$skipWhile' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:1420)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|0x0006: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_27 [shape=record,label="{27\:\ 0x0008|0x0008: INVOKE  (r2 I:char) = (r3 I:java.lang.String A[D('$this$skipWhile' java.lang.String)]), (r1 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x000c: INVOKE  (r2 I:java.lang.Character) = (r2 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x0010: INVOKE  (r2 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0014: CHECK_CAST (r2 I:java.lang.Boolean) = (java.lang.Boolean) (r2 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001f \l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|LOOP_END\lLOOP:0: B:25:0x0002\-\>B:29:0x001c\l|0x001c: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:int A[D('i' int)])  (LINE:1421)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final int kotlin.time.DurationKt.skipWhile((r3 I:java.lang.String A[D('$this$skipWhile' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x001c \-\> B:25:0x0002, CROSS_EDGE: B:26:0x0006 \-\> B:30:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x001f: r0 '$i$f$skipWhile' I\l  0x0002\-0x001f: r1 'i' I\l  \-1 \-0x001f: r3 '$this$skipWhile' Ljava\/lang\/String;\l  \-1 \-0x001f: r4 'startIndex' I\l  \-1 \-0x001f: r5 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_25;
Node_32 -> Node_30;
Node_30 -> Node_23;
Node_31 -> Node_30;
}

