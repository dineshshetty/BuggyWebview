digraph "CFG forkotlin.time.DurationKt.parseOverLongIsoComponent(Ljava\/lang\/String;)J" {
Node_72 [shape=record,label="{72\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_74 [shape=record,label="{74\:\ 0x0000|int r0 = r15.length()\lr1 = 0\l}"];
Node_75 [shape=record,label="{75\:\ 0x0008|if (r0 \<= 0) goto L6\l}"];
Node_76 [shape=record,label="{76\:\ 0x000a}"];
Node_77 [shape=record,label="{77\:\ 0x0016|if (kotlin.text.StringsKt.contains$default(\"+\-\", r15.charAt(0), false, 2, null) == false) goto L6\l}"];
Node_78 [shape=record,label="{78\:\ 0x0018|int r1 = 0 + 1\l}"];
Node_79 [shape=record,label="{79\:\ 0x001a|PHI: r1 \l  PHI: (r1v1 'startIndex' int) = (r1v0 'startIndex' int), (r1v0 'startIndex' int), (r1v2 'startIndex' int) binds: [B:75:0x0008, B:77:0x0016, B:78:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_80 [shape=record,label="{80\:\ 0x001f|if ((r0 \- r1) \<= 16) goto L28\l}"];
Node_81 [shape=record,label="{81\:\ 0x0021|java.lang.Iterable r5 = new kotlin.ranges.IntRange(r1, kotlin.text.StringsKt.getLastIndex(r15))\l}"];
Node_82 [shape=record,label="{82\:\ 0x0032|if ((r5 instanceof java.util.Collection) == false) goto L19\l}"];
Node_83 [shape=record,label="{83\:\ 0x0034}"];
Node_84 [shape=record,label="{84\:\ 0x003b|if (((java.util.Collection) r5).isEmpty() == false) goto L19\l}"];
Node_85 [shape=record,label="{85\:\ 0x003d|r5 = true\l}"];
Node_93 [shape=record,label="{93\:\ 0x0068|PHI: r5 \l  PHI: (r5v6 boolean) = (r5v4 boolean), (r5v5 boolean), (r5v7 boolean) binds: [B:92:0x0067, B:91:0x0065, B:85:0x003d] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L28\l}"];
Node_94 [shape=record,label="{94\:\ 0x006a}"];
Node_95 [shape=record,label="{95\:\ 0x0070|if (r15.charAt(0) != '\-') goto L18\l}"];
Node_96 [shape=record,label="{96\:\ 0x0072|SYNTHETIC\lRETURN\l|return Long.MIN_VALUE\l}"];
Node_73 [shape=record,label="{73\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_97 [shape=record,label="{97\:\ 0x0075|RETURN\lORIG_RETURN\l|return Long.MAX_VALUE\l}"];
Node_86 [shape=record,label="{86\:\ 0x003f|java.util.Iterator r8 = r5.iterator()\l}"];
Node_87 [shape=record,label="{87\:\ 0x0043|LOOP_START\lLOOP:0: B:87:0x0043\-\>B:90:0x0063\l}"];
Node_88 [shape=record,label="{88\:\ 0x0047|if (r8.hasNext() == false) goto L26\l}"];
Node_89 [shape=record,label="{89\:\ 0x0049|int r9 = ((kotlin.collections.IntIterator) r8).nextInt()\l}"];
Node_90 [shape=record,label="{90\:\ 0x0063|LOOP_END\lLOOP:0: B:87:0x0043\-\>B:90:0x0063\l|if (new kotlin.ranges.Ranges('0', '9').contains(r15.charAt(r9)) != false) goto L20\l}"];
Node_104 [shape=record,label="{104\:\ 0x0065|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0065|r5 = false\l}"];
Node_105 [shape=record,label="{105\:\ 0x0067|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x0067|r5 = true\l}"];
Node_99 [shape=record,label="{99\:\ 0x007b}"];
Node_100 [shape=record,label="{100\:\ 0x0081|if (kotlin.text.StringsKt.startsWith$default(r15, \"+\", false, 2, null) == false) goto L32\l}"];
Node_101 [shape=record,label="{101\:\ 0x0083}"];
Node_107 [shape=record,label="{107\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Long.parseLong(kotlin.text.StringsKt.drop(r15, 1))\l}"];
Node_102 [shape=record,label="{102\:\ 0x008c}"];
Node_103 [shape=record,label="{103\:\ 0x0090|RETURN\lORIG_RETURN\l|return java.lang.Long.parseLong(r15)\l}"];
MethodNode[shape=record,label="{private static final long kotlin.time.DurationKt.parseOverLongIsoComponent((r15v0 'value' java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:97:0x0075 \-\> B:98:0x007a, CROSS_EDGE: B:103:0x0090 \-\> B:73:?, CROSS_EDGE: B:102:0x008c \-\> B:103:0x0090, BACK_EDGE: B:90:0x0063 \-\> B:87:0x0043, CROSS_EDGE: B:91:0x0065 \-\> B:93:0x0068, CROSS_EDGE: B:92:0x0067 \-\> B:93:0x0068, CROSS_EDGE: B:82:0x0032 \-\> B:86:0x003f, CROSS_EDGE: B:80:0x001f \-\> B:99:0x007b, CROSS_EDGE: B:77:0x0016 \-\> B:79:0x001a, CROSS_EDGE: B:75:0x0008 \-\> B:79:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_72;Node_72 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_79;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_79;
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_99;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_86;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_86;
Node_85 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_99;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_97;
Node_96 -> Node_73;
Node_97 -> Node_73;
Node_86 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_105;
Node_89 -> Node_90;
Node_90 -> Node_87;
Node_90 -> Node_104[style=dashed];
Node_104 -> Node_91;
Node_91 -> Node_93;
Node_105 -> Node_92;
Node_92 -> Node_93;
Node_99 -> Node_100;
Node_100 -> Node_101[style=dashed];
Node_100 -> Node_102;
Node_101 -> Node_107;
Node_107 -> Node_73;
Node_102 -> Node_103;
Node_103 -> Node_73;
}

