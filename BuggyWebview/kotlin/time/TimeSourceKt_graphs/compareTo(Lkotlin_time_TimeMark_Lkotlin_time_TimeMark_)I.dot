digraph "CFG forkotlin.time.TimeSourceKt.compareTo(Lkotlin\/time\/TimeMark;Lkotlin\/time\/TimeMark;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"other\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|throw new java.lang.Error(\"Operation is disallowed.\")\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final int kotlin.time.TimeSourceKt.compareTo((r2v0 '$this$compareTo' kotlin.time.TimeMark A[D('$this$compareTo' kotlin.time.TimeMark), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'other' kotlin.time.TimeMark A[D('other' kotlin.time.TimeMark), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Comparing one TimeMark to another is not a well defined operation because these time marks could have been obtained from the different time sources.\}\}\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

