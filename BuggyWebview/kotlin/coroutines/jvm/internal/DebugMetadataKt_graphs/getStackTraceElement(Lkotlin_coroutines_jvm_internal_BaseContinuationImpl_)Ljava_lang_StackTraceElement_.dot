digraph "CFG forkotlin.coroutines.jvm.internal.DebugMetadataKt.getStackTraceElement(Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;)Ljava\/lang\/StackTraceElement;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"\<this\>\")\lkotlin.coroutines.jvm.internal.DebugMetadata r0 = getDebugMetadataAnnotation(r8)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r0 != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|checkDebugMetadataVersion(1, r0.m7v())\lint r1 = getLabel(r8)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|if (r1 \>= 0) goto L14\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|r2 = \-1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|PHI: r2 \l  PHI: (r2v3 'lineNumber' int) = (r2v2 'lineNumber' int), (r2v4 'lineNumber' int) binds: [B:9:0x001d, B:8:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String r3 = kotlin.coroutines.jvm.internal.ModuleNameRetriever.INSTANCE.getModuleName(r8)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|if (r3 != null) goto L13\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|java.lang.String r4 = r0.m14c()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|PHI: r4 \l  PHI: (r4v2 'moduleAndClass' java.lang.String) = (r4v1 'moduleAndClass' java.lang.String), (r4v3 'moduleAndClass' java.lang.String) binds: [B:13:0x0030, B:12:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|RETURN\l|return new java.lang.StackTraceElement(r4, r0.m10m(), r0.m13f(), r2)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(r3)\lr4.append('\/')\lr4.append(r0.m14c())\ljava.lang.String r4 = r4.toString()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|r2 = r0.m11l()[r1]\l}"];
MethodNode[shape=record,label="{public static final java.lang.StackTraceElement kotlin.coroutines.jvm.internal.DebugMetadataKt.getStackTraceElement((r8v0 '$this$getStackTraceElementImpl' kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('$this$getStackTraceElementImpl' kotlin.coroutines.jvm.internal.BaseContinuationImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0055 \-\> B:1:?, CROSS_EDGE: B:13:0x0030 \-\> B:14:0x0048, CROSS_EDGE: B:9:0x001d \-\> B:10:0x0023\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_9 -> Node_10;
}

