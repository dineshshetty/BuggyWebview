digraph "CFG forkotlin.coroutines.jvm.internal.DebugMetadataKt.getLabel(Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{Exception \-\> 0x0025, blocks: (B:2:0x0001, B:4:0x0017, B:7:0x001d), top: B:14:0x0001 \}\lCatch: Exception \-\> 0x0025\l|0x0001: INVOKE  (r0 I:java.lang.Class) = (r4 I:java.lang.Object A[D('$this$getLabel' kotlin.coroutines.jvm.internal.BaseContinuationImpl)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[Catch: Exception \-\> 0x0025, MD:():java.lang.Class\<?\> (c), TRY_ENTER] (LINE:94)\l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"label\" \l0x0007: INVOKE  (r0 I:java.lang.reflect.Field) = (r0 I:java.lang.Class), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.Class.getDeclaredField(java.lang.String):java.lang.reflect.Field A[Catch: Exception \-\> 0x0025, MD:(java.lang.String):java.lang.reflect.Field throws java.lang.NoSuchFieldException (c)]\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:95)\l0x000c: INVOKE  (r0 I:java.lang.reflect.Field A[D('field' java.lang.reflect.Field)]), (r1 I:boolean) type: VIRTUAL call: java.lang.reflect.Field.setAccessible(boolean):void A[Catch: Exception \-\> 0x0025, MD:(boolean):void throws java.lang.SecurityException (c)]\l0x000f: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Field A[D('field' java.lang.reflect.Field)])\l  (r4 I:java.lang.Object A[D('$this$getLabel' kotlin.coroutines.jvm.internal.BaseContinuationImpl)])\l type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: Exception \-\> 0x0025, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:96)\l0x0013: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY]) java.lang.Integer A[Catch: Exception \-\> 0x0025]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|TryCatch #0 \{Exception \-\> 0x0025, blocks: (B:2:0x0001, B:4:0x0017, B:7:0x001d), top: B:14:0x0001 \}\lCatch: Exception \-\> 0x0025\l|0x0017: CHECK_CAST (r2 I:java.lang.Integer) = (java.lang.Integer) (r2 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x0025]\l0x0019: GOTO  \-\> 0x001b \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0022 \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|TRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0025, blocks: (B:2:0x0001, B:4:0x0017, B:7:0x001d), top: B:14:0x0001 \}\lCatch: Exception \-\> 0x0025\l|0x001d: INVOKE  (r2 I:int) = (r2 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[Catch: Exception \-\> 0x0025, MD:():int (c), TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|0x0027: RETURN  (r2 I:int) A[SYNTHETIC] (LINE:99)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|ExcHandler: Exception \-\> 0x0025\l|0x0025: MOVE_EXCEPTION  (r0 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x0025] (LINE:97)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:98)\l0x0027: RETURN  (r2 I:int)  (LINE:99)\l}"];
MethodNode[shape=record,label="{private static final int kotlin.coroutines.jvm.internal.DebugMetadataKt.getLabel((r4 I:kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('$this$getLabel' kotlin.coroutines.jvm.internal.BaseContinuationImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0026 \-\> B:13:0x0027, CROSS_EDGE: B:9:0x0022 \-\> B:10:0x0023, CROSS_EDGE: B:5:0x001a \-\> B:6:0x001b, CROSS_EDGE: B:14:0x0001 \-\> B:11:0x0025\lDebug Info:\l  0x000b\-0x0024: r0 'field' Ljava\/lang\/reflect\/Field;\l  0x0026\-0x0027: r0 'e' Ljava\/lang\/Exception;\l  \-1 \-0x0027: r4 '$this$getLabel' Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;\lTryCatch #0 \{Exception \-\> 0x0025, blocks: (B:2:0x0001, B:4:0x0017, B:7:0x001d), top: B:14:0x0001 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_14;
Node_14 -> Node_2;
Node_14 -> Node_11;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_10;
Node_7 -> Node_15;
Node_10 -> Node_16;
Node_16 -> Node_1;
Node_15 -> Node_11;
Node_9 -> Node_10;
Node_5 -> Node_6;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

