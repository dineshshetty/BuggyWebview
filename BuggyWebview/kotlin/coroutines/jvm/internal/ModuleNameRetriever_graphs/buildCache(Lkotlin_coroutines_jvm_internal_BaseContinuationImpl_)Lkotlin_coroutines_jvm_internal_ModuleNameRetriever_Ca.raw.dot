digraph "CFG forkotlin.coroutines.jvm.internal.ModuleNameRetriever.buildCache(Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;)Lkotlin\/coroutines\/jvm\/internal\/ModuleNameRetriever$Cache;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0041, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: Exception \-\> 0x0041\l|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Class\>) =  java.lang.Class.class A[TRY_ENTER] (LINE:76)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"getModule\"  (LINE:77)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: NEW_ARRAY  (r3 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: Exception \-\> 0x0041]\l0x0007: INVOKE  (r0 I:java.lang.reflect.Method) = (r0 I:java.lang.Class), (r1 I:java.lang.String), (r3 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: Exception \-\> 0x0041, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x000b: INVOKE  (r1 I:java.lang.Class) = (r9 I:java.lang.Object A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[Catch: Exception \-\> 0x0041, MD:():java.lang.Class\<?\> (c)] (LINE:78)\l0x000f: INVOKE  (r1 I:java.lang.ClassLoader) = (r1 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getClassLoader():java.lang.ClassLoader A[Catch: Exception \-\> 0x0041, MD:():java.lang.ClassLoader (c)]\l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"java.lang.Module\" \l0x0015: INVOKE  (r1 I:java.lang.Class) = (r1 I:java.lang.ClassLoader), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.ClassLoader.loadClass(java.lang.String):java.lang.Class A[Catch: Exception \-\> 0x0041, MD:(java.lang.String):java.lang.Class\<?\> throws java.lang.ClassNotFoundException (c)]\l0x0019: CONST_STR  (r3 I:java.lang.String) =  \"getDescriptor\"  (LINE:79)\l0x001b: NEW_ARRAY  (r4 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: Exception \-\> 0x0041]\l0x001d: INVOKE  (r3 I:java.lang.reflect.Method) = (r1 I:java.lang.Class A[D('methodClass' java.lang.Class)]), (r3 I:java.lang.String), (r4 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: Exception \-\> 0x0041, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x0021: INVOKE  (r4 I:java.lang.Class) = (r9 I:java.lang.Object A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[Catch: Exception \-\> 0x0041, MD:():java.lang.Class\<?\> (c)] (LINE:80)\l0x0025: INVOKE  (r4 I:java.lang.ClassLoader) = (r4 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getClassLoader():java.lang.ClassLoader A[Catch: Exception \-\> 0x0041, MD:():java.lang.ClassLoader (c)]\l0x0029: CONST_STR  (r5 I:java.lang.String) =  \"java.lang.module.ModuleDescriptor\" \l0x002b: INVOKE  (r4 I:java.lang.Class) = (r4 I:java.lang.ClassLoader), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.ClassLoader.loadClass(java.lang.String):java.lang.Class A[Catch: Exception \-\> 0x0041, MD:(java.lang.String):java.lang.Class\<?\> throws java.lang.ClassNotFoundException (c)]\l0x002f: CONST_STR  (r5 I:java.lang.String) =  \"name\"  (LINE:81)\l0x0031: NEW_ARRAY  (r2 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: Exception \-\> 0x0041]\l0x0033: INVOKE  (r2 I:java.lang.reflect.Method) = (r4 I:java.lang.Class A[D('moduleDescriptorClass' java.lang.Class)]), (r5 I:java.lang.String), (r2 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: Exception \-\> 0x0041, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x0037: NEW_INSTANCE  (r5 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) =  kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[Catch: Exception \-\> 0x0041] (LINE:82)\l0x0039: INVOKE  \l  (r5 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)\l  (r0 I:java.lang.reflect.Method A[D('getModuleMethod' java.lang.reflect.Method)])\l  (r3 I:java.lang.reflect.Method A[D('getDescriptorMethod' java.lang.reflect.Method)])\l  (r2 I:java.lang.reflect.Method A[D('nameMethod' java.lang.reflect.Method)])\l type: DIRECT call: kotlin.coroutines.jvm.internal.ModuleNameRetriever.Cache.\<init\>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method):void A[Catch: Exception \-\> 0x0041, MD:(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method):void (m)]\l0x003c: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x003d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:135)\l0x003e: SPUT  \l  (r6 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[D('it' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)])\l kotlin.coroutines.jvm.internal.ModuleNameRetriever.cache kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[Catch: Exception \-\> 0x0041, TRY_LEAVE] (LINE:82)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|0x0040: RETURN  (r5 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|ExcHandler: Exception \-\> 0x0041\l|0x0041: MOVE_EXCEPTION  (r0 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x0041] (LINE:83)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: SGET  (r1 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) =  kotlin.coroutines.jvm.internal.ModuleNameRetriever.notOnJava9 kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache  (LINE:84)\l0x0044: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0045: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:135)\l0x0046: SPUT  \l  (r2 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[D('it' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)])\l kotlin.coroutines.jvm.internal.ModuleNameRetriever.cache kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache  (LINE:84)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|RETURN\l|0x0048: RETURN  (r1 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) \l}"];
MethodNode[shape=record,label="{private final kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache kotlin.coroutines.jvm.internal.ModuleNameRetriever.buildCache((r8 'this' I:kotlin.coroutines.jvm.internal.ModuleNameRetriever A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0048 \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x0041\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003d\-0x0040: r6 'it' Lkotlin\/coroutines\/jvm\/internal\/ModuleNameRetriever$Cache;\l  0x003e\-0x0040: r7 '$i$a$\-also\-ModuleNameRetriever$buildCache$1' I\l  0x000b\-0x0041: r0 'getModuleMethod' Ljava\/lang\/reflect\/Method;\l  0x0019\-0x0041: r1 'methodClass' Ljava\/lang\/Class;\l  0x0037\-0x0041: r2 'nameMethod' Ljava\/lang\/reflect\/Method;\l  0x0021\-0x0041: r3 'getDescriptorMethod' Ljava\/lang\/reflect\/Method;\l  0x002f\-0x0041: r4 'moduleDescriptorClass' Ljava\/lang\/Class;\l  0x0045\-0x0048: r2 'it' Lkotlin\/coroutines\/jvm\/internal\/ModuleNameRetriever$Cache;\l  0x0046\-0x0048: r3 '$i$a$\-also\-ModuleNameRetriever$buildCache$2' I\l  0x0042\-0x0048: r0 'ignored' Ljava\/lang\/Exception;\l  \-1 \-0x0048: r9 'continuation' Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;\lTryCatch #0 \{Exception \-\> 0x0041, blocks: (B:11:0x0000), top: B:16:0x0000 \}\l}"];
MethodNode -> Node_9;Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_17 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_10;
}

