digraph "CFG forkotlin.coroutines.jvm.internal.ModuleNameRetriever.getModuleName(Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;)Ljava\/lang\/String;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"continuation\" \l0x0002: INVOKE  \l  (r7 I:java.lang.Object A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl)])\l  (r0 I:java.lang.String)\l type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) =  kotlin.coroutines.jvm.internal.ModuleNameRetriever.cache kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache  (LINE:66)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x000d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0009|0x0009: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) = \l  (r6 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever)\l  (r7 I:kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl)])\l type: DIRECT call: kotlin.coroutines.jvm.internal.ModuleNameRetriever.buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl):kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[MD:(kotlin.coroutines.jvm.internal.BaseContinuationImpl):kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x000d|0x000d: SGET  (r1 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache) =  kotlin.coroutines.jvm.internal.ModuleNameRetriever.notOnJava9 kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache  (LINE:67)\l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cache' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0013 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|RETURN\l|0x0012: RETURN  (r2 I:java.lang.String)  (LINE:68)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0013|0x0013: IGET  (r1 I:java.lang.reflect.Method) = \l  (r0 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[D('cache' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)])\l kotlin.coroutines.jvm.internal.ModuleNameRetriever.Cache.getModuleMethod java.lang.reflect.Method  (LINE:70)\l0x0015: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0023 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0018|0x0018: INVOKE  (r4 I:java.lang.Class) = (r7 I:java.lang.Object A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x001c: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001e: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.reflect.Method), (r4 I:java.lang.Object), (r5 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0027 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0026|RETURN\l|0x0026: RETURN  (r2 I:java.lang.String) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0027|0x0027: IGET  (r4 I:java.lang.reflect.Method) = \l  (r0 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[D('cache' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)])\l kotlin.coroutines.jvm.internal.ModuleNameRetriever.Cache.getDescriptorMethod java.lang.reflect.Method  (LINE:71)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0029|0x0029: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0032 \l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|0x002b: NEW_ARRAY  (r5 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002d: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.lang.reflect.Method), (r1 I:java.lang.Object A[D('module' java.lang.Object)]), (r5 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0033|0x0033: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0036 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0035|RETURN\l|0x0035: RETURN  (r2 I:java.lang.String) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0036|0x0036: IGET  (r5 I:java.lang.reflect.Method) = \l  (r0 I:kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache A[D('cache' kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache)])\l kotlin.coroutines.jvm.internal.ModuleNameRetriever.Cache.nameMethod java.lang.reflect.Method  (LINE:72)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0038|0x0038: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0041 \l}"];
Node_51 [shape=record,label="{51\:\ 0x003a|0x003a: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x003c: INVOKE  (r3 I:java.lang.Object) = (r5 I:java.lang.reflect.Method), (r4 I:java.lang.Object A[D('descriptor' java.lang.Object)]), (r3 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0042|0x0042: INSTANCE_OF  (r5 I:boolean) = (r3 I:??[OBJECT, ARRAY]) java.lang.String \l}"];
Node_54 [shape=record,label="{54\:\ 0x0044|0x0044: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:? \l}"];
Node_55 [shape=record,label="{55\:\ 0x0046|0x0046: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x0047: CHECK_CAST (r2 I:java.lang.String) = (java.lang.String) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0049|RETURN\lORIG_RETURN\l|0x0049: RETURN  (r2 I:java.lang.String) \l}"];
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lRETURN\l|0x0049: RETURN  (r2 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0041|0x0041: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0032|0x0032: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|0x0023: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.coroutines.jvm.internal.ModuleNameRetriever.getModuleName((r6 'this' I:kotlin.coroutines.jvm.internal.ModuleNameRetriever A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x0026 \-\> B:30:?, CROSS_EDGE: B:48:0x0035 \-\> B:30:?, CROSS_EDGE: B:56:0x0049 \-\> B:30:?, CROSS_EDGE: B:54:0x0044 \-\> B:56:0x0049, CROSS_EDGE: B:52:0x0041 \-\> B:53:0x0042, CROSS_EDGE: B:46:0x0032 \-\> B:47:0x0033, CROSS_EDGE: B:40:0x0023 \-\> B:41:0x0024, CROSS_EDGE: B:32:0x0007 \-\> B:34:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0049: r0 'cache' Lkotlin\/coroutines\/jvm\/internal\/ModuleNameRetriever$Cache;\l  0x0027\-0x0049: r1 'module' Ljava\/lang\/Object;\l  0x0036\-0x0049: r4 'descriptor' Ljava\/lang\/Object;\l  \-1 \-0x0049: r7 'continuation' Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_30;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_30;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_30;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_57;
Node_55 -> Node_56;
Node_56 -> Node_30;
Node_57 -> Node_30;
Node_52 -> Node_53;
Node_46 -> Node_47;
Node_40 -> Node_41;
}

