digraph "CFG forkotlin.coroutines.jvm.internal.ModuleNameRetriever.buildCache(Lkotlin\/coroutines\/jvm\/internal\/BaseContinuationImpl;)Lkotlin\/coroutines\/jvm\/internal\/ModuleNameRetriever$Cache;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0041, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: Exception \-\> 0x0041\l|java.lang.reflect.Method r0 = java.lang.Class.class.getDeclaredMethod(\"getModule\", new java.lang.Class[0])     \/\/ Catch: java.lang.Exception \-\> L41\ljava.lang.Class r1 = r9.getClass().getClassLoader().loadClass(\"java.lang.Module\")     \/\/ Catch: java.lang.Exception \-\> L41\ljava.lang.reflect.Method r3 = r1.getDeclaredMethod(\"getDescriptor\", new java.lang.Class[0])     \/\/ Catch: java.lang.Exception \-\> L41\ljava.lang.Class r4 = r9.getClass().getClassLoader().loadClass(\"java.lang.module.ModuleDescriptor\")     \/\/ Catch: java.lang.Exception \-\> L41\ljava.lang.reflect.Method r2 = r4.getDeclaredMethod(\"name\", new java.lang.Class[0])     \/\/ Catch: java.lang.Exception \-\> L41\lkotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache r5 = new kotlin.coroutines.jvm.internal.ModuleNameRetriever.Cache(r0, r3, r2)     \/\/ Catch: java.lang.Exception \-\> L41\lkotlin.coroutines.jvm.internal.ModuleNameRetriever.cache = r5     \/\/ Catch: java.lang.Exception \-\> L41\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|RETURN\l|return r5\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|ExcHandler: Exception \-\> 0x0041\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache r1 = kotlin.coroutines.jvm.internal.ModuleNameRetriever.notOnJava9\lkotlin.coroutines.jvm.internal.ModuleNameRetriever.cache = r1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private final kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache kotlin.coroutines.jvm.internal.ModuleNameRetriever.buildCache((r8v0 'this' kotlin.coroutines.jvm.internal.ModuleNameRetriever A[IMMUTABLE_TYPE, THIS]), (r9v0 'continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl A[D('continuation' kotlin.coroutines.jvm.internal.BaseContinuationImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0048 \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x0041\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x0041, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_17 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_10;
}

