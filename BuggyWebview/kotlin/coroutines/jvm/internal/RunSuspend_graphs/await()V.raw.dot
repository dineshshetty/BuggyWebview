digraph "CFG forkotlin.coroutines.jvm.internal.RunSuspend.await()V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: MONITOR_ENTER  (r3 I:??[OBJECT, ARRAY])  (LINE:34)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|LOOP_START\lLOOP:0: B:21:0x0002\-\>B:24:0x0007\l}"];
Node_31 [shape=record,label="{31\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x0007, B:25:0x0013), top: B:31:0x0003 \}\lCatch: all \-\> 0x001d\l|0x0003: IGET  (r1 I:kotlin.Result\<kotlin.Unit\>) = (r3 I:kotlin.coroutines.jvm.internal.RunSuspend) kotlin.coroutines.jvm.internal.RunSuspend.result kotlin.Result A[Catch: all \-\> 0x001d, TRY_ENTER] (LINE:36)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' kotlin.Result)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0013  (LINE:37)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|LOOP_END\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x0007, B:25:0x0013), top: B:31:0x0003 \}\lLOOP:0: B:21:0x0002\-\>B:24:0x0007\lCatch: all \-\> 0x001d\l|0x0007: CONST_STR  (r2 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Object\" \l0x0009: INVOKE  (r3 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x001d, MD:(java.lang.Object, java.lang.String):void (m)]\l0x000c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x000d: CHECK_CAST (r2 I:java.lang.Object) = (java.lang.Object) (r2 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x001d]\l0x000f: INVOKE  (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.wait():void A[Catch: all \-\> 0x001d, MD:():void throws java.lang.InterruptedException (c)]\l0x0012: GOTO  \-\> 0x0002 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0013|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x0007, B:25:0x0013), top: B:31:0x0003 \}\lCatch: all \-\> 0x001d\l|0x0013: INVOKE  (r2 I:java.lang.Object) = (r1 I:kotlin.Result A[D('result' kotlin.Result)]) type: VIRTUAL call: kotlin.Result.unbox\-impl():java.lang.Object A[Catch: all \-\> 0x001d, MD:():java.lang.Object (m)] (LINE:39)\l0x0017: INVOKE  (r2 I:java.lang.Object) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[Catch: all \-\> 0x001d, MD:(java.lang.Object):void (m), TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|0x001b: MONITOR_EXIT  (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|RETURN\l|0x001c: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|ExcHandler: all \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001d]\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlin.coroutines.jvm.internal.RunSuspend.await((r3 'this' I:kotlin.coroutines.jvm.internal.RunSuspend A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0007 \-\> B:21:0x0002, CROSS_EDGE: B:30:0x001f \-\> B:18:?, CROSS_EDGE: B:31:0x0003 \-\> B:28:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x001b: r0 '$i$a$\-synchronized\-RunSuspend$await$1' I\l  0x0005\-0x001b: r1 'result' Lkotlin\/Result;\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x0007, B:25:0x0013), top: B:31:0x0003 \}\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_31;
Node_31 -> Node_22;
Node_31 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_21;
Node_33 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_18;
Node_32 -> Node_28;
Node_28 -> Node_30;
Node_30 -> Node_18;
}

