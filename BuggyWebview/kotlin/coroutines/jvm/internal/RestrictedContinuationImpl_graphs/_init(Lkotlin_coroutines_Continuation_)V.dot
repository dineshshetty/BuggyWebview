digraph "CFG forkotlin.coroutines.jvm.internal.RestrictedContinuationImpl.\<init\>(Lkotlin\/coroutines\/Continuation;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|super(r5)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|if (r5 == null) goto L12\l}"];
Node_19 [shape=record,label="{19\:\ 0x0006}"];
Node_20 [shape=record,label="{20\:\ 0x000e|if (r5.getContext() != kotlin.coroutines.EmptyCoroutineContext.INSTANCE) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|r2 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v5 boolean) binds: [B:22:0x0012, B:21:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L7\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017}"];
Node_26 [shape=record,label="{26\:\ 0x0024|throw new java.lang.IllegalArgumentException(\"Coroutines with restricted suspension must have EmptyCoroutineContext\".toString())\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|r2 = false\l}"];
Node_28 [shape=record,label="{28\:\ 0x0026|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.jvm.internal.RestrictedContinuationImpl.\<init\>((r4v0 'this' kotlin.coroutines.jvm.internal.RestrictedContinuationImpl A[IMMUTABLE_TYPE, THIS]), (r5v0 kotlin.coroutines.Continuation\<java.lang.Object\> A[D('completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0026 \-\> B:16:?, CROSS_EDGE: B:22:0x0012 \-\> B:23:0x0013, CROSS_EDGE: B:18:0x0004 \-\> B:28:0x0026\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<Ljava\/lang\/Object;\>;)V\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_29[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_29 -> Node_16;
Node_22 -> Node_23;
Node_28 -> Node_16;
}

