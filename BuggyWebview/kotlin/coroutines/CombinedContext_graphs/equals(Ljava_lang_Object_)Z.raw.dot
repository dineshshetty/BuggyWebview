digraph "CFG forkotlin.coroutines.CombinedContext.equals(Ljava\/lang\/Object;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.Object)])  \-\> B:25:0x001f  (LINE:169)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlin.coroutines.CombinedContext \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0007: CHECK_CAST (r0 I:kotlin.coroutines.CombinedContext) = (kotlin.coroutines.CombinedContext) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:int) = (r0 I:kotlin.coroutines.CombinedContext) type: DIRECT call: kotlin.coroutines.CombinedContext.size():int A[MD:():int (m)]\l0x000d: INVOKE  (r1 I:int) = (r2 I:kotlin.coroutines.CombinedContext) type: DIRECT call: kotlin.coroutines.CombinedContext.size():int A[MD:():int (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|0x0013: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0014: CHECK_CAST (r0 I:kotlin.coroutines.CombinedContext) = (kotlin.coroutines.CombinedContext) (r0 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:kotlin.coroutines.CombinedContext), (r2 I:kotlin.coroutines.CombinedContext) type: DIRECT call: kotlin.coroutines.CombinedContext.containsAll(kotlin.coroutines.CombinedContext):boolean A[MD:(kotlin.coroutines.CombinedContext):boolean (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001d \l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|SYNTHETIC\lRETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0020: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.coroutines.CombinedContext.equals((r2 'this' I:kotlin.coroutines.CombinedContext A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001f \-\> B:26:0x0020, CROSS_EDGE: B:20:0x0011 \-\> B:24:0x001d, CROSS_EDGE: B:18:0x0004 \-\> B:24:0x001d, CROSS_EDGE: B:16:0x0000 \-\> B:25:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r3 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_15;
Node_25 -> Node_15;
}

