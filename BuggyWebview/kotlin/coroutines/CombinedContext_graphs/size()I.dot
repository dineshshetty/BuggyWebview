digraph "CFG forkotlin.coroutines.CombinedContext.size()I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|r0 = r4\lr1 = 2\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|LOOP_START\lLOOP:0: B:14:0x0002\-\>B:20:0x0010\lPHI: r0 r1 \l  PHI: (r0v1 'cur' kotlin.coroutines.CombinedContext) = (r0v0 'cur' kotlin.coroutines.CombinedContext), (r0v2 'cur' kotlin.coroutines.CombinedContext) binds: [B:13:0x0000, B:20:0x0010] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'size' int) = (r1v0 'size' int), (r1v2 'size' int) binds: [B:13:0x0000, B:20:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.coroutines.CoroutineContext r2 = r0.left\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|if ((r2 instanceof kotlin.coroutines.CombinedContext) == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|kotlin.coroutines.CombinedContext r2 = (kotlin.coroutines.CombinedContext) r2\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|PHI: r2 \l  PHI: (r2v2 kotlin.coroutines.CombinedContext) = (r2v1 kotlin.coroutines.CombinedContext), (r2v3 kotlin.coroutines.CombinedContext) binds: [B:17:0x000c, B:16:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 != null) goto L6\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|LOOP_END\lLOOP:0: B:14:0x0002\-\>B:20:0x0010\l|r0 = r2\lint r1 = r1 + 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|r2 = null\l}"];
MethodNode[shape=record,label="{private final int kotlin.coroutines.CombinedContext.size((r4v0 'this' kotlin.coroutines.CombinedContext A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0010 \-\> B:14:0x0002, CROSS_EDGE: B:17:0x000c \-\> B:18:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_21[style=dashed];
Node_20 -> Node_14;
Node_21 -> Node_19;
Node_19 -> Node_12;
Node_17 -> Node_18;
}

