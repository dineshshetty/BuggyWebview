digraph "CFG forkotlin.coroutines.CombinedContext.writeReplace()Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:kotlin.coroutines.CombinedContext) type: DIRECT call: kotlin.coroutines.CombinedContext.size():int A[MD:():int (m)] (LINE:179)\l0x0004: NEW_ARRAY  (r1 I:kotlin.coroutines.CoroutineContext[]) = (r0 I:int A[D('n' int), IMMUTABLE_TYPE]) type: kotlin.coroutines.CoroutineContext[]  (LINE:180)\l0x0006: NEW_INSTANCE  (r2 I:kotlin.jvm.internal.Ref$IntRef) =  kotlin.jvm.internal.Ref$IntRef  (LINE:181)\l0x0008: INVOKE  (r2 I:kotlin.jvm.internal.Ref$IntRef) type: DIRECT call: kotlin.jvm.internal.Ref.IntRef.\<init\>():void A[MD:():void (m)]\l0x000b: SGET  (r3 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:182)\l0x000d: NEW_INSTANCE  (r4 I:kotlin.coroutines.CombinedContext$writeReplace$1) =  kotlin.coroutines.CombinedContext$writeReplace$1 \l0x000f: INVOKE  \l  (r4 I:kotlin.coroutines.CombinedContext$writeReplace$1)\l  (r1 I:kotlin.coroutines.CoroutineContext[] A[D('elements' kotlin.coroutines.CoroutineContext[])])\l  (r2 I:kotlin.jvm.internal.Ref$IntRef A[D('index' kotlin.jvm.internal.Ref$IntRef)])\l type: DIRECT call: kotlin.coroutines.CombinedContext$writeReplace$1.\<init\>(kotlin.coroutines.CoroutineContext[], kotlin.jvm.internal.Ref$IntRef):void A[MD:(kotlin.coroutines.CoroutineContext[], kotlin.jvm.internal.Ref$IntRef):void (m)]\l0x0012: CHECK_CAST (r4 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r4 I:??[OBJECT, ARRAY]) \l0x0014: INVOKE  (r5 I:kotlin.coroutines.CombinedContext), (r3 I:java.lang.Object), (r4 I:kotlin.jvm.functions.Function2) type: VIRTUAL call: kotlin.coroutines.CombinedContext.fold(java.lang.Object, kotlin.jvm.functions.Function2):java.lang.Object A[MD:\<R\>:(R, kotlin.jvm.functions.Function2\<? super R, ? super kotlin.coroutines.CoroutineContext$Element, ? extends R\>):R (m)]\l0x0017: IGET  (r3 I:int) = (r2 I:kotlin.jvm.internal.Ref$IntRef A[D('index' kotlin.jvm.internal.Ref$IntRef)]) kotlin.jvm.internal.Ref.IntRef.element int  (LINE:183)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|0x0019: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)])  \-\> B:16:0x001d \l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|0x001b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|0x001e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0026 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|0x0020: NEW_INSTANCE  (r3 I:kotlin.coroutines.CombinedContext$Serialized) =  kotlin.coroutines.CombinedContext$Serialized  (LINE:185)\l0x0022: INVOKE  \l  (r3 I:kotlin.coroutines.CombinedContext$Serialized)\l  (r1 I:kotlin.coroutines.CoroutineContext[] A[D('elements' kotlin.coroutines.CoroutineContext[])])\l type: DIRECT call: kotlin.coroutines.CombinedContext.Serialized.\<init\>(kotlin.coroutines.CoroutineContext[]):void A[MD:(kotlin.coroutines.CoroutineContext[]):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|0x0025: RETURN  (r3 I:java.lang.Object) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: NEW_INSTANCE  (r3 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:183)\l0x0028: CONST_STR  (r4 I:java.lang.String) =  \"Check failed.\" \l0x002a: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002e: INVOKE  (r3 I:java.lang.IllegalStateException), (r4 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|0x001d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlin.coroutines.CombinedContext.writeReplace((r5 'this' I:kotlin.coroutines.CombinedContext A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0031 \-\> B:12:?, CROSS_EDGE: B:16:0x001d \-\> B:17:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0031: r0 'n' I\l  0x0006\-0x0031: r1 'elements' [Lkotlin\/coroutines\/CoroutineContext;\l  0x000b\-0x0031: r2 'index' Lkotlin\/jvm\/internal\/Ref$IntRef;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

