digraph "CFG forkotlin.coroutines.CombinedContext.size()I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY])  (LINE:144)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:145)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|LOOP_START\lLOOP:0: B:14:0x0002\-\>B:20:0x0010\l|0x0003: IGET  (r2 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlin.coroutines.CombinedContext A[D('cur' kotlin.coroutines.CombinedContext)]) kotlin.coroutines.CombinedContext.left kotlin.coroutines.CoroutineContext  (LINE:147)\l0x0005: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY]) kotlin.coroutines.CombinedContext \l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|0x0009: CHECK_CAST (r2 I:kotlin.coroutines.CombinedContext) = (kotlin.coroutines.CombinedContext) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0010 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|LOOP_END\lLOOP:0: B:14:0x0002\-\>B:20:0x0010\l|0x0010: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlin.coroutines.CombinedContext)]) = (r2 I:??[OBJECT, ARRAY]) \l0x0011: ARITH  (r1 I:int) = (r1 I:int A[D('size' int)]) + (1 int)  (LINE:148)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:int A[D('size' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final int kotlin.coroutines.CombinedContext.size((r4 'this' I:kotlin.coroutines.CombinedContext A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0010 \-\> B:14:0x0002, CROSS_EDGE: B:17:0x000c \-\> B:18:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0013: r0 'cur' Lkotlin\/coroutines\/CombinedContext;\l  0x0002\-0x0013: r1 'size' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_21[style=dashed];
Node_20 -> Node_14;
Node_21 -> Node_19;
Node_19 -> Node_12;
Node_17 -> Node_18;
}

