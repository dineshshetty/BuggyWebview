digraph "CFG forkotlin.coroutines.AbstractCoroutineContextKey.\<init\>(Lkotlin\/coroutines\/CoroutineContext$Key;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"baseKey\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('baseKey' kotlin.coroutines.CoroutineContext$Key)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"safeCast\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('safeCast' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r1 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:46)\l0x000d: IPUT  \l  (r3 I:kotlin.jvm.functions.Function1\<kotlin.coroutines.CoroutineContext$Element, E extends B\> A[D('safeCast' kotlin.jvm.functions.Function1)])\l  (r1 I:kotlin.coroutines.AbstractCoroutineContextKey)\l kotlin.coroutines.AbstractCoroutineContextKey.safeCast kotlin.jvm.functions.Function1  (LINE:50)\l0x000f: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('baseKey' kotlin.coroutines.CoroutineContext$Key)]) kotlin.coroutines.AbstractCoroutineContextKey  (LINE:52)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0019 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('baseKey' kotlin.coroutines.CoroutineContext$Key)]) \l0x0014: CHECK_CAST (r0 I:kotlin.coroutines.AbstractCoroutineContextKey) = (kotlin.coroutines.AbstractCoroutineContextKey) (r0 I:??[OBJECT, ARRAY]) \l0x0016: IGET  (r0 I:kotlin.coroutines.CoroutineContext$Key\<?\>) = (r0 I:kotlin.coroutines.AbstractCoroutineContextKey) kotlin.coroutines.AbstractCoroutineContextKey.topmostKey kotlin.coroutines.CoroutineContext$Key \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|0x001a: IPUT  (r0 I:kotlin.coroutines.CoroutineContext$Key\<?\>), (r1 I:kotlin.coroutines.AbstractCoroutineContextKey) kotlin.coroutines.AbstractCoroutineContextKey.topmostKey kotlin.coroutines.CoroutineContext$Key \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|RETURN\l|0x001c: RETURN    (LINE:48)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('baseKey' kotlin.coroutines.CoroutineContext$Key)]) \l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.AbstractCoroutineContextKey.\<init\>((r1 'this' I:kotlin.coroutines.AbstractCoroutineContextKey\<B extends kotlin.coroutines.CoroutineContext$Element, E extends B\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.CoroutineContext$Key\<B extends kotlin.coroutines.CoroutineContext$Element\> A[D('baseKey' kotlin.coroutines.CoroutineContext$Key), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super kotlin.coroutines.CoroutineContext$Element, ? extends E extends B\> A[D('safeCast' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0019 \-\> B:14:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001c: r2 'baseKey' Lkotlin\/coroutines\/CoroutineContext$Key;\l  \-1 \-0x001c: r3 'safeCast' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [B extends kotlin.coroutines.CoroutineContext$Element, E extends B]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext$Key\<TB;\>;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/coroutines\/CoroutineContext$Element;+TE;\>;)V\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

