digraph "CFG forkotlin.coroutines.CoroutineContext$plus$1.invoke(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext$Element;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"acc\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"element\")\lkotlin.coroutines.CoroutineContext r0 = r7.minusKey(r8.getKey())\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|if (r0 != kotlin.coroutines.EmptyCoroutineContext.INSTANCE) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r8\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|kotlin.coroutines.ContinuationInterceptor r1 = (kotlin.coroutines.ContinuationInterceptor) r0.get(kotlin.coroutines.ContinuationInterceptor.Key)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|if (r1 != null) goto L11\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|kotlin.coroutines.CombinedContext r2 = new kotlin.coroutines.CombinedContext(r0, r8)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|PHI: r2 \l  PHI: (r2v5 'left' kotlin.coroutines.CoroutineContext) = (r2v3 'left' kotlin.coroutines.CoroutineContext), (r2v4 'left' kotlin.coroutines.CoroutineContext), (r2v6 'left' kotlin.coroutines.CoroutineContext) binds: [B:11:0x0045, B:10:0x0038, B:7:0x0026] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0058|RETURN\lORIG_RETURN\l|return r2\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|kotlin.coroutines.CoroutineContext r2 = r0.minusKey(kotlin.coroutines.ContinuationInterceptor.Key)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|if (r2 != kotlin.coroutines.EmptyCoroutineContext.INSTANCE) goto L14\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|r2 = new kotlin.coroutines.CombinedContext(r8, r1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|r2 = new kotlin.coroutines.CombinedContext(new kotlin.coroutines.CombinedContext(r2, r8), r1)\l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.CoroutineContext kotlin.coroutines.CoroutineContext$plus$1.invoke((r6v0 'this' kotlin.coroutines.CoroutineContext$plus$1 A[IMMUTABLE_TYPE, THIS]), (r7v0 'acc' kotlin.coroutines.CoroutineContext A[D('acc' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'element' kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0055 \-\> B:13:0x0058, CROSS_EDGE: B:10:0x0038 \-\> B:12:0x0055, CROSS_EDGE: B:11:0x0045 \-\> B:12:0x0055\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lBRIDGED_BY: kotlin.coroutines.CoroutineContext$plus$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_14;
Node_14 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
}

