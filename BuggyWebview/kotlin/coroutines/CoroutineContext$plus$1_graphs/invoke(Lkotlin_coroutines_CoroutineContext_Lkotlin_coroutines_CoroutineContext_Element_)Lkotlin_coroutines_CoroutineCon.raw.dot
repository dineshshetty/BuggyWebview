digraph "CFG forkotlin.coroutines.CoroutineContext$plus$1.invoke(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext$Element;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"acc\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('acc' kotlin.coroutines.CoroutineContext)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"element\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('element' kotlin.coroutines.CoroutineContext$Element)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Key) = (r8 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)]) type: INTERFACE call: kotlin.coroutines.CoroutineContext.Element.getKey():kotlin.coroutines.CoroutineContext$Key A[MD:():kotlin.coroutines.CoroutineContext$Key\<?\> (m)] (LINE:33)\l0x000e: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r7 I:kotlin.coroutines.CoroutineContext A[D('acc' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.minusKey(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext$Key\<?\>):kotlin.coroutines.CoroutineContext (m)]\l0x0012: SGET  (r1 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:34)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('removed' kotlin.coroutines.CoroutineContext)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) \l0x0017: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x0058: RETURN  (r1 I:kotlin.coroutines.CoroutineContext) A[SYNTHETIC] (LINE:34)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: SGET  (r1 I:kotlin.coroutines.ContinuationInterceptor$Key) =  kotlin.coroutines.ContinuationInterceptor.Key kotlin.coroutines.ContinuationInterceptor$Key  (LINE:36)\l0x001c: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r1 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r0 I:kotlin.coroutines.CoroutineContext A[D('removed' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x0022: CHECK_CAST (r1 I:kotlin.coroutines.ContinuationInterceptor) = (kotlin.coroutines.ContinuationInterceptor) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('interceptor' kotlin.coroutines.ContinuationInterceptor)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x002c  (LINE:37)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|0x0026: NEW_INSTANCE  (r2 I:kotlin.coroutines.CombinedContext) =  kotlin.coroutines.CombinedContext \l0x0028: INVOKE  \l  (r2 I:kotlin.coroutines.CombinedContext)\l  (r0 I:kotlin.coroutines.CoroutineContext A[D('removed' kotlin.coroutines.CoroutineContext)])\l  (r8 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)])\l type: DIRECT call: kotlin.coroutines.CombinedContext.\<init\>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('interceptor' kotlin.coroutines.ContinuationInterceptor)]) = (r2 I:??[OBJECT, ARRAY] A[D('left' kotlin.coroutines.CoroutineContext)]) \l0x0056: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0058|RETURN\lORIG_RETURN\l|0x0058: RETURN  (r1 I:kotlin.coroutines.CoroutineContext)  (LINE:34)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: SGET  (r2 I:kotlin.coroutines.ContinuationInterceptor$Key) =  kotlin.coroutines.ContinuationInterceptor.Key kotlin.coroutines.ContinuationInterceptor$Key  (LINE:38)\l0x002e: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r2 I:??[OBJECT, ARRAY]) \l0x0030: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext) = \l  (r0 I:kotlin.coroutines.CoroutineContext A[D('removed' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.minusKey(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext$Key\<?\>):kotlin.coroutines.CoroutineContext (m)]\l0x0034: SGET  (r3 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:39)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|0x0036: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('left' kotlin.coroutines.CoroutineContext)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0045 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|0x0038: NEW_INSTANCE  (r3 I:kotlin.coroutines.CombinedContext) =  kotlin.coroutines.CombinedContext \l0x003a: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) \l0x003b: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l0x003d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('interceptor' kotlin.coroutines.ContinuationInterceptor)]) \l0x003e: CHECK_CAST (r5 I:kotlin.coroutines.CoroutineContext$Element) = (kotlin.coroutines.CoroutineContext$Element) (r5 I:??[OBJECT, ARRAY]) \l0x0040: INVOKE  \l  (r3 I:kotlin.coroutines.CombinedContext)\l  (r4 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:kotlin.coroutines.CoroutineContext$Element)\l type: DIRECT call: kotlin.coroutines.CombinedContext.\<init\>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void (m)]\l0x0043: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('left' kotlin.coroutines.CoroutineContext)]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0045|0x0045: NEW_INSTANCE  (r3 I:kotlin.coroutines.CombinedContext) =  kotlin.coroutines.CombinedContext  (LINE:40)\l0x0047: NEW_INSTANCE  (r4 I:kotlin.coroutines.CombinedContext) =  kotlin.coroutines.CombinedContext \l0x0049: INVOKE  \l  (r4 I:kotlin.coroutines.CombinedContext)\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('left' kotlin.coroutines.CoroutineContext)])\l  (r8 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)])\l type: DIRECT call: kotlin.coroutines.CombinedContext.\<init\>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void (m)]\l0x004c: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l0x004e: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('interceptor' kotlin.coroutines.ContinuationInterceptor)]) \l0x004f: CHECK_CAST (r5 I:kotlin.coroutines.CoroutineContext$Element) = (kotlin.coroutines.CoroutineContext$Element) (r5 I:??[OBJECT, ARRAY]) \l0x0051: INVOKE  \l  (r3 I:kotlin.coroutines.CombinedContext)\l  (r4 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:kotlin.coroutines.CoroutineContext$Element)\l type: DIRECT call: kotlin.coroutines.CombinedContext.\<init\>(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):void (m)]\l0x0054: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('left' kotlin.coroutines.CoroutineContext)]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.CoroutineContext kotlin.coroutines.CoroutineContext$plus$1.invoke((r6 'this' I:kotlin.coroutines.CoroutineContext$plus$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlin.coroutines.CoroutineContext A[D('acc' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0055 \-\> B:13:0x0058, CROSS_EDGE: B:10:0x0038 \-\> B:12:0x0055, CROSS_EDGE: B:11:0x0045 \-\> B:12:0x0055\lDebug Info:\l  0x0024\-0x0055: r1 'interceptor' Lkotlin\/coroutines\/ContinuationInterceptor;\l  0x0034\-0x0055: r2 'left' Lkotlin\/coroutines\/CoroutineContext;\l  0x0012\-0x0058: r0 'removed' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0058: r7 'acc' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0058: r8 'element' Lkotlin\/coroutines\/CoroutineContext$Element;\lBRIDGED_BY: kotlin.coroutines.CoroutineContext$plus$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_14;
Node_14 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_12;
}

