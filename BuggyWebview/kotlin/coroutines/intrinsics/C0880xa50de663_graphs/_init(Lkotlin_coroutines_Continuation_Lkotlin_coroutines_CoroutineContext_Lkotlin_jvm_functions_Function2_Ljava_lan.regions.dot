digraph "CFG forkotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.\<init\>(Lkotlin\/coroutines\/Continuation;Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/jvm\/functions\/Function2;Ljava\/lang\/Object;)V" {
subgraph cluster_Region_1626522064 {
label = "R(2:1|(1:1))";
node [shape=record,color=blue];
Node_InsnContainer_1216057720 [shape=record,label="{|super(r1, r2)\l}"];
subgraph cluster_Region_1676472643 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|r0.$this_createCoroutineUnintercepted$inlined = r3\lr0.$receiver$inlined = r4\lkotlin.jvm.internal.Intrinsics.checkNotNull(r1, \"null cannot be cast to non\-null type kotlin.coroutines.Continuation\<kotlin.Any?\>\")\l}"];
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.\<init\>((r0v0 'this' kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4 A[IMMUTABLE_TYPE, THIS]), (r1v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 '$context' kotlin.coroutines.CoroutineContext A[D('$context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function2 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | NO_SKIP_ARGS\lANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l WARN: \l \-\> 'super' call moved to the top of the method (can break code semantics)\}\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_0 -> Node_2;
Node_3 -> Node_1;
}

