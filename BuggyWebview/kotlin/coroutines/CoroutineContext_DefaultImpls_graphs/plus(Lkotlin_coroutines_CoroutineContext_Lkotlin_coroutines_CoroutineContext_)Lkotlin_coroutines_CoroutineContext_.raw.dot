digraph "CFG forkotlin.coroutines.CoroutineContext.DefaultImpls.plus(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"context\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('context' kotlin.coroutines.CoroutineContext)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:31)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('context' kotlin.coroutines.CoroutineContext)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this' kotlin.coroutines.CoroutineContext)]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) A[SYNTHETIC] (LINE:43)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: SGET  (r0 I:kotlin.coroutines.CoroutineContext$plus$1) =  kotlin.coroutines.CoroutineContext$plus$1.INSTANCE kotlin.coroutines.CoroutineContext$plus$1  (LINE:32)\l0x000d: CHECK_CAST (r0 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r0 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r1 I:java.lang.Object A[D('$this' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.jvm.functions.Function2)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.fold(java.lang.Object, kotlin.jvm.functions.Function2):java.lang.Object A[MD:\<R\>:(R, kotlin.jvm.functions.Function2\<? super R, ? super kotlin.coroutines.CoroutineContext$Element, ? extends R\>):R (m)]\l0x0013: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: RETURN  (r0 I:kotlin.coroutines.CoroutineContext)  (LINE:43)\l}"];
MethodNode[shape=record,label="{public static kotlin.coroutines.CoroutineContext kotlin.coroutines.CoroutineContext.DefaultImpls.plus((r1 I:kotlin.coroutines.CoroutineContext A[D('$this' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000b \-\> B:14:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r1 '$this' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0015: r2 'context' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

