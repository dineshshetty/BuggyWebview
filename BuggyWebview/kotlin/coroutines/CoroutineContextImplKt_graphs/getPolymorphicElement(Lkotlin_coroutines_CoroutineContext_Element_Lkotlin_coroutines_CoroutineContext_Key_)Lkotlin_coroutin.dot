digraph "CFG forkotlin.coroutines.CoroutineContextImplKt.getPolymorphicElement(Lkotlin\/coroutines\/CoroutineContext$Element;Lkotlin\/coroutines\/CoroutineContext$Key;)Lkotlin\/coroutines\/CoroutineContext$Element;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"key\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if ((r4 instanceof kotlin.coroutines.AbstractCoroutineContextKey) == false) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (((kotlin.coroutines.AbstractCoroutineContextKey) r4).isSubKey$kotlin_stdlib(r3.getKey()) == false) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|kotlin.coroutines.CoroutineContext$Element r0 = (E) ((kotlin.coroutines.AbstractCoroutineContextKey) r4).tryCast$kotlin_stdlib(r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|if ((r0 instanceof kotlin.coroutines.CoroutineContext.Element) == false) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x0027}"];
Node_9 [shape=record,label="{9\:\ 0x0028|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029}"];
Node_11 [shape=record,label="{11\:\ 0x002d|if (r3.getKey() != r4) goto L16\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f}"];
Node_13 [shape=record,label="{13\:\ 0x0030|RETURN\lORIG_RETURN\l|return r3\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static final E extends kotlin.coroutines.CoroutineContext$Element kotlin.coroutines.CoroutineContextImplKt.getPolymorphicElement((r3v0 '$this$getPolymorphicElement' kotlin.coroutines.CoroutineContext$Element A[D('$this$getPolymorphicElement' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'key' kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\> A[D('key' kotlin.coroutines.CoroutineContext$Key), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0025 \-\> B:9:0x0028, CROSS_EDGE: B:5:0x001a \-\> B:9:0x0028, CROSS_EDGE: B:13:0x0030 \-\> B:1:?, CROSS_EDGE: B:11:0x002d \-\> B:13:0x0030\lTYPE_VARS: [E extends kotlin.coroutines.CoroutineContext$Element]\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r3v0, resolved type: kotlin.coroutines.CoroutineContext$Element\}\lSIGNATURE: \<E::Lkotlin\/coroutines\/CoroutineContext$Element;\>(Lkotlin\/coroutines\/CoroutineContext$Element;Lkotlin\/coroutines\/CoroutineContext$Key\<TE;\>;)TE;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_15 -> Node_1;
Node_14 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_16 -> Node_1;
}

