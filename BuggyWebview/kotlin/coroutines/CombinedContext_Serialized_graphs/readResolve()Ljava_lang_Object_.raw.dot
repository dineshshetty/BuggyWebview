digraph "CFG forkotlin.coroutines.CombinedContext.Serialized.readResolve()Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.coroutines.CoroutineContext[]) = (r10 I:kotlin.coroutines.CombinedContext$Serialized) kotlin.coroutines.CombinedContext.Serialized.elements kotlin.coroutines.CoroutineContext[]  (LINE:193)\l0x0002: SGET  (r1 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('initial$iv' java.lang.Object)])  (LINE:197)\l0x0006: ARRAY_LENGTH  (r4 I:int) = (r0 I:??[] A[D('$this$fold$iv' java.lang.Object[])])  (LINE:198)\l0x0007: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|LOOP_START\lLOOP:0: B:11:0x0008\-\>B:12:0x000a\l|0x0008: IF  (r5 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:15:0x0019 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|LOOP_END\lLOOP:0: B:11:0x0008\-\>B:12:0x000a\l|0x000a: AGET  (r6 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('$this$fold$iv' java.lang.Object[])]), (r5 I:??[int, short, byte, char]) \l0x000c: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('accumulator$iv' java.lang.Object)]) \l0x000d: CHECK_CAST (r7 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r7 I:??[OBJECT, ARRAY]) \l0x000f: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0010: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:kotlin.coroutines.CoroutineContext A[D('accumulator$iv' java.lang.Object)]) = \l  (r7 I:kotlin.coroutines.CoroutineContext A[D('p0' kotlin.coroutines.CoroutineContext)])\l  (r8 I:kotlin.coroutines.CoroutineContext A[D('p1' kotlin.coroutines.CoroutineContext)])\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)] (LINE:193)\l0x0015: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|RETURN\l|0x0019: RETURN  (r3 I:java.lang.Object A[D('accumulator$iv' java.lang.Object)])  (LINE:193)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlin.coroutines.CombinedContext.Serialized.readResolve((r10 'this' I:kotlin.coroutines.CombinedContext$Serialized A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x000a \-\> B:11:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0015: r7 'p0' Lkotlin\/coroutines\/CoroutineContext;\l  0x0010\-0x0015: r8 'p1' Lkotlin\/coroutines\/CoroutineContext;\l  0x0011\-0x0015: r9 '$i$a$\-fold\-CombinedContext$Serialized$readResolve$1' I\l  0x000c\-0x0018: r6 'element$iv' Ljava\/lang\/Object;\l  0x0002\-0x0019: r0 '$this$fold$iv' [Ljava\/lang\/Object;\l  0x0004\-0x0019: r1 'initial$iv' Ljava\/lang\/Object;\l  0x0005\-0x0019: r2 '$i$f$fold' I\l  0x0006\-0x0019: r3 'accumulator$iv' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

