digraph "CFG forkotlin.ULong.equals\-impl(JLjava\/lang\/Object;)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY]) kotlin.ULong \l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0006 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0007: CHECK_CAST (r0 I:kotlin.ULong) = (kotlin.ULong) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r2 I:long) = (r0 I:kotlin.ULong) type: VIRTUAL call: kotlin.ULong.unbox\-impl():long A[MD:():long (m)]\l0x000d: CMP_L  (r0 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0012 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|RETURN\l|0x0011: RETURN  (r1 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|RETURN\l|0x0012: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0013: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean kotlin.ULong.equals\-impl((r4 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:27:0x0011 \-\> B:21:?, CROSS_EDGE: B:29:0x0013 \-\> B:21:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_21;
Node_28 -> Node_21;
}

