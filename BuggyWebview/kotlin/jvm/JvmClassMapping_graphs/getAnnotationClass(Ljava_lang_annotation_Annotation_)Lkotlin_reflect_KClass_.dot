digraph "CFG forkotlin.jvm.JvmClassMappingKt.getAnnotationClass(Ljava\/lang\/annotation\/Annotation;)Lkotlin\/reflect\/KClass;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\ljava.lang.Class r0 = r2.annotationType()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"this as java.lang.annotaâ€¦otation).annotationType()\")\lkotlin.reflect.KClass r0 = getKotlinClass(r0)\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0, \"null cannot be cast to non\-null type kotlin.reflect.KClass\<out T of kotlin.jvm.JvmClassMappingKt.\<get\-annotationClass\>\>\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.reflect.KClass\<? extends T extends java.lang.annotation.Annotation\> kotlin.jvm.JvmClassMappingKt.getAnnotationClass((r2v0 T extends java.lang.annotation.Annotation A[D('$this$annotationClass' java.lang.annotation.Annotation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends java.lang.annotation.Annotation]\lSIGNATURE: \<T::Ljava\/lang\/annotation\/Annotation;\>(TT;)Lkotlin\/reflect\/KClass\<+TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

