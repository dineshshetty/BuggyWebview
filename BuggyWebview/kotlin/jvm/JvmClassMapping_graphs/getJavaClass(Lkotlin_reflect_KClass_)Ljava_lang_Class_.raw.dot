digraph "CFG forkotlin.jvm.JvmClassMappingKt.getJavaClass(Lkotlin\/reflect\/KClass;)Ljava\/lang\/Class;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$java' kotlin.reflect.KClass)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$java' kotlin.reflect.KClass)])  (LINE:29)\l0x0006: CHECK_CAST (r0 I:kotlin.jvm.internal.ClassBasedDeclarationContainer) = (kotlin.jvm.internal.ClassBasedDeclarationContainer) (r0 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:java.lang.Class) = (r0 I:kotlin.jvm.internal.ClassBasedDeclarationContainer) type: INTERFACE call: kotlin.jvm.internal.ClassBasedDeclarationContainer.getJClass():java.lang.Class A[MD:():java.lang.Class\<?\> (m)]\l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Class\<T of kotlin.jvm.JvmClassMappingKt.\<get\-java\>\>\" \l0x000e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:java.lang.Class\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.Class\<T\> kotlin.jvm.JvmClassMappingKt.getJavaClass((r2 I:kotlin.reflect.KClass\<T\> A[D('$this$java' kotlin.reflect.KClass), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r2 '$this$java' Lkotlin\/reflect\/KClass;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/reflect\/KClass\<TT;\>;)Ljava\/lang\/Class\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

