digraph "CFG forkotlin.jvm.internal.TypeParameterReference.hashCode()I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r2 I:kotlin.jvm.internal.TypeParameterReference) kotlin.jvm.internal.TypeParameterReference.container java.lang.Object  (LINE:40)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0009 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|0x000a: ARITH  (r0 I:int) = (r0 I:int) * (31 int) \l0x000c: INVOKE  (r1 I:java.lang.String) = (r2 I:kotlin.jvm.internal.TypeParameterReference) type: VIRTUAL call: kotlin.jvm.internal.TypeParameterReference.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x0010: INVOKE  (r1 I:int) = (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.hashCode():int A[MD:():int (c)]\l0x0014: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public int kotlin.jvm.internal.TypeParameterReference.hashCode((r2 'this' I:kotlin.jvm.internal.TypeParameterReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0009 \-\> B:14:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

