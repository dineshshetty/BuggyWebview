digraph "CFG forkotlin.jvm.internal.TypeParameterReference.getUpperBounds()Ljava\/util\/List;" {
subgraph cluster_Region_1340997279 {
label = "R(2:1|(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|java.util.List\<? extends kotlin.reflect.KType\> java.util.List r0 = r3.bounds\l}"];
subgraph cluster_Region_228880574 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1544609749 {
label = "IF [B:10:0x0002] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_955956909 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|java.util.List java.util.List r0 = kotlin.collections.CollectionsKt.listOf(kotlin.jvm.internal.Reflection.nullableTypeOf(java.lang.Object.class))\lr3.bounds = r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0012|RETURN\lORIG_RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_935567822 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.List\<kotlin.reflect.KType\> kotlin.jvm.internal.TypeParameterReference.getUpperBounds((r3v0 'this' kotlin.jvm.internal.TypeParameterReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0012\lINLINE_NOT_NEEDED\lSIGNATURE: ()Ljava\/util\/List\<Lkotlin\/reflect\/KType;\>;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r0v0. Raw type applied. Possible types: java.util.List\<? extends kotlin.reflect.KType\>, java.util.List\<kotlin.reflect.KType\>\}\lMETHOD_OVERRIDE: [kotlin.reflect.KTypeParameter.getUpperBounds():java.util.List\<kotlin.reflect.KType\>]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

