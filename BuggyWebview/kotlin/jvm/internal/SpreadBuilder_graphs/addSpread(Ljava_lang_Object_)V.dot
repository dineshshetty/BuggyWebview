digraph "CFG forkotlin.jvm.internal.SpreadBuilder.addSpread(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r5 != null) goto L4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003}"];
Node_5 [shape=record,label="{5\:\ 0x0005|if ((r5 instanceof java.lang.Object[]) == false) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|java.lang.Object[] r0 = (java.lang.Object[]) r5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|if (r0.length \<= 0) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|java.util.ArrayList\<java.lang.Object\> r1 = r4.list\lr1.ensureCapacity(r1.size() + r0.length)\ljava.util.Collections.addAll(r4.list, r0)\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if ((r5 instanceof java.util.Collection) == false) goto L15\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|r4.list.addAll((java.util.Collection) r5)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|RETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d}"];
Node_14 [shape=record,label="{14\:\ 0x002f|if ((r5 instanceof java.lang.Iterable) == false) goto L23\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|java.util.Iterator r0 = ((java.lang.Iterable) r5).iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|LOOP_START\lLOOP:0: B:16:0x0038\-\>B:18:0x003e\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|if (r0.hasNext() == false) goto L21\l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|LOOP_END\lLOOP:0: B:16:0x0038\-\>B:18:0x003e\l|java.lang.Object r1 = r0.next()\lr4.list.add(r1)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0061|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ 0x0049}"];
Node_21 [shape=record,label="{21\:\ 0x004b|if ((r5 instanceof java.util.Iterator) == false) goto L31\l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|java.util.Iterator r0 = (java.util.Iterator) r5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|LOOP_START\lLOOP:1: B:23:0x0050\-\>B:25:0x0056\l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|if (r0.hasNext() == false) goto L29\l}"];
Node_25 [shape=record,label="{25\:\ 0x0056|LOOP_END\lLOOP:1: B:23:0x0050\-\>B:25:0x0056\l|r4.list.add(r0.next())\l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ 0x0062|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Don't know how to spread \")\lr1.append(r5.getClass())\l}"];
Node_29 [shape=record,label="{29\:\ 0x007c|throw new java.lang.UnsupportedOperationException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void kotlin.jvm.internal.SpreadBuilder.addSpread((r4v0 'this' kotlin.jvm.internal.SpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r5v0 'container' java.lang.Object A[D('container' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0061 \-\> B:1:?, CROSS_EDGE: B:7:0x000d \-\> B:27:0x0061, CROSS_EDGE: B:12:0x0024 \-\> B:27:0x0061, BACK_EDGE: B:18:0x003e \-\> B:16:0x0038, CROSS_EDGE: B:17:0x003c \-\> B:27:0x0061, BACK_EDGE: B:25:0x0056 \-\> B:23:0x0050, CROSS_EDGE: B:24:0x0054 \-\> B:27:0x0061, CROSS_EDGE: B:29:0x007c \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_33;
Node_8 -> Node_32;
Node_32 -> Node_1;
Node_33 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_27;
Node_27 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_30;
Node_18 -> Node_16;
Node_30 -> Node_34;
Node_34 -> Node_1;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_23;
Node_31 -> Node_35;
Node_35 -> Node_1;
Node_28 -> Node_29;
Node_29 -> Node_1;
}

