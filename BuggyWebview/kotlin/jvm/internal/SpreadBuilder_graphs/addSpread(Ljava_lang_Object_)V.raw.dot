digraph "CFG forkotlin.jvm.internal.SpreadBuilder.addSpread(Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('container' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0003  (LINE:23)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|RETURN\l|0x0002: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|0x0003: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)]) java.lang.Object[]  (LINE:25)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0020 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)])  (LINE:26)\l0x0008: CHECK_CAST (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:??[OBJECT, ARRAY]) \l0x000a: CHECK_CAST (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:??[OBJECT, ARRAY]) \l0x000c: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[] A[D('array' java.lang.Object[])])  (LINE:27)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:33:? \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IGET  (r1 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList  (LINE:28)\l0x0011: INVOKE  (r2 I:int) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x0015: ARRAY_LENGTH  (r3 I:int) = (r0 I:??[] A[D('array' java.lang.Object[])]) \l0x0016: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0017: INVOKE  (r1 I:java.util.ArrayList), (r2 I:int) type: VIRTUAL call: java.util.ArrayList.ensureCapacity(int):void A[MD:(int):void (c)]\l0x001a: IGET  (r1 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList  (LINE:29)\l0x001c: INVOKE  (r1 I:java.util.Collection), (r0 I:java.lang.Object[] A[D('array' java.lang.Object[])]) type: STATIC call: java.util.Collections.addAll(java.util.Collection, java.lang.Object[]):boolean A[MD:\<T\>:(java.util.Collection\<? super T\>, T[]):boolean VARARG (c)]\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x0061: RETURN   A[SYNTHETIC] (LINE:48)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0061: RETURN   A[SYNTHETIC] (LINE:48)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)]) java.util.Collection  (LINE:32)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|0x0024: IGET  (r0 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList  (LINE:33)\l0x0026: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)]) \l0x0027: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r0 I:java.util.ArrayList), (r1 I:java.util.Collection) type: VIRTUAL call: java.util.ArrayList.addAll(java.util.Collection):boolean A[MD:(java.util.Collection\<? extends E\>):boolean (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0061|RETURN\lORIG_RETURN\l|0x0061: RETURN    (LINE:48)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)]) java.lang.Iterable  (LINE:35)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0049 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)])  (LINE:36)\l0x0032: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.lang.Iterable) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|LOOP_START\lLOOP:0: B:16:0x0038\-\>B:18:0x003e\l|0x0038: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('i$' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|0x003c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0061 \l}"];
Node_18 [shape=record,label="{18\:\ 0x003e|LOOP_END\lLOOP:0: B:16:0x0038\-\>B:18:0x003e\l|0x003e: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('i$' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0042: IGET  (r2 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList  (LINE:37)\l0x0044: INVOKE  (r2 I:java.util.ArrayList), (r1 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0061|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0061: RETURN   A[SYNTHETIC] (LINE:48)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|0x0049: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)]) java.util.Iterator  (LINE:40)\l}"];
Node_21 [shape=record,label="{21\:\ 0x004b|0x004b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0062 \l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|0x004d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('container' java.lang.Object)])  (LINE:41)\l0x004e: CHECK_CAST (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|LOOP_START\lLOOP:1: B:23:0x0050\-\>B:25:0x0056\l|0x0050: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0054|0x0054: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0061 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0056|LOOP_END\lLOOP:1: B:23:0x0050\-\>B:25:0x0056\l|0x0056: IGET  (r1 I:java.util.ArrayList\<java.lang.Object\>) = (r4 I:kotlin.jvm.internal.SpreadBuilder) kotlin.jvm.internal.SpreadBuilder.list java.util.ArrayList  (LINE:42)\l0x0058: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x005c: INVOKE  (r1 I:java.util.ArrayList), (r2 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0061: RETURN   A[SYNTHETIC] (LINE:48)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0062|0x0062: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException  (LINE:46)\l0x0064: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0066: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0069: CONST_STR  (r2 I:java.lang.String) =  \"Don't know how to spread \" \l0x006b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x006e: INVOKE  (r2 I:java.lang.Class) = (r5 I:java.lang.Object A[D('container' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x0072: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0075: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0079: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x007c|0x007c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.jvm.internal.SpreadBuilder.addSpread((r4 'this' I:kotlin.jvm.internal.SpreadBuilder A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[D('container' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0061 \-\> B:1:?, CROSS_EDGE: B:7:0x000d \-\> B:27:0x0061, CROSS_EDGE: B:12:0x0024 \-\> B:27:0x0061, BACK_EDGE: B:18:0x003e \-\> B:16:0x0038, CROSS_EDGE: B:17:0x003c \-\> B:27:0x0061, BACK_EDGE: B:25:0x0056 \-\> B:23:0x0050, CROSS_EDGE: B:24:0x0054 \-\> B:27:0x0061, CROSS_EDGE: B:29:0x007c \-\> B:1:?\lDebug Info:\l  0x000c\-0x001f: r0 'array' [Ljava\/lang\/Object;\l  0x0038\-0x0048: r0 'i$' Ljava\/util\/Iterator;\l  0x0042\-0x0048: r1 'element' Ljava\/lang\/Object;\l  0x0050\-0x0060: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x007c: r5 'container' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_33;
Node_8 -> Node_32;
Node_32 -> Node_1;
Node_33 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_27;
Node_27 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_30;
Node_18 -> Node_16;
Node_30 -> Node_34;
Node_34 -> Node_1;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_23;
Node_31 -> Node_35;
Node_35 -> Node_1;
Node_28 -> Node_29;
Node_29 -> Node_1;
}

