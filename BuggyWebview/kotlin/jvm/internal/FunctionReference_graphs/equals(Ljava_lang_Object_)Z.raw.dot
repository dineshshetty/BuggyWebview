digraph "CFG forkotlin.jvm.internal.FunctionReference.equals(Ljava\/lang\/Object;)Z" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:104)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0001|0x0001: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('obj' java.lang.Object)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0004 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)]) kotlin.jvm.internal.FunctionReference  (LINE:105)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0053 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|0x0009: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)])  (LINE:106)\l0x000a: CHECK_CAST (r1 I:kotlin.jvm.internal.FunctionReference) = (kotlin.jvm.internal.FunctionReference) (r1 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getName():java.lang.String A[MD:():java.lang.String (m)] (LINE:108)\l0x0010: INVOKE  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x0014: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_37 [shape=record,label="{37\:\ 0x001a|0x001a: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getSignature():java.lang.String A[MD:():java.lang.String (m)]\l0x001e: INVOKE  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getSignature():java.lang.String A[MD:():java.lang.String (m)]\l0x0022: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|0x0026: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|0x0028: IGET  (r3 I:int) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.flags int \l0x002a: IGET  (r4 I:int) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) kotlin.jvm.internal.FunctionReference.flags int \l}"];
Node_40 [shape=record,label="{40\:\ 0x002c|0x002c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: IGET  (r3 I:int) = (r5 I:kotlin.jvm.internal.FunctionReference) kotlin.jvm.internal.FunctionReference.arity int \l0x0030: IGET  (r4 I:int) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) kotlin.jvm.internal.FunctionReference.arity int \l}"];
Node_42 [shape=record,label="{42\:\ 0x0032|0x0032: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0034|0x0034: INVOKE  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getBoundReceiver():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0038: INVOKE  (r4 I:java.lang.Object) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getBoundReceiver():java.lang.Object A[MD:():java.lang.Object (m)]\l0x003c: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0040|0x0040: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0042|0x0042: INVOKE  (r3 I:kotlin.reflect.KDeclarationContainer) = (r5 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer A[MD:():kotlin.reflect.KDeclarationContainer (m)]\l0x0046: INVOKE  (r4 I:kotlin.reflect.KDeclarationContainer) = (r1 I:kotlin.jvm.internal.FunctionReference A[D('other' kotlin.jvm.internal.FunctionReference)]) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getOwner():kotlin.reflect.KDeclarationContainer A[MD:():kotlin.reflect.KDeclarationContainer (m)]\l0x004a: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x004e|0x004e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051 \l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lRETURN\l|0x0052: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0051|RETURN\lORIG_RETURN\l|0x0051: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0052: RETURN  (r0 I:boolean) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0053|0x0053: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)]) kotlin.reflect.KFunction  (LINE:115)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0055|0x0055: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0060 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0057|0x0057: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r5 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.compute():kotlin.reflect.KCallable A[MD:():kotlin.reflect.KCallable (m)] (LINE:116)\l0x005b: INVOKE  (r0 I:boolean) = (r6 I:java.lang.Object A[D('obj' java.lang.Object)]), (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x005f|RETURN\l|0x005f: RETURN  (r0 I:boolean) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0060|RETURN\l|0x0060: RETURN  (r2 I:boolean)  (LINE:118)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.FunctionReference.equals((r5 'this' I:kotlin.jvm.internal.FunctionReference A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x0052 \-\> B:29:?, CROSS_EDGE: B:46:0x004e \-\> B:49:0x0052, CROSS_EDGE: B:44:0x0040 \-\> B:48:0x0051, CROSS_EDGE: B:42:0x0032 \-\> B:48:0x0051, CROSS_EDGE: B:40:0x002c \-\> B:48:0x0051, CROSS_EDGE: B:38:0x0026 \-\> B:48:0x0051, CROSS_EDGE: B:36:0x0018 \-\> B:48:0x0051, CROSS_EDGE: B:53:0x005f \-\> B:29:?, CROSS_EDGE: B:54:0x0060 \-\> B:29:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0053: r1 'other' Lkotlin\/jvm\/internal\/FunctionReference;\l  \-1 \-0x0060: r6 'obj' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.jvm.internal.FunctionReference.equals(java.lang.Object):boolean]\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_29;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_50;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_48;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_48;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_48;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_48;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_48;
Node_46 -> Node_55[style=dashed];
Node_55 -> Node_29;
Node_48 -> Node_29;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_54;
Node_52 -> Node_53;
Node_53 -> Node_29;
Node_54 -> Node_29;
}

