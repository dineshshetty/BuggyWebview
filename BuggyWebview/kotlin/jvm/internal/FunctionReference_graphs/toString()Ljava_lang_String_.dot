digraph "CFG forkotlin.jvm.internal.FunctionReference.toString()Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.reflect.KCallable r0 = compute()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|if (r0 == r3) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return r0.toString()\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b}"];
Node_19 [shape=record,label="{19\:\ 0x0015|if (\"\<init\>\".equals(getName()) == false) goto L9\l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|SYNTHETIC\lRETURN\l|return \"constructor (Kotlin reflection is not available)\"\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"function \")\lr1.append(getName())\lr1.append(\" (Kotlin reflection is not available)\")\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|RETURN\lORIG_RETURN\l|return r1.toString()\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.jvm.internal.FunctionReference.toString((r3v0 'this' kotlin.jvm.internal.FunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0034 \-\> B:13:?, CROSS_EDGE: B:21:0x001a \-\> B:22:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.jvm.internal.FunctionReference.toString():java.lang.String]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

