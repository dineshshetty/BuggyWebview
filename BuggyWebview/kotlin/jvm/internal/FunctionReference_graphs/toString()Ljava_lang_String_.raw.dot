digraph "CFG forkotlin.jvm.internal.FunctionReference.toString()Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r3 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.compute():kotlin.reflect.KCallable A[MD:():kotlin.reflect.KCallable (m)] (LINE:128)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('reflected' kotlin.reflect.KCallable)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b  (LINE:129)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: INVOKE  (r1 I:java.lang.String) = (r0 I:java.lang.Object A[D('reflected' kotlin.reflect.KCallable)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:130)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|0x000a: RETURN  (r1 I:java.lang.String) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: INVOKE  (r1 I:java.lang.String) = (r3 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getName():java.lang.String A[MD:():java.lang.String (m)] (LINE:134)\l0x000f: CONST_STR  (r2 I:java.lang.String) =  \"\<init\>\" \l0x0011: INVOKE  (r1 I:boolean) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|SYNTHETIC\lRETURN\l|0x0017: CONST_STR  (r1 I:java.lang.String) =  \"constructor (Kotlin reflection is not available)\" \l0x0034: RETURN  (r1 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|0x001a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001f: CONST_STR  (r2 I:java.lang.String) =  \"function \" \l0x0021: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0024: INVOKE  (r2 I:java.lang.String) = (r3 I:kotlin.jvm.internal.FunctionReference) type: VIRTUAL call: kotlin.jvm.internal.FunctionReference.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x0028: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002b: CONST_STR  (r2 I:java.lang.String) =  \" (Kotlin reflection is not available)\" \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0030: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|RETURN\lORIG_RETURN\l|0x0034: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.jvm.internal.FunctionReference.toString((r3 'this' I:kotlin.jvm.internal.FunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0034 \-\> B:13:?, CROSS_EDGE: B:21:0x001a \-\> B:22:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0034: r0 'reflected' Lkotlin\/reflect\/KCallable;\lMETHOD_OVERRIDE: [kotlin.jvm.internal.FunctionReference.toString():java.lang.String]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

