digraph "CFG forkotlin.jvm.internal.PropertyReference.equals(Ljava\/lang\/Object;)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:48)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0001|0x0001: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('obj' java.lang.Object)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0004 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)]) kotlin.jvm.internal.PropertyReference  (LINE:49)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0047 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0009|0x0009: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)])  (LINE:50)\l0x000a: CHECK_CAST (r1 I:kotlin.jvm.internal.PropertyReference) = (kotlin.jvm.internal.PropertyReference) (r1 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r3 I:kotlin.reflect.KDeclarationContainer) = (r5 I:kotlin.jvm.internal.PropertyReference) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getOwner():kotlin.reflect.KDeclarationContainer A[MD:():kotlin.reflect.KDeclarationContainer (m)] (LINE:51)\l0x0010: INVOKE  (r4 I:kotlin.reflect.KDeclarationContainer) = (r1 I:kotlin.jvm.internal.PropertyReference A[D('other' kotlin.jvm.internal.PropertyReference)]) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getOwner():kotlin.reflect.KDeclarationContainer A[MD:():kotlin.reflect.KDeclarationContainer (m)]\l0x0014: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0045 \l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.PropertyReference) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x001e: INVOKE  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.PropertyReference A[D('other' kotlin.jvm.internal.PropertyReference)]) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x0022: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0026|0x0026: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0045 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|0x0028: INVOKE  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.PropertyReference) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getSignature():java.lang.String A[MD:():java.lang.String (m)]\l0x002c: INVOKE  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.PropertyReference A[D('other' kotlin.jvm.internal.PropertyReference)]) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getSignature():java.lang.String A[MD:():java.lang.String (m)]\l0x0030: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0034|0x0034: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0045 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0036|0x0036: INVOKE  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.internal.PropertyReference) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getBoundReceiver():java.lang.Object A[MD:():java.lang.Object (m)]\l0x003a: INVOKE  (r4 I:java.lang.Object) = (r1 I:kotlin.jvm.internal.PropertyReference A[D('other' kotlin.jvm.internal.PropertyReference)]) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.getBoundReceiver():java.lang.Object A[MD:():java.lang.Object (m)]\l0x003e: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0042|0x0042: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0045 \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0045|RETURN\lORIG_RETURN\l|0x0045: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0046: RETURN  (r0 I:boolean) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0047|0x0047: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)]) kotlin.reflect.KProperty  (LINE:56)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0049|0x0049: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0054 \l}"];
Node_44 [shape=record,label="{44\:\ 0x004b|0x004b: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r5 I:kotlin.jvm.internal.PropertyReference) type: VIRTUAL call: kotlin.jvm.internal.PropertyReference.compute():kotlin.reflect.KCallable A[MD:():kotlin.reflect.KCallable (m)] (LINE:57)\l0x004f: INVOKE  (r0 I:boolean) = (r6 I:java.lang.Object A[D('obj' java.lang.Object)]), (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0053|RETURN\l|0x0053: RETURN  (r0 I:boolean) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0054|RETURN\l|0x0054: RETURN  (r2 I:boolean)  (LINE:59)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.PropertyReference.equals((r5 'this' I:kotlin.jvm.internal.PropertyReference A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x0046 \-\> B:25:?, CROSS_EDGE: B:38:0x0042 \-\> B:41:0x0046, CROSS_EDGE: B:36:0x0034 \-\> B:40:0x0045, CROSS_EDGE: B:34:0x0026 \-\> B:40:0x0045, CROSS_EDGE: B:32:0x0018 \-\> B:40:0x0045, CROSS_EDGE: B:45:0x0053 \-\> B:25:?, CROSS_EDGE: B:46:0x0054 \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0047: r1 'other' Lkotlin\/jvm\/internal\/PropertyReference;\l  \-1 \-0x0054: r6 'obj' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_25;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_42;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_47[style=dashed];
Node_47 -> Node_25;
Node_40 -> Node_25;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_46;
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_46 -> Node_25;
}

