digraph "CFG forkotlin.jvm.internal.TypeReference$asString$args$1.invoke(Lkotlin\/reflect\/KTypeProjection;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"it\")\ljava.lang.String r0 = r1.this$0.asString(r2)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.CharSequence kotlin.jvm.internal.TypeReference$asString$args$1.invoke((r1v0 'this' kotlin.jvm.internal.TypeReference$asString$args$1 A[IMMUTABLE_TYPE, THIS]), (r2v0 'it' kotlin.reflect.KTypeProjection A[D('it' kotlin.reflect.KTypeProjection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lBRIDGED_BY: kotlin.jvm.internal.TypeReference$asString$args$1.invoke(kotlin.reflect.KTypeProjection):java.lang.CharSequence\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

