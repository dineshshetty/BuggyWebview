digraph "CFG forkotlin.jvm.internal.CollectionToArray.toArrayImpl(Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function0;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;)[Ljava\/lang\/Object;" {
Node_37 [shape=record,label="{37\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:int) = (r8 I:java.util.Collection A[D('collection' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)] (LINE:57)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x000e  (LINE:58)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function0 A[D('empty' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)]\l0x000b: CHECK_CAST (r2 I:java.lang.Object[]) = (java.lang.Object[]) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:java.lang.Object[]) \l}"];
Node_38 [shape=record,label="{38\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x000e|0x000e: INVOKE  (r2 I:java.util.Iterator) = (r8 I:java.util.Collection A[D('collection' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:59)\l0x0012: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator A[D('iter' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:60)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0016|0x0016: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x001f \l}"];
Node_45 [shape=record,label="{45\:\ 0x0018|0x0018: INVOKE  (r3 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function0 A[D('empty' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)]\l0x001c: CHECK_CAST (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x001e|RETURN\l|0x001e: RETURN  (r3 I:java.lang.Object[]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x001f|0x001f: INVOKE  (r3 I:java.lang.Integer) = (r1 I:int A[D('size' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:61)\l0x0023: INVOKE  (r3 I:java.lang.Object) = (r10 I:kotlin.jvm.functions.Function1 A[D('alloc' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0027: CHECK_CAST (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:??[OBJECT, ARRAY]) \l0x0029: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:62)\l}"];
Node_48 [shape=record,label="{48\:\ 0x002a|LOOP_START\lLOOP:0: B:48:0x002a\-\>B:71:0x002a\l|0x002b: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:65)\l0x002d: INVOKE  (r6 I:java.lang.Object) = (r2 I:java.util.Iterator A[D('iter' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0031: APUT  \l  (r3 I:??[OBJECT, ARRAY][] A[D('result' java.lang.Object[])])\l  (r4 I:??[int, short, byte, char])\l  (r6 I:??[OBJECT, ARRAY])\l \l0x0033: ARRAY_LENGTH  (r4 I:int) = (r3 I:??[] A[D('result' java.lang.Object[])])  (LINE:66)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0034|0x0034: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \< (r4 I:??[int, byte, short, char])  \-\> B:66:0x0060 \l}"];
Node_66 [shape=record,label="{66\:\ 0x0060|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0060|0x0060: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator A[D('iter' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:78)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0064|0x0064: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0071 \l}"];
Node_65 [shape=record,label="{65\:\ 0x0071|0x0071: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l}"];
Node_72 [shape=record,label="{72\:\ 0x002a|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x002a|LOOP_END\lSYNTHETIC\lLOOP:0: B:48:0x002a\-\>B:71:0x002a\l}"];
Node_69 [shape=record,label="{69\:\ 0x0066|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0066|0x0066: INVOKE  (r4 I:java.lang.Integer) = (r5 I:int A[D('i' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x006a: INVOKE  (r4 I:java.lang.Object) = \l  (r11 I:kotlin.jvm.functions.Function2 A[D('trim' kotlin.jvm.functions.Function2)])\l  (r3 I:java.lang.Object A[D('result' java.lang.Object[])])\l  (r4 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x006e: CHECK_CAST (r4 I:java.lang.Object[]) = (java.lang.Object[]) (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0070|RETURN\l|0x0070: RETURN  (r4 I:java.lang.Object[]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0036|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0036|0x0036: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator A[D('iter' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:67)\l}"];
Node_51 [shape=record,label="{51\:\ 0x003a|0x003a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x003d \l}"];
Node_53 [shape=record,label="{53\:\ 0x003d|0x003d: ARITH  (r4 I:int) = (r5 I:int A[D('i' int)]) * (3 int)  (LINE:71)\l0x003f: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0041: ARITH  (r4 I:int) = (r4 I:int) \>\>\> (1 int) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0043|0x0043: IF  (r4 I:??[int, byte, short, char] A[D('newSize' int)]) \> (r5 I:??[int, byte, short, char] A[D('i' int)])  \-\> B:60:0x0054  (LINE:72)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0045|0x0045: CONST  (r6 I:??[int, float, short, byte, char]) = (2147483645(0x7ffffffd, float:NaN) ??[int, float, short, byte, char])  (LINE:73)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0048|0x0048: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:67:0x004e \l}"];
Node_57 [shape=record,label="{57\:\ 0x004a|0x004a: CONST  (r4 I:??[int, float, short, byte, char] A[D('newSize' int)]) = (2147483645(0x7ffffffd, float:NaN) ??[int, float, short, byte, char])  (LINE:74)\l}"];
Node_67 [shape=record,label="{67\:\ 0x004e|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x004e|0x004e: NEW_INSTANCE  (r6 I:java.lang.OutOfMemoryError) =  java.lang.OutOfMemoryError  (LINE:73)\l0x0050: INVOKE  (r6 I:java.lang.OutOfMemoryError) type: DIRECT call: java.lang.OutOfMemoryError.\<init\>():void A[MD:():void (c)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0053|0x0053: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0054|0x0054: INVOKE  (r6 I:java.lang.Object[]) = (r3 I:java.lang.Object[] A[D('result' java.lang.Object[])]), (r4 I:int A[D('newSize' int)]) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)] (LINE:76)\l0x0058: CONST_STR  (r7 I:java.lang.String) =  \"copyOf(result, newSize)\" \l0x005a: INVOKE  (r6 I:java.lang.Object), (r7 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x005d: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object[])]) = (r6 I:??[OBJECT, ARRAY]) \l0x005e: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newSize' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x002a|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x003c|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x003c|RETURN\l|0x003c: RETURN  (r3 I:java.lang.Object[] A[D('result' java.lang.Object[])]) \l}"];
MethodNode[shape=record,label="{private static final java.lang.Object[] kotlin.jvm.internal.CollectionToArray.toArrayImpl((r8 I:java.util.Collection\<?\> A[D('collection' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function0\<java.lang.Object[]\> A[D('empty' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function1\<? super java.lang.Integer, java.lang.Object[]\> A[D('alloc' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function2\<? super java.lang.Object[], ? super java.lang.Integer, java.lang.Object[]\> A[D('trim' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:46:0x001e \-\> B:38:?, CROSS_EDGE: B:52:0x003c \-\> B:38:?, BACK_EDGE: B:60:0x0054 \-\> B:48:0x002a, CROSS_EDGE: B:59:0x0053 \-\> B:38:?, CROSS_EDGE: B:54:0x0043 \-\> B:60:0x0054, CROSS_EDGE: B:64:0x0070 \-\> B:38:?, BACK_EDGE: B:65:0x0071 \-\> B:48:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002a\-0x002d: r4 'i' I\l  0x0043\-0x005f: r4 'newSize' I\l  0x0001\-0x0072: r0 '$i$f$toArrayImpl' I\l  0x0005\-0x0072: r1 'size' I\l  0x0012\-0x0072: r2 'iter' Ljava\/util\/Iterator;\l  0x0029\-0x0072: r3 'result' [Ljava\/lang\/Object;\l  0x002d\-0x0072: r5 'i' I\l  \-1 \-0x0072: r8 'collection' Ljava\/util\/Collection;\l  \-1 \-0x0072: r9 'empty' Lkotlin\/jvm\/functions\/Function0;\l  \-1 \-0x0072: r10 'alloc' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x0072: r11 'trim' Lkotlin\/jvm\/functions\/Function2;\lSIGNATURE: (Ljava\/util\/Collection\<*\>;Lkotlin\/jvm\/functions\/Function0\<[Ljava\/lang\/Object;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Integer;[Ljava\/lang\/Object;\>;Lkotlin\/jvm\/functions\/Function2\<\-[Ljava\/lang\/Object;\-Ljava\/lang\/Integer;[Ljava\/lang\/Object;\>;)[Ljava\/lang\/Object;\l}"];
MethodNode -> Node_37;Node_37 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_38;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_47;
Node_45 -> Node_46;
Node_46 -> Node_38;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_66;
Node_49 -> Node_70[style=dashed];
Node_66 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_65;
Node_62 -> Node_69[style=dashed];
Node_65 -> Node_72;
Node_72 -> Node_71;
Node_71 -> Node_48;
Node_69 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_38;
Node_70 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_53;
Node_51 -> Node_68[style=dashed];
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_60;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_67;
Node_57 -> Node_60;
Node_67 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_38;
Node_60 -> Node_73;
Node_73 -> Node_71;
Node_68 -> Node_52;
Node_52 -> Node_38;
}

