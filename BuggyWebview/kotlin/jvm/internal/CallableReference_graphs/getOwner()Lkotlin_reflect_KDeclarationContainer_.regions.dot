digraph "CFG forkotlin.jvm.internal.CallableReference.getOwner()Lkotlin\/reflect\/KDeclarationContainer;" {
subgraph cluster_Region_1124787527 {
label = "R(2:1|(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|java.lang.Class java.lang.Class r0 = r2.owner\l}"];
subgraph cluster_Region_1897654310 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_212803998 {
label = "IF [B:15:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0002|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_1564578197 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0004|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1074776287 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0008|RETURN\l|return r2.isTopLevel ? kotlin.jvm.internal.Reflection.getOrCreateKotlinPackage(r0) : kotlin.jvm.internal.Reflection.getOrCreateKotlinClass(r0)\l}"];
}
}
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0006}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000a}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|SYNTHETIC\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x000f}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0013|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public kotlin.reflect.KDeclarationContainer kotlin.jvm.internal.CallableReference.getOwner((r2v0 'this' kotlin.jvm.internal.CallableReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000a \-\> B:21:0x0013, CROSS_EDGE: B:20:0x000f \-\> B:21:0x0013\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.jvm.internal.CallableReference.getOwner():kotlin.reflect.KDeclarationContainer]\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_13;
Node_18 -> Node_19;
Node_18 -> Node_20;
Node_12 -> Node_14;
Node_17 -> Node_18;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

