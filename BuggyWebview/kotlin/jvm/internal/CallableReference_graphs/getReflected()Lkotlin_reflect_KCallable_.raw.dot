digraph "CFG forkotlin.jvm.internal.CallableReference.getReflected()Lkotlin\/reflect\/KCallable;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.reflect.KCallable) = (r2 I:kotlin.jvm.internal.CallableReference) type: VIRTUAL call: kotlin.jvm.internal.CallableReference.compute():kotlin.reflect.KCallable A[MD:():kotlin.reflect.KCallable (m)] (LINE:96)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' kotlin.reflect.KCallable)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0007  (LINE:97)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlin.reflect.KCallable A[D('result' kotlin.reflect.KCallable)])  (LINE:100)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: NEW_INSTANCE  (r1 I:kotlin.jvm.KotlinReflectionNotSupportedError) =  kotlin.jvm.KotlinReflectionNotSupportedError  (LINE:98)\l0x0009: INVOKE  (r1 I:kotlin.jvm.KotlinReflectionNotSupportedError) type: DIRECT call: kotlin.jvm.KotlinReflectionNotSupportedError.\<init\>():void A[MD:():void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public kotlin.reflect.KCallable kotlin.jvm.internal.CallableReference.getReflected((r2 'this' I:kotlin.jvm.internal.CallableReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000c: r0 'result' Lkotlin\/reflect\/KCallable;\lMETHOD_OVERRIDE: [kotlin.jvm.internal.CallableReference.getReflected():kotlin.reflect.KCallable]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

