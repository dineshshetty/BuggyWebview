digraph "CFG forkotlin.jvm.internal.CallableReference.compute()Lkotlin\/reflect\/KCallable;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.reflect.KCallable) = (r1 I:kotlin.jvm.internal.CallableReference) kotlin.jvm.internal.CallableReference.reflected kotlin.reflect.KCallable  (LINE:86)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' kotlin.reflect.KCallable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:87)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  (r0 I:kotlin.reflect.KCallable A[D('result' kotlin.reflect.KCallable)]) = (r1 I:kotlin.jvm.internal.CallableReference) type: VIRTUAL call: kotlin.jvm.internal.CallableReference.computeReflected():kotlin.reflect.KCallable A[MD:():kotlin.reflect.KCallable (m)] (LINE:88)\l0x0008: IPUT  (r0 I:kotlin.reflect.KCallable A[D('result' kotlin.reflect.KCallable)]), (r1 I:kotlin.jvm.internal.CallableReference) kotlin.jvm.internal.CallableReference.reflected kotlin.reflect.KCallable  (LINE:89)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: RETURN  (r0 I:kotlin.reflect.KCallable A[D('result' kotlin.reflect.KCallable)])  (LINE:91)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000a: RETURN  (r0 I:kotlin.reflect.KCallable A[D('result' kotlin.reflect.KCallable)]) A[SYNTHETIC] (LINE:91)\l}"];
MethodNode[shape=record,label="{public kotlin.reflect.KCallable kotlin.jvm.internal.CallableReference.compute((r1 'this' I:kotlin.jvm.internal.CallableReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x000a: r0 'result' Lkotlin\/reflect\/KCallable;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

