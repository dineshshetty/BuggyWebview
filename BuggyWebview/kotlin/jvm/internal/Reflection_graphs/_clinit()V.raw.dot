digraph "CFG forkotlin.jvm.internal.Reflection.\<clinit\>()V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:26)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{ClassCastException \-\> 0x0018, ClassNotFoundException \-\> 0x0015, IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, blocks: (B:24:0x0001), top: B:40:0x0001 \}\lCatch: IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, ClassNotFoundException \-\> 0x0015, ClassCastException \-\> 0x0018\l|0x0001: CONST_STR  (r1 I:java.lang.String) =  \"kotlin.reflect.jvm.internal.ReflectionFactoryImpl\" A[TRY_ENTER]\l0x0003: INVOKE  (r1 I:java.lang.Class) = (r1 I:java.lang.String) type: STATIC call: java.lang.Class.forName(java.lang.String):java.lang.Class A[Catch: IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, ClassNotFoundException \-\> 0x0015, ClassCastException \-\> 0x0018, MD:(java.lang.String):java.lang.Class\<?\> throws java.lang.ClassNotFoundException (c)]\l0x0007: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.lang.Class A[D('implClass' java.lang.Class\<?\>)]) type: VIRTUAL call: java.lang.Class.newInstance():java.lang.Object A[Catch: IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, ClassNotFoundException \-\> 0x0015, ClassCastException \-\> 0x0018, MD:():T throws java.lang.IllegalAccessException, java.lang.InstantiationException (c)] (LINE:27)\l0x000b: CHECK_CAST (r2 I:kotlin.jvm.internal.ReflectionFactory) = (kotlin.jvm.internal.ReflectionFactory) (r2 I:??[OBJECT, ARRAY]) A[Catch: IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, ClassNotFoundException \-\> 0x0015, ClassCastException \-\> 0x0018, TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x001f  (LINE:34)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|0x001d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|0x0024: SPUT  (r1 I:kotlin.jvm.internal.ReflectionFactory) kotlin.jvm.internal.Reflection.factory kotlin.jvm.internal.ReflectionFactory \l0x0026: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:39)\l0x0027: NEW_ARRAY  (r0 I:kotlin.reflect.KClass[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: kotlin.reflect.KClass[] \l0x0029: SPUT  (r0 I:kotlin.reflect.KClass[]) kotlin.jvm.internal.Reflection.EMPTY_K_CLASS_ARRAY kotlin.reflect.KClass[] \l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|RETURN\l|0x002b: RETURN   \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x001f|0x001f: NEW_INSTANCE  (r1 I:kotlin.jvm.internal.ReflectionFactory) =  kotlin.jvm.internal.ReflectionFactory \l0x0021: INVOKE  (r1 I:kotlin.jvm.internal.ReflectionFactory) type: DIRECT call: kotlin.jvm.internal.ReflectionFactory.\<init\>():void A[MD:():void (m)]\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|ExcHandler: ClassCastException \-\> 0x0018\l|0x0018: MOVE_EXCEPTION  (r1 I:java.lang.ClassCastException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ClassCastException \-\> 0x0018] (LINE:29)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0019|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0015|ExcHandler: ClassNotFoundException \-\> 0x0015\l|0x0015: MOVE_EXCEPTION  (r1 I:java.lang.ClassNotFoundException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ClassNotFoundException \-\> 0x0015] (LINE:30)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|0x0016: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|ExcHandler: IllegalAccessException \-\> 0x000f\l|0x000f: MOVE_EXCEPTION  (r1 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x000f] (LINE:32)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|ExcHandler: InstantiationException \-\> 0x0012\l|0x0012: MOVE_EXCEPTION  (r1 I:java.lang.InstantiationException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InstantiationException \-\> 0x0012] (LINE:31)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013|0x0013: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('impl' kotlin.jvm.internal.ReflectionFactory)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static void kotlin.jvm.internal.Reflection.\<clinit\>()  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x001f \-\> B:38:0x0024, CROSS_EDGE: B:33:0x0019 \-\> B:35:0x001b, CROSS_EDGE: B:31:0x0016 \-\> B:35:0x001b, CROSS_EDGE: B:27:0x0010 \-\> B:35:0x001b, CROSS_EDGE: B:29:0x0013 \-\> B:35:0x001b, CROSS_EDGE: B:40:0x0001 \-\> B:32:0x0018, CROSS_EDGE: B:40:0x0001 \-\> B:30:0x0015, CROSS_EDGE: B:40:0x0001 \-\> B:26:0x000f, CROSS_EDGE: B:40:0x0001 \-\> B:28:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000e: r1 'implClass' Ljava\/lang\/Class;, signature: Ljava\/lang\/Class\<*\>;\l  0x000e\-0x000f: r0 'impl' Lkotlin\/jvm\/internal\/ReflectionFactory;\l  0x0010\-0x0012: r0 'impl' Lkotlin\/jvm\/internal\/ReflectionFactory;\l  0x0010\-0x0012: r1 'e' Ljava\/lang\/IllegalAccessException;\l  0x0013\-0x0014: r1 'e' Ljava\/lang\/InstantiationException;\l  0x0013\-0x0015: r0 'impl' Lkotlin\/jvm\/internal\/ReflectionFactory;\l  0x0016\-0x0017: r1 'e' Ljava\/lang\/ClassNotFoundException;\l  0x0016\-0x0018: r0 'impl' Lkotlin\/jvm\/internal\/ReflectionFactory;\l  0x0019\-0x001a: r1 'e' Ljava\/lang\/ClassCastException;\l  0x0019\-0x0026: r0 'impl' Lkotlin\/jvm\/internal\/ReflectionFactory;\lTryCatch #2 \{ClassCastException \-\> 0x0018, ClassNotFoundException \-\> 0x0015, IllegalAccessException \-\> 0x000f, InstantiationException \-\> 0x0012, blocks: (B:24:0x0001), top: B:40:0x0001 \}\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_40;
Node_40 -> Node_24;
Node_40 -> Node_32;
Node_40 -> Node_30;
Node_40 -> Node_26;
Node_40 -> Node_28;
Node_24 -> Node_25;
Node_24 -> Node_41;
Node_25 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
Node_37 -> Node_38;
Node_41 -> Node_32;
Node_41 -> Node_30;
Node_41 -> Node_26;
Node_41 -> Node_28;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_30 -> Node_31;
Node_31 -> Node_35;
Node_26 -> Node_27;
Node_27 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_35;
}

