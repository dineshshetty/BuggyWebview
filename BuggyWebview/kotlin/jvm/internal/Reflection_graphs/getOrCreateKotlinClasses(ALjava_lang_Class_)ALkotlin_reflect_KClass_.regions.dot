digraph "CFG forkotlin.jvm.internal.Reflection.getOrCreateKotlinClasses([Ljava\/lang\/Class;)[Lkotlin\/reflect\/KClass;" {
subgraph cluster_Region_1089937219 {
label = "R(2:1|(2:(1:4)|(3:6|(1:8)|10)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|int int r0 = r4.length\l}"];
subgraph cluster_Region_1537193865 {
label = "R(2:(1:4)|(3:6|(1:8)|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1852957588 {
label = "IF [B:14:0x0001] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0001|if (r0 == 0) goto L3\l}"];
subgraph cluster_Region_210240087 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0005|RETURN\l|return kotlin.jvm.internal.Reflection.EMPTY_K_CLASS_ARRAY\l}"];
}
}
subgraph cluster_Region_1717844440 {
label = "R(3:6|(1:8)|10)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0006|kotlin.reflect.KClass[] kotlin.reflect.KClass[] r1 = new kotlin.reflect.KClass[r0]\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_333590703 {
label = "LOOP:0: (1:8)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0009|LOOP_START\lLOOP:0: B:18:0x0009\-\>B:19:0x000b\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:17:0x0006, B:19:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< r0) goto L8\l}"];
subgraph cluster_Region_1805072535 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000b|LOOP_END\lLOOP:0: B:18:0x0009\-\>B:19:0x000b\l|r1[r2] = getOrCreateKotlinClass(r4[r2])\lr2++\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x0016|RETURN\l|return r1\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0003}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static kotlin.reflect.KClass[] kotlin.jvm.internal.Reflection.getOrCreateKotlinClasses((r4v0 'javaClasses' java.lang.Class[] A[D('javaClasses' java.lang.Class[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x000b \-\> B:18:0x0009, CROSS_EDGE: B:20:0x0016 \-\> B:12:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_21[style=dashed];
Node_19 -> Node_18;
Node_20 -> Node_12;
Node_11 -> Node_13;
Node_15 -> Node_16;
Node_21 -> Node_20;
}

