digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.hashCode()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object r0 = r4.receiver\lr1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r0 == null) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|int r0 = r0.hashCode()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 'result' int) = (r0v1 'result' int), (r0v9 'result' int) binds: [B:5:0x000a, B:4:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r0 * 31\ljava.lang.Class r3 = r4.owner\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|if (r3 == null) goto L7\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|int r1 = r3.hashCode()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v8 int) binds: [B:7:0x000f, B:8:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + r1\lint r1 = (((r2 * 31) + r4.name.hashCode()) * 31) + r4.signature.hashCode()\lint r0 = r1 * 31\l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|if (r4.isTopLevel == false) goto L13\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|r2 = 1231\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|PHI: r2 \l  PHI: (r2v6 int) = (r2v5 int), (r2v9 int) binds: [B:12:0x0031, B:11:0x002e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|return ((((r0 + r2) * 31) + r4.arity) * 31) + r4.flags\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r2 = 1237\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|r0 = 0\l}"];
MethodNode[shape=record,label="{public int kotlin.jvm.internal.AdaptedFunctionReference.hashCode((r4v0 'this' kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0031 \-\> B:13:0x0033, CROSS_EDGE: B:7:0x000f \-\> B:9:0x0015, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_5 -> Node_6;
}

