digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.getOwner()Lkotlin\/reflect\/KDeclarationContainer;" {
subgraph cluster_Region_976187900 {
label = "R(2:1|(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Class java.lang.Class r0 = r2.owner\l}"];
subgraph cluster_Region_1648326680 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1176844971 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_538272715 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_720743207 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0008|RETURN\l|return r2.isTopLevel ? kotlin.jvm.internal.Reflection.getOrCreateKotlinPackage(r0) : kotlin.jvm.internal.Reflection.getOrCreateKotlinClass(r0)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0006}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000a}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000f}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0013|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public kotlin.reflect.KDeclarationContainer kotlin.jvm.internal.AdaptedFunctionReference.getOwner((r2v0 'this' kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000a \-\> B:9:0x0013, CROSS_EDGE: B:8:0x000f \-\> B:9:0x0013\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_0 -> Node_2;
Node_5 -> Node_6;
Node_7 -> Node_11;
Node_11 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

