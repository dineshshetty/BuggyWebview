digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.hashCode()I" {
subgraph cluster_Region_978284780 {
label = "R(5:1|2|4|7|11)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object java.lang.Object r0 = r4.receiver\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|int r0 = r0 != null ? r0.hashCode() : 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 'result' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r2 = r0 * 31\ljava.lang.Class java.lang.Class r3 = r4.owner\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|PHI: r1 \l  PHI: (r1v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|int int r2 = r2 + (r3 != null ? r3.hashCode() : 0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|return (((((((((r2 * 31) + r4.name.hashCode()) * 31) + r4.signature.hashCode()) * 31) + (r4.isTopLevel ? 1231 : 1237)) * 31) + r4.arity) * 31) + r4.flags\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0005}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002c}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002e}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0033|PHI: r2 \l  PHI: (r2v6 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0031}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
MethodNode[shape=record,label="{public int kotlin.jvm.internal.AdaptedFunctionReference.hashCode((r4v0 'this' kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0031 \-\> B:13:0x0033, CROSS_EDGE: B:7:0x000f \-\> B:9:0x0015, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_14 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_12 -> Node_13;
Node_5 -> Node_6;
}

