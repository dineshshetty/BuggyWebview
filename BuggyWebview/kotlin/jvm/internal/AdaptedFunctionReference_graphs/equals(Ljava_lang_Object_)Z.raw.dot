digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:64)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('o' java.lang.Object)])  \-\> B:5:0x0004 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)]) kotlin.jvm.internal.AdaptedFunctionReference  (LINE:65)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)])  (LINE:66)\l0x000b: CHECK_CAST (r1 I:kotlin.jvm.internal.AdaptedFunctionReference) = (kotlin.jvm.internal.AdaptedFunctionReference) (r1 I:??[OBJECT, ARRAY]) \l0x000d: IGET  (r3 I:boolean) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.isTopLevel boolean  (LINE:67)\l0x000f: IGET  (r4 I:boolean) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.isTopLevel boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IGET  (r3 I:int) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.arity int \l0x0015: IGET  (r4 I:int) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.arity int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: IGET  (r3 I:int) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.flags int \l0x001b: IGET  (r4 I:int) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.flags int \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: IGET  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.receiver java.lang.Object \l0x0021: IGET  (r4 I:java.lang.Object) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.receiver java.lang.Object \l0x0023: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: IGET  (r3 I:java.lang.Class) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.owner java.lang.Class \l0x002b: IGET  (r4 I:java.lang.Class) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.owner java.lang.Class \l0x002d: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|0x0033: IGET  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.name java.lang.String \l0x0035: IGET  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.name java.lang.String \l0x0037: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|0x003d: IGET  (r3 I:java.lang.String) = (r5 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.signature java.lang.String \l0x003f: IGET  (r4 I:java.lang.String) = (r1 I:kotlin.jvm.internal.AdaptedFunctionReference A[D('other' kotlin.jvm.internal.AdaptedFunctionReference)]) kotlin.jvm.internal.AdaptedFunctionReference.signature java.lang.String \l0x0041: INVOKE  (r3 I:boolean) = (r3 I:java.lang.String), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0045|0x0045: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0049: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|RETURN\lORIG_RETURN\l|0x0048: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0049: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.AdaptedFunctionReference.equals((r5 'this' I:kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0009 \-\> B:1:?, CROSS_EDGE: B:24:0x0049 \-\> B:1:?, CROSS_EDGE: B:21:0x0045 \-\> B:24:0x0049, CROSS_EDGE: B:19:0x003b \-\> B:23:0x0048, CROSS_EDGE: B:17:0x0031 \-\> B:23:0x0048, CROSS_EDGE: B:15:0x0027 \-\> B:23:0x0048, CROSS_EDGE: B:13:0x001d \-\> B:23:0x0048, CROSS_EDGE: B:11:0x0017 \-\> B:23:0x0048, CROSS_EDGE: B:9:0x0011 \-\> B:23:0x0048\lDebug Info:\l  0x000d\-0x0049: r1 'other' Lkotlin\/jvm\/internal\/AdaptedFunctionReference;\l  \-1 \-0x0049: r6 'o' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_23;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_25[style=dashed];
Node_25 -> Node_1;
Node_23 -> Node_1;
}

