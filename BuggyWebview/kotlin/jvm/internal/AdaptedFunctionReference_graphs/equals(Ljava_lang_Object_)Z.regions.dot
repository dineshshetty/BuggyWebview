digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_206112607 {
label = "R(1:(2:(1:3)|(1:(2:(2:8|9)|(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1296092714 {
label = "R(2:(1:3)|(1:(2:(2:8|9)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_880070786 {
label = "IF [B:3:0x0001] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0001|if (r5 == r6) goto L3\l}"];
subgraph cluster_Region_1182545293 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_46899682 {
label = "R(1:(2:(2:8|9)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1236340239 {
label = "R(2:(2:8|9)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1532180347 {
label = "IF [B:6:0x0007] THEN: R(2:8|9) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0007|if ((r6 instanceof kotlin.jvm.internal.AdaptedFunctionReference) == true) goto L8\l}"];
subgraph cluster_Region_1918094829 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x000a|kotlin.jvm.internal.AdaptedFunctionReference kotlin.jvm.internal.AdaptedFunctionReference r1 = (kotlin.jvm.internal.AdaptedFunctionReference) r6\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|RETURN\l|return r5.isTopLevel == r1.isTopLevel && r5.arity == r1.arity && r5.flags == r1.flags && kotlin.jvm.internal.Intrinsics.areEqual(r5.receiver, r1.receiver) && kotlin.jvm.internal.Intrinsics.areEqual(r5.owner, r1.owner) && r5.name.equals(r1.name) && r5.signature.equals(r1.signature)\l}"];
}
}
subgraph cluster_Region_2091168193 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|return false\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0004}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0013}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0017|REMOVE\lADDED_TO_REGION\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0019}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001d|REMOVE\lADDED_TO_REGION\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001f}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0027|REMOVE\lADDED_TO_REGION\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0029}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0031|REMOVE\lADDED_TO_REGION\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0033}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x003b|REMOVE\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x003d}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0045|REMOVE\lADDED_TO_REGION\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|SYNTHETIC\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0048|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.AdaptedFunctionReference.equals((r5v0 'this' kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]), (r6v0 'o' java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0009 \-\> B:1:?, CROSS_EDGE: B:24:0x0049 \-\> B:1:?, CROSS_EDGE: B:21:0x0045 \-\> B:24:0x0049, CROSS_EDGE: B:19:0x003b \-\> B:23:0x0048, CROSS_EDGE: B:17:0x0031 \-\> B:23:0x0048, CROSS_EDGE: B:15:0x0027 \-\> B:23:0x0048, CROSS_EDGE: B:13:0x001d \-\> B:23:0x0048, CROSS_EDGE: B:11:0x0017 \-\> B:23:0x0048, CROSS_EDGE: B:9:0x0011 \-\> B:23:0x0048\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_23;
Node_7 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_23;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_25;
Node_25 -> Node_1;
Node_23 -> Node_1;
}

