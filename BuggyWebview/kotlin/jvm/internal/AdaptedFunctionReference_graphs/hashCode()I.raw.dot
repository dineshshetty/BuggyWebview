digraph "CFG forkotlin.jvm.internal.AdaptedFunctionReference.hashCode()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.receiver java.lang.Object  (LINE:78)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: ARITH  (r2 I:int) = (r0 I:int A[D('result' int)]) * (31 int)  (LINE:79)\l0x000d: IGET  (r3 I:java.lang.Class) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.owner java.lang.Class \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: INVOKE  (r1 I:int) = (r3 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0016: ARITH  (r0 I:int A[D('result' int)]) = (r2 I:int A[D('result' int)]) * (31 int)  (LINE:80)\l0x0018: IGET  (r1 I:java.lang.String) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.name java.lang.String \l0x001a: INVOKE  (r1 I:int) = (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.hashCode():int A[MD:():int (c)]\l0x001e: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x001f: ARITH  (r1 I:int) = (r0 I:int A[D('result' int)]) * (31 int)  (LINE:81)\l0x0021: IGET  (r2 I:java.lang.String) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.signature java.lang.String \l0x0023: INVOKE  (r2 I:int) = (r2 I:java.lang.String) type: VIRTUAL call: java.lang.String.hashCode():int A[MD:():int (c)]\l0x0027: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0028: ARITH  (r0 I:int A[D('result' int)]) = (r1 I:int A[D('result' int)]) * (31 int)  (LINE:82)\l0x002a: IGET  (r2 I:boolean) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.isTopLevel boolean \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: CONST  (r2 I:??[int, float, short, byte, char]) = (1231(0x4cf, float:1.725E\-42) ??[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|0x0033: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l0x0034: ARITH  (r1 I:int A[D('result' int)]) = (r0 I:int A[D('result' int)]) * (31 int)  (LINE:83)\l0x0036: IGET  (r2 I:int) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.arity int \l0x0038: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0039: ARITH  (r0 I:int A[D('result' int)]) = (r1 I:int A[D('result' int)]) * (31 int)  (LINE:84)\l0x003b: IGET  (r2 I:int) = (r4 I:kotlin.jvm.internal.AdaptedFunctionReference) kotlin.jvm.internal.AdaptedFunctionReference.flags int \l0x003d: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|0x003e: RETURN  (r0 I:int A[D('result' int)])  (LINE:85)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: CONST  (r2 I:??[int, float, short, byte, char]) = (1237(0x4d5, float:1.733E\-42) ??[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public int kotlin.jvm.internal.AdaptedFunctionReference.hashCode((r4 'this' I:kotlin.jvm.internal.AdaptedFunctionReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0031 \-\> B:13:0x0033, CROSS_EDGE: B:7:0x000f \-\> B:9:0x0015, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lDebug Info:\l  0x000b\-0x0016: r0 'result' I\l  0x0016\-0x001f: r2 'result' I\l  0x001f\-0x0028: r0 'result' I\l  0x0028\-0x0034: r1 'result' I\l  0x0034\-0x0039: r0 'result' I\l  0x0039\-0x003e: r1 'result' I\l  0x003e\-0x003e: r0 'result' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_5 -> Node_6;
}

