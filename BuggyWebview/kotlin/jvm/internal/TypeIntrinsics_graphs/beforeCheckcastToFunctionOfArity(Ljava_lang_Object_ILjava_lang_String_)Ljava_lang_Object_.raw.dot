digraph "CFG forkotlin.jvm.internal.TypeIntrinsics.beforeCheckcastToFunctionOfArity(Ljava\/lang\/Object;ILjava\/lang\/String;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('obj' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000b  (LINE:348)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: INVOKE  (r0 I:boolean) = (r1 I:java.lang.Object A[D('obj' java.lang.Object)]), (r2 I:int A[D('arity' int)]) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.isFunctionOfArity(java.lang.Object, int):boolean A[MD:(java.lang.Object, int):boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: INVOKE  (r3 I:java.lang.String A[D('message' java.lang.String)]) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.throwCce(java.lang.String):void A[MD:(java.lang.String):void (m)] (LINE:349)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|0x000b: RETURN  (r1 I:java.lang.Object A[D('obj' java.lang.Object)])  (LINE:351)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static java.lang.Object kotlin.jvm.internal.TypeIntrinsics.beforeCheckcastToFunctionOfArity((r1 I:java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('arity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('message' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0006 \-\> B:13:0x000b, CROSS_EDGE: B:9:0x0000 \-\> B:13:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r1 'obj' Ljava\/lang\/Object;\l  \-1 \-0x000b: r2 'arity' I\l  \-1 \-0x000b: r3 'message' Ljava\/lang\/String;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

