digraph "CFG forkotlin.jvm.internal.ReflectionFactory.mutableCollectionType(Lkotlin\/reflect\/KType;)Lkotlin\/reflect\/KType;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('type' kotlin.reflect.KType)])  (LINE:107)\l0x0001: CHECK_CAST (r0 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r0 I:??[OBJECT, ARRAY]) \l0x0003: NEW_INSTANCE  (r1 I:kotlin.jvm.internal.TypeReference) =  kotlin.jvm.internal.TypeReference  (LINE:108)\l0x0005: INVOKE  (r2 I:kotlin.reflect.KClassifier) = (r7 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]) type: INTERFACE call: kotlin.reflect.KType.getClassifier():kotlin.reflect.KClassifier A[MD:():kotlin.reflect.KClassifier (m)]\l0x0009: INVOKE  (r3 I:java.util.List) = (r7 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]) type: INTERFACE call: kotlin.reflect.KType.getArguments():java.util.List A[MD:():java.util.List\<kotlin.reflect.KTypeProjection\> (m)]\l0x000d: INVOKE  (r4 I:kotlin.reflect.KType) = (r0 I:kotlin.jvm.internal.TypeReference A[D('typeRef' kotlin.jvm.internal.TypeReference)]) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getPlatformTypeUpperBound$kotlin_stdlib():kotlin.reflect.KType A[MD:():kotlin.reflect.KType (m)]\l0x0011: INVOKE  (r5 I:int) = (r0 I:kotlin.jvm.internal.TypeReference A[D('typeRef' kotlin.jvm.internal.TypeReference)]) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getFlags$kotlin_stdlib():int A[MD:():int (m)]\l0x0015: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) \| (2 ??[int, float, short, byte, char]) \l0x0017: INVOKE  \l  (r1 I:kotlin.jvm.internal.TypeReference)\l  (r2 I:kotlin.reflect.KClassifier)\l  (r3 I:java.util.List)\l  (r4 I:kotlin.reflect.KType)\l  (r5 I:int)\l type: DIRECT call: kotlin.jvm.internal.TypeReference.\<init\>(kotlin.reflect.KClassifier, java.util.List, kotlin.reflect.KType, int):void A[MD:(kotlin.reflect.KClassifier, java.util.List\<kotlin.reflect.KTypeProjection\>, kotlin.reflect.KType, int):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|RETURN\l|0x001a: RETURN  (r1 I:kotlin.reflect.KType) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlin.reflect.KType kotlin.jvm.internal.ReflectionFactory.mutableCollectionType((r6 'this' I:kotlin.jvm.internal.ReflectionFactory A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0003\-0x001a: r0 'typeRef' Lkotlin\/jvm\/internal\/TypeReference;\l  \-1 \-0x001a: r7 'type' Lkotlin\/reflect\/KType;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

