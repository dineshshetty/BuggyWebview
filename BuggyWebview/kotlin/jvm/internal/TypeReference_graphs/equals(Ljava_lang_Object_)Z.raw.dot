digraph "CFG forkotlin.jvm.internal.TypeReference.equals(Ljava\/lang\/Object;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlin.jvm.internal.TypeReference  (LINE:30)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003e \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: INVOKE  (r0 I:kotlin.reflect.KClassifier) = (r2 I:kotlin.jvm.internal.TypeReference) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getClassifier():kotlin.reflect.KClassifier A[MD:():kotlin.reflect.KClassifier (m)] (LINE:31)\l0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0009: CHECK_CAST (r1 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r1 I:??[OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:kotlin.reflect.KClassifier) = (r1 I:kotlin.jvm.internal.TypeReference) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getClassifier():kotlin.reflect.KClassifier A[MD:():kotlin.reflect.KClassifier (m)]\l0x000f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003e \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: INVOKE  (r0 I:java.util.List) = (r2 I:kotlin.jvm.internal.TypeReference) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getArguments():java.util.List A[MD:():java.util.List\<kotlin.reflect.KTypeProjection\> (m)]\l0x0019: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x001a: CHECK_CAST (r1 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r1 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r1 I:java.util.List) = (r1 I:kotlin.jvm.internal.TypeReference) type: VIRTUAL call: kotlin.jvm.internal.TypeReference.getArguments():java.util.List A[MD:():java.util.List\<kotlin.reflect.KTypeProjection\> (m)]\l0x0020: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0024|0x0024: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003e \l}"];
Node_24 [shape=record,label="{24\:\ 0x0026|0x0026: IGET  (r0 I:kotlin.reflect.KType) = (r2 I:kotlin.jvm.internal.TypeReference) kotlin.jvm.internal.TypeReference.platformTypeUpperBound kotlin.reflect.KType \l0x0028: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0029: CHECK_CAST (r1 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r1 I:??[OBJECT, ARRAY]) \l0x002b: IGET  (r1 I:kotlin.reflect.KType) = (r1 I:kotlin.jvm.internal.TypeReference) kotlin.jvm.internal.TypeReference.platformTypeUpperBound kotlin.reflect.KType \l0x002d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0031|0x0031: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0033|0x0033: IGET  (r0 I:int) = (r2 I:kotlin.jvm.internal.TypeReference) kotlin.jvm.internal.TypeReference.flags int  (LINE:32)\l0x0035: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0036: CHECK_CAST (r1 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r1 I:??[OBJECT, ARRAY]) \l0x0038: IGET  (r1 I:int) = (r1 I:kotlin.jvm.internal.TypeReference) kotlin.jvm.internal.TypeReference.flags int \l}"];
Node_27 [shape=record,label="{27\:\ 0x003a|0x003a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003e \l}"];
Node_28 [shape=record,label="{28\:\ 0x003c|SYNTHETIC\lRETURN\l|0x003c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x003f: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x003e|RETURN\lORIG_RETURN\l|0x003e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.jvm.internal.TypeReference.equals((r2 'this' I:kotlin.jvm.internal.TypeReference A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x003e \-\> B:30:0x003f, CROSS_EDGE: B:25:0x0031 \-\> B:29:0x003e, CROSS_EDGE: B:23:0x0024 \-\> B:29:0x003e, CROSS_EDGE: B:21:0x0013 \-\> B:29:0x003e, CROSS_EDGE: B:19:0x0002 \-\> B:29:0x003e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003f: r3 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_17;
Node_29 -> Node_17;
}

