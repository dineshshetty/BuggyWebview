digraph "CFG forkotlin.jvm.internal.TypeReference.access$asString(Lkotlin\/jvm\/internal\/TypeReference;Lkotlin\/reflect\/KTypeProjection;)Ljava\/lang\/String;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|return r1.asString(r2)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ java.lang.String kotlin.jvm.internal.TypeReference.access$asString((r1v0 '$this' kotlin.jvm.internal.TypeReference A[D('$this' kotlin.jvm.internal.TypeReference), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 '$receiver' kotlin.reflect.KTypeProjection A[D('$receiver' kotlin.reflect.KTypeProjection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  \l  (r1 I:kotlin.jvm.internal.TypeReference A[D('$this' kotlin.jvm.internal.TypeReference)])\l  (r2 I:kotlin.reflect.KTypeProjection A[D('$receiver' kotlin.reflect.KTypeProjection)])\l type: DIRECT call: kotlin.jvm.internal.TypeReference.asString(kotlin.reflect.KTypeProjection):java.lang.String\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

