digraph "CFG forkotlin.jvm.internal.TypeReference.asString(Lkotlin\/reflect\/KTypeProjection;)Ljava\/lang\/String;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.reflect.KVariance) = (r4 I:kotlin.reflect.KTypeProjection A[D('$this$asString' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getVariance():kotlin.reflect.KVariance A[MD:():kotlin.reflect.KVariance (m)] (LINE:88)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0009 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|RETURN\l|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"*\" \l0x0008: RETURN  (r0 I:java.lang.String) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|0x0009: INVOKE  (r0 I:kotlin.reflect.KType) = (r4 I:kotlin.reflect.KTypeProjection A[D('$this$asString' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getType():kotlin.reflect.KType A[MD:():kotlin.reflect.KType (m)] (LINE:90)\l0x000d: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlin.jvm.internal.TypeReference \l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0014 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|0x0011: CHECK_CAST (r0 I:kotlin.jvm.internal.TypeReference) = (kotlin.jvm.internal.TypeReference) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x001e \l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|0x0017: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0018: INVOKE  (r0 I:java.lang.String) = (r0 I:kotlin.jvm.internal.TypeReference), (r1 I:boolean) type: DIRECT call: kotlin.jvm.internal.TypeReference.asString(boolean):java.lang.String A[MD:(boolean):java.lang.String (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0026 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|0x0026: INVOKE  (r1 I:kotlin.reflect.KVariance) = (r4 I:kotlin.reflect.KTypeProjection A[D('$this$asString' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getVariance():kotlin.reflect.KVariance A[MD:():kotlin.reflect.KVariance (m)] (LINE:91)\l0x002a: SGET  (r2 I:int[]) =  kotlin.jvm.internal.TypeReference.WhenMappings.$EnumSwitchMapping$0 int[] \l0x002c: INVOKE  (r1 I:int) = (r1 I:kotlin.reflect.KVariance) type: VIRTUAL call: kotlin.reflect.KVariance.ordinal():int A[MD:():int (c)]\l0x0030: AGET  (r1 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0032|0x0032: SWITCH  (r1 I:??)\l case 1: goto B:44:0x005f\l case 2: goto B:43:0x004d\l case 3: goto B:42:0x003b\l default: goto B:40:0x0035 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|0x0035: NEW_INSTANCE  (r1 I:kotlin.NoWhenBranchMatchedException) =  kotlin.NoWhenBranchMatchedException  (LINE:94)\l0x0037: INVOKE  (r1 I:kotlin.NoWhenBranchMatchedException) type: DIRECT call: kotlin.NoWhenBranchMatchedException.\<init\>():void A[MD:():void (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x003a|0x003a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ 0x003b|0x003b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0040: CONST_STR  (r2 I:java.lang.String) =  \"out \" \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0045: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.String A[D('typeString' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0048: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0060: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:91)\l}"];
Node_43 [shape=record,label="{43\:\ 0x004d|0x004d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:93)\l0x004f: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0052: CONST_STR  (r2 I:java.lang.String) =  \"in \" \l0x0054: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0057: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:java.lang.String A[D('typeString' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0060: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:91)\l}"];
Node_44 [shape=record,label="{44\:\ 0x005f|0x005f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('typeString' java.lang.String)])  (LINE:92)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0060|RETURN\lORIG_RETURN\l|0x0060: RETURN  (r1 I:java.lang.String)  (LINE:91)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|0x001e: INVOKE  (r0 I:kotlin.reflect.KType) = (r4 I:kotlin.reflect.KTypeProjection A[D('$this$asString' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getType():kotlin.reflect.KType A[MD:():kotlin.reflect.KType (m)]\l0x0022: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: STATIC call: java.lang.String.valueOf(java.lang.Object):java.lang.String A[MD:(java.lang.Object):java.lang.String (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.jvm.internal.TypeReference.asString((r3 'this' I:kotlin.jvm.internal.TypeReference A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlin.reflect.KTypeProjection A[D('$this$asString' kotlin.reflect.KTypeProjection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x003a \-\> B:25:?, CROSS_EDGE: B:45:0x0060 \-\> B:25:?, CROSS_EDGE: B:43:0x004d \-\> B:45:0x0060, CROSS_EDGE: B:44:0x005f \-\> B:45:0x0060, CROSS_EDGE: B:36:0x001c \-\> B:38:0x0026, CROSS_EDGE: B:34:0x0015 \-\> B:37:0x001e, CROSS_EDGE: B:33:0x0014 \-\> B:34:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x006b: r0 'typeString' Ljava\/lang\/String;\l  \-1 \-0x006b: r4 '$this$asString' Lkotlin\/reflect\/KTypeProjection;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_25;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_42;
Node_39 -> Node_43;
Node_39 -> Node_44;
Node_40 -> Node_41;
Node_41 -> Node_25;
Node_42 -> Node_46;
Node_46 -> Node_25;
Node_43 -> Node_47;
Node_47 -> Node_25;
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_37 -> Node_38;
Node_33 -> Node_34;
}

