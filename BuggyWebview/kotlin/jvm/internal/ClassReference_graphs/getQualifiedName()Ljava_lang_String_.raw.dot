digraph "CFG forkotlin.jvm.internal.ClassReference.getQualifiedName()Ljava\/lang\/String;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: SGET  (r0 I:kotlin.jvm.internal.ClassReference$Companion) =  kotlin.jvm.internal.ClassReference.Companion kotlin.jvm.internal.ClassReference$Companion  (LINE:15)\l0x0002: INVOKE  (r1 I:java.lang.Class) = (r2 I:kotlin.jvm.internal.ClassReference) type: VIRTUAL call: kotlin.jvm.internal.ClassReference.getJClass():java.lang.Class A[MD:():java.lang.Class\<?\> (m)]\l0x0006: INVOKE  (r0 I:java.lang.String) = (r0 I:kotlin.jvm.internal.ClassReference$Companion), (r1 I:java.lang.Class) type: VIRTUAL call: kotlin.jvm.internal.ClassReference.Companion.getClassQualifiedName(java.lang.Class):java.lang.String A[MD:(java.lang.Class\<?\>):java.lang.String (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.jvm.internal.ClassReference.getQualifiedName((r2 'this' I:kotlin.jvm.internal.ClassReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.reflect.KClass.getQualifiedName():java.lang.String]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

