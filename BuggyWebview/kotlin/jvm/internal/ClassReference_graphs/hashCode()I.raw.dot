digraph "CFG forkotlin.jvm.internal.ClassReference.hashCode()I" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:94)\l0x0001: CHECK_CAST (r0 I:kotlin.reflect.KClass) = (kotlin.reflect.KClass) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:java.lang.Class) = (r0 I:kotlin.reflect.KClass) type: STATIC call: kotlin.jvm.JvmClassMappingKt.getJavaObjectType(kotlin.reflect.KClass):java.lang.Class A[MD:\<T\>:(kotlin.reflect.KClass\<T\>):java.lang.Class\<T\> (m)]\l0x0007: INVOKE  (r0 I:int) = (r0 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.hashCode():int A[MD:():int (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int kotlin.jvm.internal.ClassReference.hashCode((r1 'this' I:kotlin.jvm.internal.ClassReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.reflect.KClass.hashCode():int]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

