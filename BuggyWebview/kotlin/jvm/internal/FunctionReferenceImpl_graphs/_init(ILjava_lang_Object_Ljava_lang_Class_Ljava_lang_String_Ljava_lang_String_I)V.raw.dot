digraph "CFG forkotlin.jvm.internal.FunctionReferenceImpl.\<init\>(ILjava\/lang\/Object;Ljava\/lang\/Class;Ljava\/lang\/String;Ljava\/lang\/String;I)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  \l  (r0 I:kotlin.jvm.internal.FunctionReference)\l  (r1 I:int A[D('arity' int)])\l  (r2 I:java.lang.Object A[D('receiver' java.lang.Object)])\l  (r3 I:java.lang.Class A[D('owner' java.lang.Class)])\l  (r4 I:java.lang.String A[D('name' java.lang.String)])\l  (r5 I:java.lang.String A[D('signature' java.lang.String)])\l  (r6 I:int A[D('flags' int)])\l type: DIRECT call: kotlin.jvm.internal.FunctionReference.\<init\>(int, java.lang.Object, java.lang.Class, java.lang.String, java.lang.String, int):void A[MD:(int, java.lang.Object, java.lang.Class, java.lang.String, java.lang.String, int):void (m)] (LINE:29)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0003|RETURN\l|0x0003: RETURN    (LINE:30)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.jvm.internal.FunctionReferenceImpl.\<init\>((r0 'this' I:kotlin.jvm.internal.FunctionReferenceImpl A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[D('arity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[D('receiver' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Class A[D('owner' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('signature' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0003: r1 'arity' I\l  \-1 \-0x0003: r2 'receiver' Ljava\/lang\/Object;\l  \-1 \-0x0003: r3 'owner' Ljava\/lang\/Class;\l  \-1 \-0x0003: r4 'name' Ljava\/lang\/String;\l  \-1 \-0x0003: r5 'signature' Ljava\/lang\/String;\l  \-1 \-0x0003: r6 'flags' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

