digraph "CFG forkotlin.jvm.internal.PrimitiveSpreadBuilder.size()I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|r0 = 0\lkotlin.collections.IntIterator r1 = new kotlin.ranges.IntRange(0, r5.size \- 1).iterator()\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|LOOP_START\lLOOP:0: B:17:0x000f\-\>B:23:0x0025\lPHI: r0 \l  PHI: (r0v1 'totalLength' int) = (r0v0 'totalLength' int), (r0v2 'totalLength' int) binds: [B:16:0x0000, B:23:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|if (r1.hasNext() == false) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|int r2 = r1.nextInt()\lr4 = r5.spreads[r2]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|if (r4 == null) goto L9\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|int r4 = getSize(r4)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|LOOP_END\lLOOP:0: B:17:0x000f\-\>B:23:0x0025\lPHI: r4 \l  PHI: (r4v4 int) = (r4v3 int), (r4v5 int) binds: [B:26:0x0025, B:27:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r0 + r4\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|r4 = 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0027|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|RETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlin.jvm.internal.PrimitiveSpreadBuilder.size((r5v0 'this' kotlin.jvm.internal.PrimitiveSpreadBuilder\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0025 \-\> B:17:0x000f, CROSS_EDGE: B:22:0x0024 \-\> B:23:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_27;
Node_27 -> Node_23;
Node_23 -> Node_17;
Node_22 -> Node_26;
Node_26 -> Node_23;
Node_25 -> Node_24;
Node_24 -> Node_15;
}

