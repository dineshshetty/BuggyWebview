digraph "CFG forkotlin.jvm.internal.PrimitiveSpreadBuilder.size()I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:21)\l0x0001: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:22)\l0x0003: IGET  (r2 I:int) = (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.size int \l0x0005: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0006: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r1 I:kotlin.ranges.IntRange), (r4 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x000b: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r1 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|LOOP_START\lLOOP:0: B:17:0x000f\-\>B:23:0x0025\l|0x000f: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0027 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|0x0015: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0019: IGET  (r4 I:T[]) = (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder) kotlin.jvm.internal.PrimitiveSpreadBuilder.spreads java.lang.Object[]  (LINE:23)\l0x001b: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|0x001d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0024 \l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|0x001f: INVOKE  (r4 I:int) = (r5 I:kotlin.jvm.internal.PrimitiveSpreadBuilder), (r4 I:java.lang.Object) type: VIRTUAL call: kotlin.jvm.internal.PrimitiveSpreadBuilder.getSize(java.lang.Object):int A[MD:(T):int (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|LOOP_END\lLOOP:0: B:17:0x000f\-\>B:23:0x0025\l|0x0025: ARITH  (r0 I:int) = (r0 I:int A[D('totalLength' int)]) + (r4 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|0x0024: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0027|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:int A[D('totalLength' int)])  (LINE:25)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlin.jvm.internal.PrimitiveSpreadBuilder.size((r5 'this' I:kotlin.jvm.internal.PrimitiveSpreadBuilder\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0025 \-\> B:17:0x000f, CROSS_EDGE: B:22:0x0024 \-\> B:23:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0026: r2 'i' I\l  0x0001\-0x0027: r0 'totalLength' I\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_27;
Node_27 -> Node_23;
Node_23 -> Node_17;
Node_22 -> Node_26;
Node_26 -> Node_23;
Node_25 -> Node_24;
Node_24 -> Node_15;
}

