digraph "CFG forkotlin.jvm.internal.ClassReference.Companion.isInstance(Ljava\/lang\/Object;Ljava\/lang\/Class;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"jClass\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('jClass' java.lang.Class)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Map) =  type: STATIC call: kotlin.jvm.internal.ClassReference.access$getFUNCTION_CLASSES$cp():java.util.Map A[MD:():java.util.Map (m)] (LINE:197)\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.collections.Map\<K of kotlin.collections.MapsKt__MapsKt.get, V of kotlin.collections.MapsKt__MapsKt.get\>\" \l0x000b: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000e: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r5 I:java.lang.Object A[D('jClass' java.lang.Class)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0012: CHECK_CAST (r0 I:java.lang.Integer) = (java.lang.Integer) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0022 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|0x0016: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x001c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: INVOKE  (r2 I:boolean) = (r4 I:java.lang.Object A[D('value' java.lang.Object)]), (r0 I:int A[D('arity' int)]) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.isFunctionOfArity(java.lang.Object, int):boolean A[MD:(java.lang.Object, int):boolean (m)] (LINE:198)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0021|RETURN\l|0x0021: RETURN  (r2 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|0x0022: INVOKE  (r0 I:boolean) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isPrimitive():boolean A[MD:():boolean (c)] (LINE:200)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0026|0x0026: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0031 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0028|0x0028: INVOKE  (r0 I:kotlin.reflect.KClass) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: STATIC call: kotlin.jvm.JvmClassMappingKt.getKotlinClass(java.lang.Class):kotlin.reflect.KClass A[MD:\<T\>:(java.lang.Class\<T\>):kotlin.reflect.KClass\<T\> (m)]\l0x002c: INVOKE  (r0 I:java.lang.Class) = (r0 I:kotlin.reflect.KClass) type: STATIC call: kotlin.jvm.JvmClassMappingKt.getJavaObjectType(kotlin.reflect.KClass):java.lang.Class A[MD:\<T\>:(kotlin.reflect.KClass\<T\>):java.lang.Class\<T\> (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0032|0x0032: INVOKE  (r1 I:boolean) = (r0 I:java.lang.Class A[D('objectType' java.lang.Class)]), (r4 I:java.lang.Object A[D('value' java.lang.Object)]) type: VIRTUAL call: java.lang.Class.isInstance(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:201)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('jClass' java.lang.Class)]) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.jvm.internal.ClassReference.Companion.isInstance((r3 'this' I:kotlin.jvm.internal.ClassReference$Companion A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Class\<?\> A[D('jClass' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0036 \-\> B:13:?, CROSS_EDGE: B:21:0x0031 \-\> B:22:0x0032\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0022: r0 'arity' I\l  0x001d\-0x0022: r1 '$i$a$\-let\-ClassReference$Companion$isInstance$1' I\l  0x0032\-0x0036: r0 'objectType' Ljava\/lang\/Class;\l  \-1 \-0x0036: r4 'value' Ljava\/lang\/Object;\l  \-1 \-0x0036: r5 'jClass' Ljava\/lang\/Class;\lSIGNATURE: (Ljava\/lang\/Object;Ljava\/lang\/Class\<*\>;)Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
}

