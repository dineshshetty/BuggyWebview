digraph "CFG forkotlin.jvm.internal.ClassReference.Companion.getClassQualifiedName(Ljava\/lang\/Class;)Ljava\/lang\/String;" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"jClass\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('jClass' java.lang.Class)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: INVOKE  (r0 I:boolean) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isAnonymousClass():boolean A[MD:():boolean (c)] (LINE:184)\l0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000e \l}"];
Node_32 [shape=record,label="{32\:\ 0x000e|0x000e: INVOKE  (r0 I:boolean) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isLocalClass():boolean A[MD:():boolean (c)] (LINE:185)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0015 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isArray():boolean A[MD:():boolean (c)] (LINE:186)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x004f \l}"];
Node_37 [shape=record,label="{37\:\ 0x001b|0x001b: INVOKE  (r0 I:java.lang.Class) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getComponentType():java.lang.Class A[MD:():java.lang.Class\<?\> (c)] (LINE:187)\l0x0020: INVOKE  (r2 I:boolean) = (r0 I:java.lang.Class A[D('componentType' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isPrimitive():boolean A[MD:():boolean (c)] (LINE:189)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0049 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0026|0x0026: INVOKE  (r2 I:java.util.HashMap) =  type: STATIC call: kotlin.jvm.internal.ClassReference.access$getClassFqNames$cp():java.util.HashMap A[MD:():java.util.HashMap (m)]\l0x002a: INVOKE  (r3 I:java.lang.String) = (r0 I:java.lang.Class A[D('componentType' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x002e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.HashMap), (r3 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0032: CHECK_CAST (r2 I:java.lang.String) = (java.lang.String) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|0x0034: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0049 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0036|0x0036: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0038: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x003b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003e: CONST_STR  (r2 I:java.lang.String) =  \"Array\" \l0x0040: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0043: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0049|0x0049: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:?  (LINE:188)\l}"];
Node_44 [shape=record,label="{44\:\ 0x004c|SYNTHETIC\lRETURN\l|0x004c: CONST_STR  (r1 I:java.lang.String) =  \"kotlin.Array\" \l0x0064: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:194)\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x0064: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:194)\l}"];
Node_45 [shape=record,label="{45\:\ 0x004f|0x004f: INVOKE  (r0 I:java.util.HashMap) =  type: STATIC call: kotlin.jvm.internal.ClassReference.access$getClassFqNames$cp():java.util.HashMap A[MD:():java.util.HashMap (m)] (LINE:193)\l0x0053: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x0057: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x005b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x005c: CHECK_CAST (r1 I:java.lang.String) = (java.lang.String) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x005e|0x005e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:? \l}"];
Node_47 [shape=record,label="{47\:\ 0x0060|0x0060: INVOKE  (r1 I:java.lang.String) = (r5 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getCanonicalName():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0064|RETURN\lORIG_RETURN\l|0x0064: RETURN  (r1 I:java.lang.String)  (LINE:194)\l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|0x0064: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:194)\l}"];
Node_53 [shape=record,label="{53\:\ ?|SYNTHETIC\lRETURN\l|0x0064: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:194)\l}"];
Node_52 [shape=record,label="{52\:\ ?|SYNTHETIC\lRETURN\l|0x0064: RETURN  (r1 I:java.lang.String) A[SYNTHETIC] (LINE:194)\l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.jvm.internal.ClassReference.Companion.getClassQualifiedName((r4 'this' I:kotlin.jvm.internal.ClassReference$Companion A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Class\<?\> A[D('jClass' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0049 \-\> B:48:0x0064, CROSS_EDGE: B:40:0x0034 \-\> B:43:0x0049, CROSS_EDGE: B:38:0x0024 \-\> B:43:0x0049, CROSS_EDGE: B:47:0x0060 \-\> B:48:0x0064, CROSS_EDGE: B:46:0x005e \-\> B:48:0x0064, CROSS_EDGE: B:33:0x0012 \-\> B:48:0x0064, CROSS_EDGE: B:30:0x000b \-\> B:48:0x0064\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x004c: r0 'componentType' Ljava\/lang\/Class;\l  \-1 \-0x0064: r5 'jClass' Ljava\/lang\/Class;\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_52[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_53[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_28;
Node_49 -> Node_28;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_51;
Node_47 -> Node_48;
Node_48 -> Node_28;
Node_51 -> Node_28;
Node_53 -> Node_28;
Node_52 -> Node_28;
}

