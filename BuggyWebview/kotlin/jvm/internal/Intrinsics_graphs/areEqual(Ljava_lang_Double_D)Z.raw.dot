digraph "CFG forkotlin.jvm.internal.Intrinsics.areEqual(Ljava\/lang\/Double;D)Z" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' java.lang.Double)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000c  (LINE:177)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: INVOKE  (r0 I:double) = (r3 I:java.lang.Double A[D('first' java.lang.Double)]) type: VIRTUAL call: java.lang.Double.doubleValue():double A[MD:():double (c)]\l0x0006: CMP_L  (r2 I:int) = (r0 I:double), (r4 I:double A[D('second' double)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000c \l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|SYNTHETIC\lRETURN\l|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean kotlin.jvm.internal.Intrinsics.areEqual((r3 I:java.lang.Double A[D('first' java.lang.Double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:double A[D('second' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000c \-\> B:16:0x000d, CROSS_EDGE: B:11:0x0000 \-\> B:15:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r3 'first' Ljava\/lang\/Double;\l  \-1 \-0x000d: r4 'second' D\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_10;
Node_15 -> Node_10;
}

