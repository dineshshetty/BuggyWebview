digraph "CFG forkotlin.jvm.internal.Intrinsics.areEqual(Ljava\/lang\/Double;Ljava\/lang\/Double;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:172)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' java.lang.Double)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0007 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('second' java.lang.Double)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|0x0017: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('second' java.lang.Double)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: INVOKE  (r2 I:double) = (r7 I:java.lang.Double A[D('first' java.lang.Double)]) type: VIRTUAL call: java.lang.Double.doubleValue():double A[MD:():double (c)]\l0x000d: INVOKE  (r4 I:double) = (r8 I:java.lang.Double A[D('second' java.lang.Double)]) type: VIRTUAL call: java.lang.Double.doubleValue():double A[MD:():double (c)]\l0x0011: CMP_L  (r6 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|0x0013: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0017: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static boolean kotlin.jvm.internal.Intrinsics.areEqual((r7 I:java.lang.Double A[D('first' java.lang.Double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Double A[D('second' java.lang.Double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0004 \-\> B:25:0x0017, CROSS_EDGE: B:22:0x0013 \-\> B:24:0x0016, CROSS_EDGE: B:22:0x0013 \-\> B:25:0x0017, CROSS_EDGE: B:20:0x0007 \-\> B:24:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r7 'first' Ljava\/lang\/Double;\l  \-1 \-0x0017: r8 'second' Ljava\/lang\/Double;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_24;
Node_18 -> Node_26[style=dashed];
Node_24 -> Node_15;
Node_26 -> Node_15;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_27[style=dashed];
Node_27 -> Node_15;
}

