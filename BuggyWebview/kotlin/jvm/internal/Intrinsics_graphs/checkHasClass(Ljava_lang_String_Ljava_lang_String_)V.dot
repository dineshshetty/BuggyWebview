digraph "CFG forkotlin.jvm.internal.Intrinsics.checkHasClass(Ljava\/lang\/String;Ljava\/lang\/String;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|java.lang.String r0 = r5.replace('\/', '.')\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{ClassNotFoundException \-\> 0x000d, blocks: (B:13:0x0008), top: B:18:0x0008 \}\lCatch: ClassNotFoundException \-\> 0x000d\l|java.lang.Class.forName(r0)     \/\/ Catch: java.lang.ClassNotFoundException \-\> Ld\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|ExcHandler: ClassNotFoundException \-\> 0x000d\l|java.lang.ClassNotFoundException r1 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Class \")\lr3.append(r0)\lr3.append(\" is not found: this code requires the Kotlin runtime of version at least \")\lr3.append(r6)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0032|throw ((java.lang.ClassNotFoundException) sanitizeStackTrace(new java.lang.ClassNotFoundException(r3.toString(), r1)))\l}"];
MethodNode[shape=record,label="{public static void kotlin.jvm.internal.Intrinsics.checkHasClass((r5v0 'internalName' java.lang.String A[D('internalName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'requiredVersion' java.lang.String A[D('requiredVersion' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0032 \-\> B:11:?, CROSS_EDGE: B:18:0x0008 \-\> B:15:0x000d\lINLINE_NOT_NEEDED\lTryCatch #0 \{ClassNotFoundException \-\> 0x000d, blocks: (B:13:0x0008), top: B:18:0x0008 \}\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/lang\/ClassNotFoundException;]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_18;
Node_18 -> Node_13;
Node_18 -> Node_15;
Node_13 -> Node_14;
Node_13 -> Node_19;
Node_14 -> Node_11;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_11;
}

