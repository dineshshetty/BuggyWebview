digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt$thenByDescending$2.compare(Ljava\/lang\/Object;Ljava\/lang\/Object;)I" {
subgraph cluster_Region_13644389 {
label = "R(2:1|(2:(1:4)|(2:6|7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int int r0 = r1.compare(r5, r6)\l}"];
subgraph cluster_Region_337954102 {
label = "R(2:(1:4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_35489955 {
label = "IF [B:3:0x0006] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r0 != 0) goto L3\l}"];
subgraph cluster_Region_1935607127 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_2068862034 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000a|java.util.Comparator\<? super K\> java.util.Comparator\<? super K\> r1 = r2\lkotlin.jvm.functions.Function1\<T, K\> kotlin.jvm.functions.Function1\<T, K\> r2 = r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|RETURN\lORIG_RETURN\l|return r1.compare(r2.invoke(r6), r2.invoke(r5))\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenByDescending$2.compare((r4v0 'this' kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenByDescending$2\<T\> A[IMMUTABLE_TYPE, THIS]), (r5v0 T A[D('a' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 T A[D('b' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:5:0x000a \-\> B:6:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)I\lMETHOD_OVERRIDE: [ClspMth\{java.util.Comparator.compare(T, T):int\}]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_7;
}

