digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt.reversed(Ljava\/util\/Comparator;)Ljava\/util\/Comparator;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$reversed' java.util.Comparator)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$reversed' java.util.Comparator)]) kotlin.comparisons.ReversedComparator  (LINE:296)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0012 \l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$reversed' java.util.Comparator)]) \l0x000b: CHECK_CAST (r0 I:kotlin.comparisons.ReversedComparator) = (kotlin.comparisons.ReversedComparator) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:java.util.Comparator) = (r0 I:kotlin.comparisons.ReversedComparator) type: VIRTUAL call: kotlin.comparisons.ReversedComparator.getComparator():java.util.Comparator A[MD:():java.util.Comparator\<T\> (m)]\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN  (r0 I:java.util.Comparator\<T\>) A[SYNTHETIC] (LINE:300)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0012|0x0012: SGET  (r0 I:kotlin.comparisons.NaturalOrderComparator) =  kotlin.comparisons.NaturalOrderComparator.INSTANCE kotlin.comparisons.NaturalOrderComparator  (LINE:297)\l0x0014: INVOKE  (r0 I:boolean) = (r2 I:java.lang.Object A[D('$this$reversed' java.util.Comparator)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.util.Comparator\<T of kotlin.comparisons.ComparisonsKt__ComparisonsKt.reversed\>\{ kotlin.TypeAliasesKt.Comparator\<T of kotlin.comparisons.ComparisonsKt__ComparisonsKt.reversed\> \}\" \l}"];
Node_38 [shape=record,label="{38\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0024 \l}"];
Node_39 [shape=record,label="{39\:\ 0x001c|0x001c: SGET  (r0 I:kotlin.comparisons.ReverseOrderComparator) =  kotlin.comparisons.ReverseOrderComparator.INSTANCE kotlin.comparisons.ReverseOrderComparator \l0x001e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0021: CHECK_CAST (r0 I:java.util.Comparator) = (java.util.Comparator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN  (r0 I:java.util.Comparator\<T\>) A[SYNTHETIC] (LINE:300)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0024|0x0024: SGET  (r0 I:kotlin.comparisons.ReverseOrderComparator) =  kotlin.comparisons.ReverseOrderComparator.INSTANCE kotlin.comparisons.ReverseOrderComparator  (LINE:298)\l0x0026: INVOKE  (r0 I:boolean) = (r2 I:java.lang.Object A[D('$this$reversed' java.util.Comparator)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x002a|0x002a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0034 \l}"];
Node_42 [shape=record,label="{42\:\ 0x002c|0x002c: SGET  (r0 I:kotlin.comparisons.NaturalOrderComparator) =  kotlin.comparisons.NaturalOrderComparator.INSTANCE kotlin.comparisons.NaturalOrderComparator \l0x002e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0031: CHECK_CAST (r0 I:java.util.Comparator) = (java.util.Comparator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN  (r0 I:java.util.Comparator\<T\>) A[SYNTHETIC] (LINE:300)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0034|0x0034: NEW_INSTANCE  (r0 I:kotlin.comparisons.ReversedComparator) =  kotlin.comparisons.ReversedComparator  (LINE:299)\l0x0036: INVOKE  (r0 I:kotlin.comparisons.ReversedComparator), (r2 I:java.util.Comparator A[D('$this$reversed' java.util.Comparator)]) type: DIRECT call: kotlin.comparisons.ReversedComparator.\<init\>(java.util.Comparator):void A[MD:(java.util.Comparator\<T\>):void (m)]\l0x0039: CHECK_CAST (r0 I:java.util.Comparator) = (java.util.Comparator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x003b|RETURN\lORIG_RETURN\l|0x003b: RETURN  (r0 I:java.util.Comparator\<T\>)  (LINE:300)\l}"];
MethodNode[shape=record,label="{public static final java.util.Comparator\<T\> kotlin.comparisons.ComparisonsKt__ComparisonsKt.reversed((r2 I:java.util.Comparator\<T\> A[D('$this$reversed' java.util.Comparator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x001c \-\> B:44:0x003b, CROSS_EDGE: B:42:0x002c \-\> B:44:0x003b, CROSS_EDGE: B:43:0x0034 \-\> B:44:0x003b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003b: r2 '$this$reversed' Ljava\/util\/Comparator;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Comparator\<TT;\>;)Ljava\/util\/Comparator\<TT;\>;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_45;
Node_45 -> Node_33;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_46;
Node_46 -> Node_33;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_47;
Node_47 -> Node_33;
Node_43 -> Node_44;
Node_44 -> Node_33;
}

