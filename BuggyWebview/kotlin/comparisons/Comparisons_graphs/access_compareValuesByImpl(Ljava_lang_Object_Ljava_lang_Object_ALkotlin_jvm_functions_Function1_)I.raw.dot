digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt.access$compareValuesByImpl(Ljava\/lang\/Object;Ljava\/lang\/Object;[Lkotlin\/jvm\/functions\/Function1;)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = \l  (r1 I:java.lang.Object A[D('a' java.lang.Object)])\l  (r2 I:java.lang.Object A[D('b' java.lang.Object)])\l  (r3 I:kotlin.jvm.functions.Function1[] A[D('selectors' kotlin.jvm.functions.Function1[])])\l type: STATIC call: kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesByImpl$ComparisonsKt__ComparisonsKt(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1[]):int A[MD:\<T\>:(T, T, kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Comparable\<?\>\>[]):int (m)] (LINE:1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ int kotlin.comparisons.ComparisonsKt__ComparisonsKt.access$compareValuesByImpl((r1 I:java.lang.Object A[D('a' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Object A[D('b' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1[] A[D('selectors' kotlin.jvm.functions.Function1[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  \l  (r1 I:java.lang.Object A[D('a' java.lang.Object)])\l  (r2 I:java.lang.Object A[D('b' java.lang.Object)])\l  (r3 I:kotlin.jvm.functions.Function1[] A[D('selectors' kotlin.jvm.functions.Function1[])])\l type: STATIC call: kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesByImpl$ComparisonsKt__ComparisonsKt(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1[]):int\lDebug Info:\l  \-1 \-0x0004: r1 'a' Ljava\/lang\/Object;\l  \-1 \-0x0004: r2 'b' Ljava\/lang\/Object;\l  \-1 \-0x0004: r3 'selectors' [Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

