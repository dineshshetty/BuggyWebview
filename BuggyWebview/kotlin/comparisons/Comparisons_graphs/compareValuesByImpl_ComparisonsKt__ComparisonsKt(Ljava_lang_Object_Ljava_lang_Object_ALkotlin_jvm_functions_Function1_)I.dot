digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesByImpl$ComparisonsKt__ComparisonsKt(Ljava\/lang\/Object;Ljava\/lang\/Object;[Lkotlin\/jvm\/functions\/Function1;)I" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|int r0 = r9.length\lr2 = 0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0003|LOOP_START\lLOOP:0: B:25:0x0003\-\>B:29:0x001a\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:24:0x0000, B:29:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r0) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|r3 = r9[r2]\ljava.lang.Comparable r4 = r3.invoke(r7)\ljava.lang.Comparable r5 = r3.invoke(r8)\lint r6 = kotlin.comparisons.ComparisonsKt.compareValues(r4, r5)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|if (r6 == 0) goto L5\l}"];
Node_29 [shape=record,label="{29\:\ 0x001a|LOOP_END\lLOOP:0: B:25:0x0003\-\>B:29:0x001a\l|int r2 = r2 + 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|RETURN\l|return r6\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public static final int kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareValuesByImpl$ComparisonsKt__ComparisonsKt((r7v0 T A[D('a' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 T A[D('b' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Comparable\<?\>\>[] A[D('selectors' kotlin.jvm.functions.Function1[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:29:0x001a \-\> B:25:0x0003, CROSS_EDGE: B:30:0x001d \-\> B:23:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(TT;TT;[Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/Comparable\<*\>;\>;)I\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_32[style=dashed];
Node_29 -> Node_25;
Node_32 -> Node_28;
Node_28 -> Node_23;
Node_31 -> Node_30;
Node_30 -> Node_23;
}

