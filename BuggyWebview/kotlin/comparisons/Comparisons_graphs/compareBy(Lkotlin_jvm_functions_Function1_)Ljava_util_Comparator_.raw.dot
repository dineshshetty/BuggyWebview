digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy(Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Comparator;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2) =  kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2  (LINE:102)\l0x0007: INVOKE  \l  (r0 I:kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2)\l  (r1 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2.\<init\>(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Comparable\<?\>\>):void (m)]\l0x000a: CHECK_CAST (r0 I:java.util.Comparator) = (java.util.Comparator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:java.util.Comparator\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.Comparator\<T\> kotlin.comparisons.ComparisonsKt__ComparisonsKt.compareBy((r1 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Comparable\<?\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r1 'selector' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/Comparable\<*\>;\>;)Ljava\/util\/Comparator\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

