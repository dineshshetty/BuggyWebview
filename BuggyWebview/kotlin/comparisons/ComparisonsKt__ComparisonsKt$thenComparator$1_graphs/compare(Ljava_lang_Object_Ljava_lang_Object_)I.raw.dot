digraph "CFG forkotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1.compare(Ljava\/lang\/Object;Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.util.Comparator\<T\>) = (r2 I:kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1) kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1.$this_thenComparator java.util.Comparator  (LINE:196)\l0x0002: INVOKE  (r0 I:int) = \l  (r0 I:java.util.Comparator)\l  (r3 I:java.lang.Object A[D('a' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('b' java.lang.Object)])\l type: INTERFACE call: java.util.Comparator.compare(java.lang.Object, java.lang.Object):int A[MD:(T, T):int (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousCompare' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a  (LINE:197)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('previousCompare' int)]) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r1 I:kotlin.jvm.functions.Function2\<T, T, java.lang.Integer\>) = (r2 I:kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1) kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1.$comparison kotlin.jvm.functions.Function2 \l0x000c: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:kotlin.jvm.functions.Function2)\l  (r3 I:java.lang.Object A[D('a' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('b' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0010: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:int) = (r1 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public final int kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1.compare((r2 'this' I:kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[D('a' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[D('b' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:5:0x000a \-\> B:6:0x0016\lDebug Info:\l  0x0006\-0x0016: r0 'previousCompare' I\l  \-1 \-0x0016: r3 'a' Ljava\/lang\/Object;\l  \-1 \-0x0016: r4 'b' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)I\lMETHOD_OVERRIDE: [ClspMth\{java.util.Comparator.compare(T, T):int\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

