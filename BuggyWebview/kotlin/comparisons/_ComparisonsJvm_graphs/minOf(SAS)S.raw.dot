digraph "CFG forkotlin.comparisons.ComparisonsKt___ComparisonsJvmKt.minOf(S[S)S" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('other' short[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('a' short)])  (LINE:392)\l0x0006: ARRAY_LENGTH  (r1 I:int) = (r6 I:??[] A[D('other' short[])])  (LINE:393)\l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:4:0x000a\l|0x0008: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:4:0x000a\l|0x000a: AGET  (r3 I:short A[IMMUTABLE_TYPE]) = (r6 I:short[] A[D('other' short[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char]) \l0x000c: INVOKE  (r4 I:int) = (r0 I:int A[D('min' short)]), (r3 I:int A[D('e' short)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x0010: CAST (r0 I:short A[D('min' short)]) = (short) (r4 I:int) \l0x0011: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:short A[D('min' short)])  (LINE:394)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final short kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt.minOf((r5 I:short A[D('a' short), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:short[] A[D('other' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x000a \-\> B:3:0x0008\lDebug Info:\l  0x000c\-0x0014: r3 'e' S\l  0x0006\-0x0014: r0 'min' S\l  \-1 \-0x0014: r5 'a' S\l  \-1 \-0x0014: r6 'other' [S\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

