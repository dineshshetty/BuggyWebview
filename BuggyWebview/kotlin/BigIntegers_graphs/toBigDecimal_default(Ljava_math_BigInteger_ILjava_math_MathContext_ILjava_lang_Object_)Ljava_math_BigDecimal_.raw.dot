digraph "CFG forkotlin.NumbersKt__BigIntegersKt.toBigDecimal$default(Ljava\/math\/BigInteger;ILjava\/math\/MathContext;ILjava\/lang\/Object;)Ljava\/math\/BigDecimal;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:127)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0005 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scale' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0011 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: SGET  (r3 I:java.math.MathContext) =  java.math.MathContext.UNLIMITED java.math.MathContext \l0x000b: CONST_STR  (r4 I:java.lang.String) =  \"UNLIMITED\" \l0x000d: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('mathContext' java.math.MathContext)]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|0x0011: CONST_STR  (r3 I:java.lang.String) =  \"\<this\>\" \l0x0013: INVOKE  (r0 I:java.lang.Object A[D('$this$toBigDecimal_u24default' java.math.BigInteger)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0016: CONST_STR  (r3 I:java.lang.String) =  \"mathContext\" \l0x0018: INVOKE  (r2 I:java.lang.Object A[D('mathContext' java.math.MathContext)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001b: NEW_INSTANCE  (r3 I:java.math.BigDecimal) =  java.math.BigDecimal  (LINE:128)\l0x001d: INVOKE  \l  (r3 I:java.math.BigDecimal)\l  (r0 I:java.math.BigInteger A[D('$this$toBigDecimal_u24default' java.math.BigInteger)])\l  (r1 I:int A[D('scale' int)])\l  (r2 I:java.math.MathContext A[D('mathContext' java.math.MathContext)])\l type: DIRECT call: java.math.BigDecimal.\<init\>(java.math.BigInteger, int, java.math.MathContext):void A[MD:(java.math.BigInteger, int, java.math.MathContext):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|RETURN\l|0x0020: RETURN  (r3 I:java.math.BigDecimal) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.math.BigDecimal kotlin.NumbersKt__BigIntegersKt.toBigDecimal$default((r0 I:java.math.BigInteger A[D('$this$toBigDecimal_u24default' java.math.BigInteger), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[D('scale' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.math.MathContext A[D('mathContext' java.math.MathContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:16:0x0007 \-\> B:18:0x0011, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r0 '$this$toBigDecimal_u24default' Ljava\/math\/BigInteger;\l  \-1 \-0x0020: r1 'scale' I\l  \-1 \-0x0020: r2 'mathContext' Ljava\/math\/MathContext;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

