digraph "CFG forkotlin.internal.PlatformImplementationsKt.getJavaVersion()I" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (65542(0x10006, float:9.1844E\-41) ??[int, float, short, byte, char])  (LINE:88)\l0x0003: CONST_STR  (r1 I:java.lang.String) =  \"java.specification.version\"  (LINE:89)\l0x0005: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) type: STATIC call: java.lang.System.getProperty(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000c \l}"];
Node_31 [shape=record,label="{31\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:int A[D('default' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000c|0x000c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('version' java.lang.String)])  (LINE:90)\l0x000d: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x000f: CONST  (r3 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: CONST  (r6 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char]) \l0x0014: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r2 I:int) = (r2 I:java.lang.CharSequence), (r3 I:char), (r4 I:int), (r5 I:boolean), (r6 I:int), (r7 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int (m)]\l0x0019: CONST  (r3 I:??[int, float, short, byte, char]) = (65536(0x10000, float:9.1835E\-41) ??[int, float, short, byte, char])  (LINE:91)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: IF  (r2 I:??[int, byte, short, char] A[D('firstDot' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:39:0x0027 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0027|0x0027: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('version' java.lang.String)])  (LINE:94)\l0x0028: CHECK_CAST (r5 I:java.lang.CharSequence) = (java.lang.CharSequence) (r5 I:??[OBJECT, ARRAY]) \l0x002a: CONST  (r6 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x002c: ARITH  (r7 I:int) = (r2 I:int A[D('firstDot' int)]) + (1 int) \l0x002e: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002f: CONST  (r9 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0030: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:int) = (r5 I:java.lang.CharSequence), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int), (r10 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|0x0035: IF  (r4 I:??[int, byte, short, char] A[D('secondDot' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:42:0x003b  (LINE:95)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0037|0x0037: INVOKE  (r4 I:int A[D('secondDot' int)]) = (r1 I:java.lang.String A[D('version' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x003b|0x003b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:97)\l0x003c: INVOKE  (r5 I:java.lang.String) = (r1 I:java.lang.String A[D('version' java.lang.String)]), (r5 I:int), (r2 I:int A[D('firstDot' int)]) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x0040: CONST_STR  (r6 I:java.lang.String) =  \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\" \l0x0042: INVOKE  (r5 I:java.lang.Object), (r6 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0045: ARITH  (r7 I:int) = (r2 I:int A[D('firstDot' int)]) + (1 int)  (LINE:98)\l0x0047: INVOKE  (r7 I:java.lang.String) = (r1 I:java.lang.String A[D('version' java.lang.String)]), (r7 I:int), (r4 I:int A[D('secondDot' int)]) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x004b: INVOKE  (r7 I:java.lang.Object), (r6 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x004e: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0050|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_43 [shape=record,label="{43\:\ 0x0050|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{NumberFormatException \-\> 0x005c, blocks: (B:43:0x0050), top: B:50:0x0050 \}\lCatch: NumberFormatException \-\> 0x005c\l|0x0050: INVOKE  (r7 I:int) = (r5 I:java.lang.String A[D('firstPart' java.lang.String)]) type: STATIC call: java.lang.Integer.parseInt(java.lang.String):int A[Catch: NumberFormatException \-\> 0x005c, MD:(java.lang.String):int throws java.lang.NumberFormatException (c), TRY_ENTER] (LINE:100)\l0x0054: ARITH  (r7 I:int) = (r7 I:int) * (r3 I:int) A[Catch: NumberFormatException \-\> 0x005c]\l0x0056: INVOKE  (r3 I:int) = (r6 I:java.lang.String A[D('secondPart' java.lang.String)]) type: STATIC call: java.lang.Integer.parseInt(java.lang.String):int A[Catch: NumberFormatException \-\> 0x005c, MD:(java.lang.String):int throws java.lang.NumberFormatException (c), TRY_LEAVE]\l}"];
Node_44 [shape=record,label="{44\:\ 0x005a|0x005a: ARITH  (r7 I:int) = (r7 I:int) + (r3 I:int) \l}"];
Node_53 [shape=record,label="{53\:\ ?|SYNTHETIC\lRETURN\l|0x005e: RETURN  (r7 I:int) A[SYNTHETIC] (LINE:99)\l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_45 [shape=record,label="{45\:\ 0x005c|ExcHandler: NumberFormatException \-\> 0x005c\l|0x005c: MOVE_EXCEPTION  (r3 I:java.lang.NumberFormatException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NumberFormatException \-\> 0x005c] (LINE:101)\l}"];
Node_46 [shape=record,label="{46\:\ 0x005d|0x005d: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('default' int)])  (LINE:102)\l}"];
Node_47 [shape=record,label="{47\:\ 0x005e|RETURN\lORIG_RETURN\l|0x005e: RETURN  (r7 I:int)  (LINE:99)\l}"];
Node_48 [shape=record,label="{48\:\ 0x001d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NumberFormatException \-\> 0x0024, blocks: (B:34:0x001d), top: B:48:0x001d \}\lCatch: NumberFormatException \-\> 0x0024\l|0x001d: INVOKE  (r4 I:int) = (r1 I:java.lang.String A[D('version' java.lang.String)]) type: STATIC call: java.lang.Integer.parseInt(java.lang.String):int A[Catch: NumberFormatException \-\> 0x0024, MD:(java.lang.String):int throws java.lang.NumberFormatException (c), TRY_ENTER, TRY_LEAVE] (LINE:92)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0021|0x0021: ARITH  (r4 I:int) = (r4 I:int) * (r3 I:int) \l}"];
Node_52 [shape=record,label="{52\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN  (r4 I:int) A[SYNTHETIC]\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|ExcHandler: NumberFormatException \-\> 0x0024\l|0x0024: MOVE_EXCEPTION  (r3 I:java.lang.NumberFormatException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NumberFormatException \-\> 0x0024]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0025|0x0025: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('default' int)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{private static final int kotlin.internal.PlatformImplementationsKt.getJavaVersion()  | USE_LINES_HINTS\lCROSS_EDGE: B:47:0x005e \-\> B:28:?, CROSS_EDGE: B:46:0x005d \-\> B:47:0x005e, CROSS_EDGE: B:50:0x0050 \-\> B:45:0x005c, CROSS_EDGE: B:40:0x0035 \-\> B:42:0x003b, CROSS_EDGE: B:38:0x0026 \-\> B:28:?, CROSS_EDGE: B:37:0x0025 \-\> B:38:0x0026, CROSS_EDGE: B:48:0x001d \-\> B:36:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x005d\-0x005e: r3 'e' Ljava\/lang\/NumberFormatException;\l  0x0003\-0x005e: r0 'default' I\l  0x000c\-0x005e: r1 'version' Ljava\/lang\/String;\l  0x0019\-0x005e: r2 'firstDot' I\l  0x0035\-0x005e: r4 'secondDot' I\l  0x0045\-0x005e: r5 'firstPart' Ljava\/lang\/String;\l  0x004f\-0x005e: r6 'secondPart' Ljava\/lang\/String;\lTryCatch #0 \{NumberFormatException \-\> 0x0024, blocks: (B:34:0x001d), top: B:48:0x001d \}, TryCatch #1 \{NumberFormatException \-\> 0x005c, blocks: (B:43:0x0050), top: B:50:0x0050 \}\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_28;
Node_32 -> Node_33;
Node_33 -> Node_39;
Node_33 -> Node_48[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_50;
Node_50 -> Node_43;
Node_50 -> Node_45;
Node_43 -> Node_44;
Node_43 -> Node_51;
Node_44 -> Node_53;
Node_53 -> Node_28;
Node_51 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_28;
Node_48 -> Node_34;
Node_48 -> Node_36;
Node_34 -> Node_35;
Node_34 -> Node_49;
Node_35 -> Node_52;
Node_52 -> Node_28;
Node_49 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_28;
}

