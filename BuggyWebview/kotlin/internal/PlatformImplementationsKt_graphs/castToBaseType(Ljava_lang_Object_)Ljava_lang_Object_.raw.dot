digraph "CFG forkotlin.internal.PlatformImplementationsKt.castToBaseType(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"T\"  (LINE:75)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:76)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{ClassCastException \-\> 0x000a, blocks: (B:16:0x0003), top: B:24:0x0003 \}\lCatch: ClassCastException \-\> 0x000a\l|0x0003: INVOKE  (r1 I:int), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(int, java.lang.String):void A[Catch: ClassCastException \-\> 0x000a, MD:(int, java.lang.String):void (m), TRY_ENTER]\l0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('instance' java.lang.Object)]) \l0x0007: CHECK_CAST (r1 I:java.lang.Object) = (java.lang.Object) (r1 I:??[OBJECT, ARRAY]) A[Catch: ClassCastException \-\> 0x000a, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:T) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|ExcHandler: ClassCastException \-\> 0x000a\l|0x000a: MOVE_EXCEPTION  (r1 I:java.lang.ClassCastException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ClassCastException \-\> 0x000a] (LINE:77)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|0x000b: INVOKE  (r2 I:java.lang.Class) = (r6 I:java.lang.Object A[D('instance' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)] (LINE:78)\l0x000f: INVOKE  (r2 I:java.lang.ClassLoader) = (r2 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getClassLoader():java.lang.ClassLoader A[MD:():java.lang.ClassLoader (c)]\l0x0013: CONST  (r3 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0014: INVOKE  (r3 I:int), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(int, java.lang.String):void A[MD:(int, java.lang.String):void (m)]\l0x0017: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0019: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001a: CHECK_CAST (r3 I:java.lang.Class) = (java.lang.Class) (r3 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r0 I:java.lang.ClassLoader) = (r0 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getClassLoader():java.lang.ClassLoader A[MD:():java.lang.ClassLoader (c)] (LINE:79)\l0x0020: INVOKE  (r3 I:boolean) = \l  (r2 I:java.lang.Object A[D('instanceCL' java.lang.ClassLoader)])\l  (r0 I:java.lang.Object A[D('baseTypeCL' java.lang.ClassLoader)])\l type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:80)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0048 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|0x0026: NEW_INSTANCE  (r3 I:java.lang.ClassNotFoundException) =  java.lang.ClassNotFoundException  (LINE:81)\l0x0028: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r4 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"Instance class was loaded from a different classloader: \" \l0x002f: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r4 I:java.lang.StringBuilder), (r2 I:java.lang.Object A[D('instanceCL' java.lang.ClassLoader)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0035: CONST_STR  (r5 I:java.lang.String) =  \", base type classloader: \" \l0x0037: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003a: INVOKE  (r4 I:java.lang.StringBuilder), (r0 I:java.lang.Object A[D('baseTypeCL' java.lang.ClassLoader)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x003d: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0041: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('e' java.lang.ClassCastException)]) \l0x0042: CHECK_CAST (r5 I:java.lang.Throwable) = (java.lang.Throwable) (r5 I:??[OBJECT, ARRAY]) \l0x0044: INVOKE  (r3 I:java.lang.ClassNotFoundException), (r4 I:java.lang.String), (r5 I:java.lang.Throwable) type: DIRECT call: java.lang.ClassNotFoundException.\<init\>(java.lang.String, java.lang.Throwable):void A[MD:(java.lang.String, java.lang.Throwable):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0047|0x0047: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: THROW  (r1 I:java.lang.Throwable A[D('e' java.lang.ClassCastException)])  (LINE:83)\l}"];
MethodNode[shape=record,label="{private static final \/* synthetic *\/ T kotlin.internal.PlatformImplementationsKt.castToBaseType((r6 I:java.lang.Object A[D('instance' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:22:0x0047 \-\> B:14:?, CROSS_EDGE: B:23:0x0048 \-\> B:14:?, CROSS_EDGE: B:24:0x0003 \-\> B:18:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x0048: r0 'baseTypeCL' Ljava\/lang\/ClassLoader;\l  0x000b\-0x0048: r1 'e' Ljava\/lang\/ClassCastException;\l  0x0013\-0x0048: r2 'instanceCL' Ljava\/lang\/ClassLoader;\l  \-1 \-0x0048: r6 'instance' Ljava\/lang\/Object;\lTryCatch #0 \{ClassCastException \-\> 0x000a, blocks: (B:16:0x0003), top: B:24:0x0003 \}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Object;)TT;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_24;
Node_24 -> Node_16;
Node_24 -> Node_18;
Node_16 -> Node_17;
Node_16 -> Node_25;
Node_17 -> Node_14;
Node_25 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_14;
Node_23 -> Node_14;
}

