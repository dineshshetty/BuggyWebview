digraph "CFG forkotlin.internal.jdk8.JDK8PlatformImplementations.getMatchResultNamedGroup(Ljava\/util\/regex\/MatchResult;Ljava\/lang\/String;)Lkotlin\/text\/MatchGroup;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"matchResult\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('matchResult' java.util.regex.MatchResult)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"name\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('name' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('matchResult' java.util.regex.MatchResult)]) java.util.regex.Matcher  (LINE:30)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('matchResult' java.util.regex.MatchResult)]) \l0x0010: CHECK_CAST (r0 I:java.util.regex.Matcher) = (java.util.regex.Matcher) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0040 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:32)\l0x0018: INVOKE  (r3 I:int) = \l  (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r7 I:java.lang.String A[D('name' java.lang.String)])\l type: VIRTUAL call: java.util.regex.Matcher.start(java.lang.String):int A[MD:(java.lang.String):int (c)]\l0x001c: INVOKE  (r4 I:int) = \l  (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r7 I:java.lang.String A[D('name' java.lang.String)])\l type: VIRTUAL call: java.util.regex.Matcher.end(java.lang.String):int A[MD:(java.lang.String):int (c)]\l0x0020: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x0022: INVOKE  (r2 I:kotlin.ranges.IntRange), (r3 I:int), (r4 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0025: INVOKE  (r3 I:java.lang.Integer) = (r2 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getStart():java.lang.Integer A[MD:():java.lang.Integer (m)] (LINE:33)\l0x0029: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|0x002d: IF  (r3 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:14:? \l}"];
Node_9 [shape=record,label="{9\:\ 0x002f|0x002f: NEW_INSTANCE  (r1 I:kotlin.text.MatchGroup) =  kotlin.text.MatchGroup  (LINE:34)\l0x0031: INVOKE  (r3 I:java.lang.String) = \l  (r0 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r7 I:java.lang.String A[D('name' java.lang.String)])\l type: VIRTUAL call: java.util.regex.Matcher.group(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (c)]\l0x0035: CONST_STR  (r4 I:java.lang.String) =  \"matcher.group(name)\" \l0x0037: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x003a: INVOKE  \l  (r1 I:kotlin.text.MatchGroup)\l  (r3 I:java.lang.String)\l  (r2 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)])\l type: DIRECT call: kotlin.text.MatchGroup.\<init\>(java.lang.String, kotlin.ranges.IntRange):void A[MD:(java.lang.String, kotlin.ranges.IntRange):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|RETURN\lORIG_RETURN\l|0x003f: RETURN  (r1 I:kotlin.text.MatchGroup)  (LINE:33)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN  (r1 I:kotlin.text.MatchGroup) A[SYNTHETIC] (LINE:33)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|0x0040: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException A[D('matcher' java.util.regex.Matcher)]) =  java.lang.UnsupportedOperationException  (LINE:30)\l0x0042: CONST_STR  (r1 I:java.lang.String) =  \"Retrieving groups by name is not supported on this platform.\" \l0x0044: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|0x0047: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public kotlin.text.MatchGroup kotlin.internal.jdk8.JDK8PlatformImplementations.getMatchResultNamedGroup((r5 'this' I:kotlin.internal.jdk8.JDK8PlatformImplementations A[IMMUTABLE_TYPE, THIS]), (r6 I:java.util.regex.MatchResult A[D('matchResult' java.util.regex.MatchResult), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x002d \-\> B:11:0x003f, CROSS_EDGE: B:13:0x0047 \-\> B:1:?, CROSS_EDGE: B:5:0x0013 \-\> B:6:0x0014\lDebug Info:\l  0x0016\-0x0040: r0 'matcher' Ljava\/util\/regex\/Matcher;\l  0x0025\-0x0040: r2 'range' Lkotlin\/ranges\/IntRange;\l  \-1 \-0x0047: r6 'matchResult' Ljava\/util\/regex\/MatchResult;\l  \-1 \-0x0047: r7 'name' Ljava\/lang\/String;\lMETHOD_OVERRIDE: [kotlin.internal.PlatformImplementations.getMatchResultNamedGroup(java.util.regex.MatchResult, java.lang.String):kotlin.text.MatchGroup]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_11;
Node_11 -> Node_1;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_5 -> Node_6;
}

