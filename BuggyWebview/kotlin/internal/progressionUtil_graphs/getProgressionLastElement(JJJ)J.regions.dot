digraph "CFG forkotlin.internal.ProgressionUtilKt.getProgressionLastElement(JJJ)J" {
subgraph cluster_Region_1967527667 {
label = "R(2:(1:(1:6))(1:(1:17)(1:(1:15)))|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2114613075 {
label = "IF [B:22:0x0005] THEN: R(1:(1:6)) ELSE: R(1:(1:17)(1:(1:15)))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0005|if (r11 \> 0) goto L3\l}"];
subgraph cluster_Region_1226340480 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1618465382 {
label = "IF [B:24:0x0009] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0009|if (r7 \< r9) goto L5\l}"];
subgraph cluster_Region_625189141 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return r9 \- differenceModulo(r9, r7, r11)\l}"];
}
}
}
subgraph cluster_Region_144585241 {
label = "R(1:(1:17)(1:(1:15))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_46700530 {
label = "IF [B:28:0x0018] THEN: R(1:17) ELSE: R(1:(1:15)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0018|if (r11 \>= 0) goto L16\l}"];
subgraph cluster_Region_1559396655 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0030|throw new java.lang.IllegalArgumentException(\"Step is zero.\")\l}"];
}
subgraph cluster_Region_1677838509 {
label = "R(1:(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_502669518 {
label = "IF [B:30:0x001c] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x001c|if (r7 \> r9) goto L14\l}"];
subgraph cluster_Region_1531401093 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0028|RETURN\lORIG_RETURN\l|return differenceModulo(r7, r9, \-r11) + r9\l}"];
}
}
}
}
}
}
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return r9\l}"];
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0001}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0007}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000c}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x001e}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0016}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x001a}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0020}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0029}"];
MethodNode[shape=record,label="{public static final long kotlin.internal.ProgressionUtilKt.getProgressionLastElement((r7v0 'start' long A[D('start' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'end' long A[D('end' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'step' long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x001e \-\> B:33:0x0028, CROSS_EDGE: B:30:0x001c \-\> B:31:0x001e, CROSS_EDGE: B:32:0x0020 \-\> B:33:0x0028, CROSS_EDGE: B:35:0x0030 \-\> B:20:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_19;Node_22 -> Node_23;
Node_22 -> Node_27[style=dashed];
Node_24 -> Node_26;
Node_24 -> Node_31[style=dashed];
Node_36 -> Node_20;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_35 -> Node_20;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_33 -> Node_20;
Node_37 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_26 -> Node_36;
Node_31 -> Node_37;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_32 -> Node_33;
Node_34 -> Node_35;
}

