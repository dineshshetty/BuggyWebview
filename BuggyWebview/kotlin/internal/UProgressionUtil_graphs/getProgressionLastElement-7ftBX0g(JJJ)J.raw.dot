digraph "CFG forkotlin.internal.UProgressionUtilKt.getProgressionLastElement\-7ftBX0g(JJJ)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001|0x0001: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:64)\l0x0003: CMP_L  (r2 I:int) = (r12 I:long A[D('step' long)]), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r8 I:long A[D('start' long)]), (r10 I:long A[D('end' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  (r5 I:long) = (r12 I:long A[D('step' long)]) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0012: MOVE  (r1 I:??[long, double]) = (r10 I:??[long, double] A[D('end' long)]) \l0x0013: MOVE  (r3 I:??[long, double]) = (r8 I:??[long, double] A[D('start' long)]) \l0x0014: INVOKE  (r0 I:long) = (r1 I:long), (r3 I:long), (r5 I:long) type: STATIC call: kotlin.internal.UProgressionUtilKt.differenceModulo\-sambcqE(long, long, long):long A[MD:(long, long, long):long (m)]\l0x0018: ARITH  (r0 I:long) = (r10 I:long A[D('end' long)]) \- (r0 I:long) \l0x001a: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:67)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|0x0029: MOVE  (r0 I:??[long, double]) = (r10 I:??[long, double] A[D('end' long)])  (LINE:67)\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:67)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CMP_L  (r2 I:int) = (r12 I:long A[D('step' long)]), (r0 I:long)  (LINE:65)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:15:0x003c \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: INVOKE  (r0 I:int) = (r8 I:long A[D('start' long)]), (r10 I:long A[D('end' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:13:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: NEG  (r0 I:long) = (r12 I:long A[D('step' long)])  (LINE:65)\l0x002c: INVOKE  (r6 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0030: MOVE  (r2 I:??[long, double]) = (r8 I:??[long, double] A[D('start' long)]) \l0x0031: MOVE  (r4 I:??[long, double]) = (r10 I:??[long, double] A[D('end' long)]) \l0x0032: INVOKE  (r0 I:long) = (r2 I:long), (r4 I:long), (r6 I:long) type: STATIC call: kotlin.internal.UProgressionUtilKt.differenceModulo\-sambcqE(long, long, long):long A[MD:(long, long, long):long (m)]\l0x0036: ARITH  (r0 I:long) = (r0 I:long) + (r10 I:long A[D('end' long)]) \l0x0037: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003b|RETURN\lORIG_RETURN\l|0x003b: RETURN  (r0 I:long)  (LINE:67)\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:66)\l0x003e: CONST_STR  (r1 I:java.lang.String) =  \"Step is zero.\" \l0x0040: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|0x0043: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.internal.UProgressionUtilKt.getProgressionLastElement\-7ftBX0g((r8 I:long A[D('start' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('end' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0029 \-\> B:14:0x003b, CROSS_EDGE: B:11:0x0027 \-\> B:12:0x0029, CROSS_EDGE: B:13:0x002b \-\> B:14:0x003b, CROSS_EDGE: B:16:0x0043 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0043: r8 'start' J\l  \-1 \-0x0043: r10 'end' J\l  \-1 \-0x0043: r12 'step' J\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_12[style=dashed];
Node_7 -> Node_17;
Node_17 -> Node_1;
Node_12 -> Node_18;
Node_18 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

