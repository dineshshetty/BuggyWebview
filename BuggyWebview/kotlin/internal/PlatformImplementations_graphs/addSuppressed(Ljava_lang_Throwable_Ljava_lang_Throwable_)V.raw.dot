digraph "CFG forkotlin.internal.PlatformImplementations.addSuppressed(Ljava\/lang\/Throwable;Ljava\/lang\/Throwable;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"cause\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('cause' java.lang.Throwable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"exception\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('exception' java.lang.Throwable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: SGET  (r0 I:java.lang.reflect.Method) =  kotlin.internal.PlatformImplementations.ReflectThrowable.addSuppressed java.lang.reflect.Method  (LINE:32)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: APUT  \l  (r1 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r5 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)])\l \l0x0014: INVOKE  (r0 I:java.lang.reflect.Method), (r4 I:java.lang.Object A[D('cause' java.lang.Throwable)]), (r1 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: RETURN    (LINE:33)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0017: RETURN   A[SYNTHETIC] (LINE:33)\l}"];
MethodNode[shape=record,label="{public void kotlin.internal.PlatformImplementations.addSuppressed((r3 'this' I:kotlin.internal.PlatformImplementations A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000c \-\> B:12:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r4 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0017: r5 'exception' Ljava\/lang\/Throwable;\lMETHOD_OVERRIDE: [kotlin.internal.PlatformImplementations.addSuppressed(java.lang.Throwable, java.lang.Throwable):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

