digraph "CFG forkotlin.internal.PlatformImplementations.getSuppressed(Ljava\/lang\/Throwable;)Ljava\/util\/List;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"exception\")\ljava.lang.reflect.Method r0 = kotlin.internal.PlatformImplementations.ReflectThrowable.getSuppressed\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|if (r0 == null) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|java.lang.Object r0 = r0.invoke(r4, new java.lang.Object[0])\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|if (r0 == null) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|java.util.List r0 = kotlin.collections.ArraysKt.asList((java.lang.Throwable[]) r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|if (r0 != null) goto L7\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c}"];
Node_20 [shape=record,label="{20\:\ 0x0020|RETURN\lORIG_RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
MethodNode[shape=record,label="{public java.util.List\<java.lang.Throwable\> kotlin.internal.PlatformImplementations.getSuppressed((r3v0 'this' kotlin.internal.PlatformImplementations A[IMMUTABLE_TYPE, THIS]), (r4v0 'exception' java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x001a \-\> B:20:0x0020, CROSS_EDGE: B:16:0x0010 \-\> B:19:0x001c, CROSS_EDGE: B:14:0x0007 \-\> B:19:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Throwable;)Ljava\/util\/List\<Ljava\/lang\/Throwable;\>;\lMETHOD_OVERRIDE: [kotlin.internal.PlatformImplementations.getSuppressed(java.lang.Throwable):java.util.List\<java.lang.Throwable\>]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

