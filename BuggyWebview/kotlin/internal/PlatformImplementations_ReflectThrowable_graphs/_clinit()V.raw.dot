digraph "CFG forkotlin.internal.PlatformImplementations.ReflectThrowable.\<clinit\>()V" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.internal.PlatformImplementations$ReflectThrowable) =  kotlin.internal.PlatformImplementations$ReflectThrowable \l0x0002: INVOKE  (r0 I:kotlin.internal.PlatformImplementations$ReflectThrowable) type: DIRECT call: kotlin.internal.PlatformImplementations.ReflectThrowable.\<init\>():void A[MD:():void (m)]\l0x0005: SPUT  (r0 I:kotlin.internal.PlatformImplementations$ReflectThrowable) kotlin.internal.PlatformImplementations.ReflectThrowable.INSTANCE kotlin.internal.PlatformImplementations$ReflectThrowable \l0x0007: CONST_CLASS  (r0 I:java.lang.Class\<java.lang.Throwable\>) =  java.lang.Throwable.class  (LINE:21)\l0x000a: INVOKE  (r1 I:java.lang.reflect.Method[]) = (r0 I:java.lang.Class A[D('throwableClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getMethods():java.lang.reflect.Method[] A[MD:():java.lang.reflect.Method[] throws java.lang.SecurityException (c)] (LINE:23)\l0x000e: CONST_STR  (r2 I:java.lang.String) =  \"throwableMethods\"  (LINE:24)\l0x0010: INVOKE  (r1 I:java.lang.Object A[D('throwableMethods' java.lang.reflect.Method[])]), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0013: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[] A[D('throwableMethods' java.lang.reflect.Method[])]) \l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|LOOP_START\lLOOP:0: B:30:0x0016\-\>B:40:0x0044\l|0x0016: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|0x0017: IF  (r4 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:51:0x0047 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|0x0019: AGET  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('throwableMethods' java.lang.reflect.Method[])]), (r4 I:??[int, short, byte, char]) \l0x001b: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x001c: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: INVOKE  (r9 I:java.lang.String) = (r7 I:java.lang.reflect.Method A[D('it' java.lang.reflect.Method)]) type: VIRTUAL call: java.lang.reflect.Method.getName():java.lang.String A[MD:():java.lang.String (c)] (LINE:25)\l0x0021: CONST_STR  (r10 I:java.lang.String) =  \"addSuppressed\" \l0x0023: INVOKE  (r9 I:boolean) = (r9 I:java.lang.Object), (r10 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|0x0027: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0040 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0029|0x0029: INVOKE  (r9 I:java.lang.Class[]) = (r7 I:java.lang.reflect.Method A[D('it' java.lang.reflect.Method)]) type: VIRTUAL call: java.lang.reflect.Method.getParameterTypes():java.lang.Class[] A[MD:():java.lang.Class\<?\>[] (c)]\l0x002d: CONST_STR  (r10 I:java.lang.String) =  \"it.parameterTypes\" \l0x002f: INVOKE  (r9 I:java.lang.Object), (r10 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0032: CHECK_CAST (r9 I:java.lang.Object[]) = (java.lang.Object[]) (r9 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r9 I:java.lang.Object) = (r9 I:java.lang.Object[]) type: STATIC call: kotlin.collections.ArraysKt.singleOrNull(java.lang.Object[]):java.lang.Object A[MD:\<T\>:(T[]):T (m)]\l0x0038: INVOKE  (r9 I:boolean) = (r9 I:java.lang.Object), (r0 I:java.lang.Object A[D('throwableClass' java.lang.Class)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x003c|0x003c: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0040 \l}"];
Node_36 [shape=record,label="{36\:\ 0x003e|0x003e: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0041|0x0041: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0044  (LINE:24)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0044|LOOP_END\lLOOP:0: B:30:0x0016\-\>B:40:0x0044\l|0x0044: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0048|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0048|0x0048: SPUT  (r6 I:java.lang.reflect.Method) kotlin.internal.PlatformImplementations.ReflectThrowable.addSuppressed java.lang.reflect.Method \l0x004a: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[] A[D('throwableMethods' java.lang.reflect.Method[])])  (LINE:27)\l}"];
Node_43 [shape=record,label="{43\:\ 0x004b|LOOP_START\lLOOP:1: B:43:0x004b\-\>B:47:0x005f\l|0x004b: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:52:0x0062 \l}"];
Node_44 [shape=record,label="{44\:\ 0x004d|0x004d: AGET  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('throwableMethods' java.lang.reflect.Method[])]), (r3 I:??[int, short, byte, char]) \l0x004f: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0050: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:119)\l0x0051: INVOKE  (r8 I:java.lang.String) = (r6 I:java.lang.reflect.Method A[D('it' java.lang.reflect.Method)]) type: VIRTUAL call: java.lang.reflect.Method.getName():java.lang.String A[MD:():java.lang.String (c)] (LINE:27)\l0x0055: CONST_STR  (r9 I:java.lang.String) =  \"getSuppressed\" \l0x0057: INVOKE  (r6 I:boolean A[D('it' java.lang.reflect.Method)]) = (r8 I:java.lang.Object), (r9 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x005b|0x005b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.reflect.Method)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x005f \l}"];
Node_47 [shape=record,label="{47\:\ 0x005f|LOOP_END\lLOOP:1: B:43:0x004b\-\>B:47:0x005f\l|0x005f: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_53 [shape=record,label="{53\:\ 0x005d|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x005d|0x005d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0062|0x0062: SPUT  (r5 I:java.lang.reflect.Method) kotlin.internal.PlatformImplementations.ReflectThrowable.getSuppressed java.lang.reflect.Method \l}"];
Node_49 [shape=record,label="{49\:\ 0x0064|RETURN\l|0x0064: RETURN    (LINE:28)\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ 0x0062|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0040|0x0040: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0047|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0047|0x0047: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static void kotlin.internal.PlatformImplementations.ReflectThrowable.\<clinit\>()  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:40:0x0044 \-\> B:30:0x0016, BACK_EDGE: B:47:0x005f \-\> B:43:0x004b, CROSS_EDGE: B:43:0x004b \-\> B:48:0x0062, CROSS_EDGE: B:37:0x0040 \-\> B:38:0x0041, CROSS_EDGE: B:33:0x0027 \-\> B:37:0x0040, CROSS_EDGE: B:41:0x0047 \-\> B:42:0x0048\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0041: r7 'it' Ljava\/lang\/reflect\/Method;\l  0x001d\-0x0041: r8 '$i$a$\-find\-PlatformImplementations$ReflectThrowable$1' I\l  0x0050\-0x005b: r6 'it' Ljava\/lang\/reflect\/Method;\l  0x0051\-0x005b: r7 '$i$a$\-find\-PlatformImplementations$ReflectThrowable$2' I\l  0x000a\-0x0064: r0 'throwableClass' Ljava\/lang\/Class;\l  0x000e\-0x0064: r1 'throwableMethods' [Ljava\/lang\/reflect\/Method;\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_51;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_37;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_50[style=dashed];
Node_40 -> Node_30;
Node_50 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_52;
Node_44 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_53[style=dashed];
Node_47 -> Node_43;
Node_53 -> Node_46;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_28;
Node_52 -> Node_48;
Node_37 -> Node_38;
Node_51 -> Node_41;
Node_41 -> Node_42;
}

