digraph "CFG forkotlin.internal.PlatformImplementations.ReflectThrowable.\<clinit\>()V" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|kotlin.internal.PlatformImplementations.ReflectThrowable.INSTANCE = new kotlin.internal.PlatformImplementations.ReflectThrowable()\ljava.lang.reflect.Method[] r1 = java.lang.Throwable.class.getMethods()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"throwableMethods\")\lint r2 = r1.length\lr3 = 0\lr4 = 0\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|LOOP_START\lLOOP:0: B:30:0x0016\-\>B:40:0x0044\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v3 int) binds: [B:29:0x0000, B:40:0x0044] A[DONT_GENERATE, DONT_INLINE]\l|r5 = null\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|if (r4 \>= r2) goto L24\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|r6 = r1[r4]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|if (kotlin.jvm.internal.Intrinsics.areEqual(r6.getName(), \"addSuppressed\") == false) goto L23\l}"];
Node_34 [shape=record,label="{34\:\ 0x0029|java.lang.Class[] r9 = r6.getParameterTypes()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r9, \"it.parameterTypes\")\l}"];
Node_35 [shape=record,label="{35\:\ 0x003c|if (kotlin.jvm.internal.Intrinsics.areEqual(kotlin.collections.ArraysKt.singleOrNull(r9), java.lang.Throwable.class) == false) goto L23\l}"];
Node_36 [shape=record,label="{36\:\ 0x003e|r9 = true\l}"];
Node_38 [shape=record,label="{38\:\ 0x0041|PHI: r9 \l  PHI: (r9v4 boolean) = (r9v3 boolean), (r9v9 boolean) binds: [B:37:0x0040, B:36:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 == false) goto L10\l}"];
Node_40 [shape=record,label="{40\:\ 0x0044|LOOP_END\lLOOP:0: B:30:0x0016\-\>B:40:0x0044\l|int r4 = r4 + 1\l}"];
Node_50 [shape=record,label="{50\:\ 0x0048|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0048|PHI: r6 \l  PHI: (r6v1 'it' java.lang.reflect.Method) = (r6v0 'it' java.lang.reflect.Method), (r6v4 'it' java.lang.reflect.Method) binds: [B:41:0x0047, B:50:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.internal.PlatformImplementations.ReflectThrowable.addSuppressed = r6\lint r2 = r1.length\l}"];
Node_43 [shape=record,label="{43\:\ 0x004b|LOOP_START\lLOOP:1: B:43:0x004b\-\>B:47:0x005f\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:42:0x0048, B:47:0x005f] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L22\l}"];
Node_44 [shape=record,label="{44\:\ 0x004d|r4 = r1[r3]\l}"];
Node_45 [shape=record,label="{45\:\ 0x005b|if (kotlin.jvm.internal.Intrinsics.areEqual(r4.getName(), \"getSuppressed\") == false) goto L16\l}"];
Node_47 [shape=record,label="{47\:\ 0x005f|LOOP_END\lLOOP:1: B:43:0x004b\-\>B:47:0x005f\l|int r3 = r3 + 1\l}"];
Node_53 [shape=record,label="{53\:\ 0x005d|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x005d|r5 = r4\l}"];
Node_48 [shape=record,label="{48\:\ 0x0062|PHI: r5 \l  PHI: (r5v1 java.lang.reflect.Method) = (r5v0 java.lang.reflect.Method), (r5v2 java.lang.reflect.Method) binds: [B:52:0x0062, B:46:0x005d] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.internal.PlatformImplementations.ReflectThrowable.getSuppressed = r5\l}"];
Node_49 [shape=record,label="{49\:\ 0x0064|RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ 0x0062|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0040|r9 = false\l}"];
Node_51 [shape=record,label="{51\:\ 0x0047|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0047|r6 = null\l}"];
MethodNode[shape=record,label="{static void kotlin.internal.PlatformImplementations.ReflectThrowable.\<clinit\>()  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:40:0x0044 \-\> B:30:0x0016, BACK_EDGE: B:47:0x005f \-\> B:43:0x004b, CROSS_EDGE: B:43:0x004b \-\> B:48:0x0062, CROSS_EDGE: B:37:0x0040 \-\> B:38:0x0041, CROSS_EDGE: B:33:0x0027 \-\> B:37:0x0040, CROSS_EDGE: B:41:0x0047 \-\> B:42:0x0048\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_51;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_37;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_50[style=dashed];
Node_40 -> Node_30;
Node_50 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_52;
Node_44 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_53[style=dashed];
Node_47 -> Node_43;
Node_53 -> Node_46;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_28;
Node_52 -> Node_48;
Node_37 -> Node_38;
Node_51 -> Node_41;
Node_41 -> Node_42;
}

