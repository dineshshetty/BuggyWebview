digraph "CFG forkotlin.random.PlatformRandomKt.asKotlinRandom(Ljava\/util\/Random;)Lkotlin\/random\/Random;" {
subgraph cluster_Region_1063687333 {
label = "R(3:1|2|4) | DECL_VAR: kotlin.random.Random null\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|kotlin.random.KotlinRandom r0 = r1 instanceof kotlin.random.KotlinRandom ? (kotlin.random.KotlinRandom) r1 : null\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\lPHI: r0 \l  PHI: (r0v3 kotlin.random.KotlinRandom) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|return (r0 == null \|\| (r0 = r0.getImpl()) == null) ? new kotlin.random.PlatformRandom(r1) : r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0009}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0014|REMOVE\lADDED_TO_REGION\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0016}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001d|ORIG_RETURN\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
MethodNode[shape=record,label="{public static final kotlin.random.Random kotlin.random.PlatformRandomKt.asKotlinRandom((r1v0 '$this$asKotlinRandom' java.util.Random A[D('$this$asKotlinRandom' java.util.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0014 \-\> B:10:0x001d, CROSS_EDGE: B:6:0x000e \-\> B:9:0x0016, CROSS_EDGE: B:5:0x000d \-\> B:6:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_9;
Node_0 -> Node_2;
Node_4 -> Node_6;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

