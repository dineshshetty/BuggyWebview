digraph "CFG forkotlin.random.URandomKt.nextULong(Lkotlin\/random\/Random;Lkotlin\/ranges\/ULongRange;)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"range\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r11.isEmpty() != false) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0021|if (kotlin.UnsignedUtils.ulongCompare(r11.m1381getLastsVKNKU(), \-1) \>= 0) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return m1372nextULongjmpaWc(r10, r11.m1380getFirstsVKNKU(), kotlin.ULong.m316constructorimpl(r11.m1381getLastsVKNKU() + kotlin.ULong.m316constructorimpl(((long) 1) & 4294967295L)))\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x003c}"];
Node_8 [shape=record,label="{8\:\ 0x0046|if (kotlin.UnsignedUtils.ulongCompare(r11.m1380getFirstsVKNKU(), 0) \<= 0) goto L12\l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|long r0 = ((long) 1) & 4294967295L\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.ULong.m316constructorimpl(m1372nextULongjmpaWc(r10, kotlin.ULong.m316constructorimpl(r11.m1380getFirstsVKNKU() \- kotlin.ULong.m316constructorimpl(r0)), r11.m1381getLastsVKNKU()) + kotlin.ULong.m316constructorimpl(r0))\l}"];
Node_10 [shape=record,label="{10\:\ 0x006a}"];
Node_11 [shape=record,label="{11\:\ 0x006e|RETURN\lORIG_RETURN\l|return nextULong(r10)\l}"];
Node_12 [shape=record,label="{12\:\ 0x006f|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot get random in empty range: \")\lr1.append(r11)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0085|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final long kotlin.random.URandomKt.nextULong((r10v0 '$this$nextULong' kotlin.random.Random A[D('$this$nextULong' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'range' kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0048 \-\> B:11:0x006e, CROSS_EDGE: B:10:0x006a \-\> B:11:0x006e, CROSS_EDGE: B:13:0x0085 \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_14;
Node_14 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

