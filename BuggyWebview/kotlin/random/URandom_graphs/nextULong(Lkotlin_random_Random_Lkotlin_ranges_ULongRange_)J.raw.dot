digraph "CFG forkotlin.random.URandomKt.nextULong(Lkotlin\/random\/Random;Lkotlin\/ranges\/ULongRange;)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$nextULong' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('range' kotlin.ranges.ULongRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:boolean) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:115)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x006f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r0 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getLast\-s\-VKNKU():long A[MD:():long (m)] (LINE:116)\l0x0015: CONST  (r2 I:??[long, double]) = (\-1 ??[long, double]) \l0x0017: INVOKE  (r0 I:int) = (r0 I:long), (r2 I:long) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l0x001b: CONST  (r1 I:??[long, double]) = (4294967295(0xffffffff, double:2.1219957905E\-314) ??[long, double]) \l0x0020: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|0x0021: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:7:0x003c \l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  (r4 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getFirst\-s\-VKNKU():long A[MD:():long (m)]\l0x0027: INVOKE  (r6 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getLast\-s\-VKNKU():long A[MD:():long (m)]\l0x002b: CAST (r8 I:long) = (long) (r3 I:int) \l0x002c: ARITH  (r0 I:long) = (r8 I:long) & (r1 I:long) \l0x002e: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0032: ARITH  (r6 I:long) = (r6 I:long) + (r0 I:long) \l0x0033: INVOKE  (r0 I:long) = (r6 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0037: INVOKE  (r0 I:long) = (r10 I:kotlin.random.Random A[D('$this$nextULong' kotlin.random.Random)]), (r4 I:long), (r0 I:long) type: STATIC call: kotlin.random.URandomKt.nextULong\-jmpaW\-c(kotlin.random.Random, long, long):long A[MD:(kotlin.random.Random, long, long):long (m)]\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x006e: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:119)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x003c|0x003c: INVOKE  (r4 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getFirst\-s\-VKNKU():long A[MD:():long (m)] (LINE:117)\l0x0040: CONST  (r6 I:??[long, double]) = (0 ??[long, double]) \l0x0042: INVOKE  (r0 I:int) = (r4 I:long), (r6 I:long) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0046|0x0046: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:10:0x006a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0048|0x0048: INVOKE  (r4 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getFirst\-s\-VKNKU():long A[MD:():long (m)]\l0x004c: CAST (r6 I:long) = (long) (r3 I:int) \l0x004d: ARITH  (r0 I:long) = (r6 I:long) & (r1 I:long) \l0x004f: INVOKE  (r2 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0053: ARITH  (r4 I:long) = (r4 I:long) \- (r2 I:long) \l0x0054: INVOKE  (r2 I:long) = (r4 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0058: INVOKE  (r4 I:long) = (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: kotlin.ranges.ULongRange.getLast\-s\-VKNKU():long A[MD:():long (m)]\l0x005c: INVOKE  (r2 I:long) = (r10 I:kotlin.random.Random A[D('$this$nextULong' kotlin.random.Random)]), (r2 I:long), (r4 I:long) type: STATIC call: kotlin.random.URandomKt.nextULong\-jmpaW\-c(kotlin.random.Random, long, long):long A[MD:(kotlin.random.Random, long, long):long (m)]\l0x0060: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0064: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l0x0065: INVOKE  (r0 I:long) = (r2 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x006e: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:119)\l}"];
Node_10 [shape=record,label="{10\:\ 0x006a|0x006a: INVOKE  (r0 I:long) = (r10 I:kotlin.random.Random A[D('$this$nextULong' kotlin.random.Random)]) type: STATIC call: kotlin.random.URandomKt.nextULong(kotlin.random.Random):long A[MD:(kotlin.random.Random):long (m)] (LINE:118)\l}"];
Node_11 [shape=record,label="{11\:\ 0x006e|RETURN\lORIG_RETURN\l|0x006e: RETURN  (r0 I:long)  (LINE:119)\l}"];
Node_12 [shape=record,label="{12\:\ 0x006f|0x006f: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:115)\l0x0071: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0073: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0076: CONST_STR  (r2 I:java.lang.String) =  \"Cannot get random in empty range: \" \l0x0078: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x007b: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:java.lang.Object A[D('range' kotlin.ranges.ULongRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x007e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0082: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0085|0x0085: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.random.URandomKt.nextULong((r10 I:kotlin.random.Random A[D('$this$nextULong' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.ranges.ULongRange A[D('range' kotlin.ranges.ULongRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0048 \-\> B:11:0x006e, CROSS_EDGE: B:10:0x006a \-\> B:11:0x006e, CROSS_EDGE: B:13:0x0085 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0085: r10 '$this$nextULong' Lkotlin\/random\/Random;\l  \-1 \-0x0085: r11 'range' Lkotlin\/ranges\/ULongRange;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_14;
Node_14 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

