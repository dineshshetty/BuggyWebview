digraph "CFG forkotlin.random.URandomKt.checkULongRangeBounds\-eb3DHEI(JJ)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:long A[D('until' long)]), (r3 I:long A[D('from' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)] (LINE:154)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000c \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:156)\l0x000d: INVOKE  (r1 I:kotlin.ULong) = (r3 I:long A[D('from' long)]) type: STATIC call: kotlin.ULong.box\-impl(long):kotlin.ULong A[MD:(long):kotlin.ULong (m)] (LINE:154)\l0x0011: INVOKE  (r2 I:kotlin.ULong) = (r5 I:long A[D('until' long)]) type: STATIC call: kotlin.ULong.box\-impl(long):kotlin.ULong A[MD:(long):kotlin.ULong (m)]\l0x0015: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-URandomKt$checkULongRangeBounds$1' int)]) = (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.random.RandomKt.boundsErrorMessage(java.lang.Object, java.lang.Object):java.lang.String A[MD:(java.lang.Object, java.lang.Object):java.lang.String (m)]\l0x0019: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001b: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001f: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.random.URandomKt.checkULongRangeBounds\-eb3DHEI((r3 I:long A[D('from' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0022 \-\> B:1:?, CROSS_EDGE: B:5:0x0008 \-\> B:6:0x0009\lDebug Info:\l  0x000d\-0x0019: r0 '$i$a$\-require\-URandomKt$checkULongRangeBounds$1' I\l  \-1 \-0x0022: r3 'from' J\l  \-1 \-0x0022: r5 'until' J\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_5 -> Node_6;
}

