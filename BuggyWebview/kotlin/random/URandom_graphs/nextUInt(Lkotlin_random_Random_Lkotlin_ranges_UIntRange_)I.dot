digraph "CFG forkotlin.random.URandomKt.nextUInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/UIntRange;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"range\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r4.isEmpty() != false) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (kotlin.UnsignedUtils.uintCompare(r4.m1374getLastpVg5ArA(), \-1) \>= 0) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return m1369nextUInta8DCA5k(r3, r4.m1373getFirstpVg5ArA(), kotlin.UInt.m238constructorimpl(r4.m1374getLastpVg5ArA() + 1))\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f}"];
Node_8 [shape=record,label="{8\:\ 0x0038|if (kotlin.UnsignedUtils.uintCompare(r4.m1373getFirstpVg5ArA(), 0) \<= 0) goto L12\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.UInt.m238constructorimpl(m1369nextUInta8DCA5k(r3, kotlin.UInt.m238constructorimpl(r4.m1373getFirstpVg5ArA() + (\-1)), r4.m1374getLastpVg5ArA()) + 1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0053}"];
Node_11 [shape=record,label="{11\:\ 0x0057|RETURN\lORIG_RETURN\l|return nextUInt(r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0058|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot get random in empty range: \")\lr1.append(r4)\l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.URandomKt.nextUInt((r3v0 '$this$nextUInt' kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'range' kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003a \-\> B:11:0x0057, CROSS_EDGE: B:10:0x0053 \-\> B:11:0x0057, CROSS_EDGE: B:13:0x006e \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_14;
Node_14 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

