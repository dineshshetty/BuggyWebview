digraph "CFG forkotlin.random.URandomKt.nextUBytes\-Wvrt4B4(Lkotlin\/random\/Random;[BII)[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$this$nextUBytes\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$nextUBytes_u2dWvrt4B4' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('array' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  \l  (r1 I:kotlin.random.Random A[D('$this$nextUBytes_u2dWvrt4B4' kotlin.random.Random)])\l  (r2 I:byte[] A[D('array' byte[])])\l  (r3 I:int A[D('fromIndex' int)])\l  (r4 I:int A[D('toIndex' int)])\l type: VIRTUAL call: kotlin.random.Random.nextBytes(byte[], int, int):byte[] A[MD:(byte[], int, int):byte[] (m)] (LINE:148)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:byte[] A[D('array' byte[])])  (LINE:149)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final byte[] kotlin.random.URandomKt.nextUBytes\-Wvrt4B4((r1 I:kotlin.random.Random A[D('$this$nextUBytes_u2dWvrt4B4' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000d: r1 '$this$nextUBytes_u2dWvrt4B4' Lkotlin\/random\/Random;\l  \-1 \-0x000d: r2 'array' [B\l  \-1 \-0x000d: r3 'fromIndex' I\l  \-1 \-0x000d: r4 'toIndex' I\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

