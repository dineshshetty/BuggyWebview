digraph "CFG forkotlin.random.URandomKt.nextUBytes\-Wvrt4B4$default(Lkotlin\/random\/Random;[BIIILjava\/lang\/Object;)[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:147)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0005 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000d \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: INVOKE  (r3 I:int) = (r1 I:byte[]) type: STATIC call: kotlin.UByteArray.getSize\-impl(byte[]):int A[MD:(byte[]):int (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: INVOKE  (r0 I:byte[]) = (r0 I:kotlin.random.Random), (r1 I:byte[]), (r2 I:int), (r3 I:int) type: STATIC call: kotlin.random.URandomKt.nextUBytes\-Wvrt4B4(kotlin.random.Random, byte[], int, int):byte[] A[MD:(kotlin.random.Random, byte[], int, int):byte[] (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:byte[]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ byte[] kotlin.random.URandomKt.nextUBytes\-Wvrt4B4$default((r0 I:kotlin.random.Random A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:byte[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x0007 \-\> B:8:0x000d, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0005\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

