digraph "CFG forkotlin.random.URandomKt.nextUInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/UIntRange;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$nextUInt' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('range' kotlin.ranges.UIntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:59)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0058 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getLast\-pVg5ArA():int A[MD:():int (m)] (LINE:60)\l0x0015: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0016: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:7:0x002f \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getFirst\-pVg5ArA():int A[MD:():int (m)]\l0x0020: INVOKE  (r1 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getLast\-pVg5ArA():int A[MD:():int (m)]\l0x0024: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0026: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x002a: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random)]), (r0 I:int), (r1 I:int) type: STATIC call: kotlin.random.URandomKt.nextUInt\-a8DCA5k(kotlin.random.Random, int, int):int A[MD:(kotlin.random.Random, int, int):int (m)]\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x0057: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:63)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|0x002f: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getFirst\-pVg5ArA():int A[MD:():int (m)] (LINE:61)\l0x0033: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0034: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getFirst\-pVg5ArA():int A[MD:():int (m)]\l0x003e: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0040: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x0044: INVOKE  (r1 I:int) = (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.getLast\-pVg5ArA():int A[MD:():int (m)]\l0x0048: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random)]), (r0 I:int), (r1 I:int) type: STATIC call: kotlin.random.URandomKt.nextUInt\-a8DCA5k(kotlin.random.Random, int, int):int A[MD:(kotlin.random.Random, int, int):int (m)]\l0x004c: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x004e: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0057: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:63)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|0x0053: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random)]) type: STATIC call: kotlin.random.URandomKt.nextUInt(kotlin.random.Random):int A[MD:(kotlin.random.Random):int (m)] (LINE:62)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0057|RETURN\lORIG_RETURN\l|0x0057: RETURN  (r0 I:int)  (LINE:63)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0058|0x0058: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:59)\l0x005a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x005f: CONST_STR  (r2 I:java.lang.String) =  \"Cannot get random in empty range: \" \l0x0061: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0064: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('range' kotlin.ranges.UIntRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0067: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x006e|0x006e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.URandomKt.nextUInt((r3 I:kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003a \-\> B:11:0x0057, CROSS_EDGE: B:10:0x0053 \-\> B:11:0x0057, CROSS_EDGE: B:13:0x006e \-\> B:1:?\lDebug Info:\l  \-1 \-0x006e: r3 '$this$nextUInt' Lkotlin\/random\/Random;\l  \-1 \-0x006e: r4 'range' Lkotlin\/ranges\/UIntRange;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_14;
Node_14 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

