digraph "CFG forkotlin.random.URandomKt.nextUInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/UIntRange;)I" {
subgraph cluster_Region_1069312590 {
label = "R(2:1|(2:(1:4)|(2:14|15)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"range\")\l}"];
subgraph cluster_Region_1869790000 {
label = "R(2:(1:4)|(2:14|15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_22215998 {
label = "IF [B:3:0x000f] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r4.isEmpty() != true) goto L3\l}"];
subgraph cluster_Region_1519736675 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001a|RETURN\l|return kotlin.UnsignedUtils.uintCompare(r4.m1374getLastpVg5ArA(), \-1) \< 0 ? m1369nextUInta8DCA5k(r3, r4.m1373getFirstpVg5ArA(), kotlin.UInt.m238constructorimpl(r4.m1374getLastpVg5ArA() + 1)) : kotlin.UnsignedUtils.uintCompare(r4.m1373getFirstpVg5ArA(), 0) \> 0 ? kotlin.UInt.m238constructorimpl(m1369nextUInta8DCA5k(r3, kotlin.UInt.m238constructorimpl(r4.m1373getFirstpVg5ArA() \- 1), r4.m1374getLastpVg5ArA()) + 1) : nextUInt(r3)\l}"];
}
}
subgraph cluster_Region_103262309 {
label = "R(2:14|15)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0058}"];
Node_13 [shape=record,label="{13\:\ 0x006e|throw new java.lang.IllegalArgumentException(\"Cannot get random in empty range: \" + r4)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0011}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001c}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002f}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0038}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x003a}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0053}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0057|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.URandomKt.nextUInt((r3v0 '$this$nextUInt' kotlin.random.Random A[D('$this$nextUInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'range' kotlin.ranges.UIntRange A[D('range' kotlin.ranges.UIntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003a \-\> B:11:0x0057, CROSS_EDGE: B:10:0x0053 \-\> B:11:0x0057, CROSS_EDGE: B:13:0x006e \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_6 -> Node_14;
Node_14 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

