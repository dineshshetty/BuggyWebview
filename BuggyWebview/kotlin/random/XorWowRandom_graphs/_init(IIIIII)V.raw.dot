digraph "CFG forkotlin.random.XorWowRandom.\<init\>(IIIIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r4 I:kotlin.random.Random) type: DIRECT call: kotlin.random.Random.\<init\>():void A[MD:():void (m)] (LINE:25)\l0x0003: IPUT  (r5 I:int A[D('x' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.x int  (LINE:19)\l0x0005: IPUT  (r6 I:int A[D('y' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.y int  (LINE:20)\l0x0007: IPUT  (r7 I:int A[D('z' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.z int  (LINE:21)\l0x0009: IPUT  (r8 I:int A[D('w' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.w int  (LINE:22)\l0x000b: IPUT  (r9 I:int A[D('v' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.v int  (LINE:23)\l0x000d: IPUT  (r10 I:int A[D('addend' int)]), (r4 I:kotlin.random.XorWowRandom) kotlin.random.XorWowRandom.addend int  (LINE:24)\l0x0010: ARITH  (r0 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('x' int)]) \| (r6 I:??[int, boolean, short, byte, char] A[D('y' int)])  (LINE:31)\l0x0012: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r7 I:??[int, boolean, short, byte, char] A[D('z' int)]) \l0x0013: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r8 I:??[int, boolean, short, byte, char] A[D('w' int)]) \l0x0014: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r9 I:??[int, boolean, short, byte, char] A[D('v' int)]) \l0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: CONST  (r0 I:??[int, float, short, byte, char]) = (64 ??[int, float, short, byte, char])  (LINE:34)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_START\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\l|0x001f: IF  (r1 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char])  \-\> B:14:0x002a \l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_END\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\l|0x0021: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:61)\l0x0023: INVOKE  (r4 I:kotlin.random.XorWowRandom) type: VIRTUAL call: kotlin.random.XorWowRandom.nextInt():int A[MD:():int (m)] (LINE:34)\l0x0026: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|RETURN\l|0x002a: RETURN    (LINE:18)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:61)\l0x002d: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('$i$a$\-require\-XorWowRandom$1' int)]) =  java.lang.IllegalArgumentException \l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"Initial state must have at least one non\-zero element.\" \l0x0031: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0035: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|0x0038: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlin.random.XorWowRandom.\<init\>((r4 'this' I:kotlin.random.XorWowRandom A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('z' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('v' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('addend' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0021 \-\> B:8:0x001f, CROSS_EDGE: B:13:0x0038 \-\> B:1:?, CROSS_EDGE: B:5:0x001a \-\> B:6:0x001b\lDebug Info:\l  0x0022\-0x0026: r2 'it' I\l  0x0023\-0x0026: r3 '$i$a$\-repeat\-XorWowRandom$2' I\l  0x002c\-0x002d: r0 '$i$a$\-require\-XorWowRandom$1' I\l  \-1 \-0x0038: r5 'x' I\l  \-1 \-0x0038: r6 'y' I\l  \-1 \-0x0038: r7 'z' I\l  \-1 \-0x0038: r8 'w' I\l  \-1 \-0x0038: r9 'v' I\l  \-1 \-0x0038: r10 'addend' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_8;
Node_14 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_5 -> Node_6;
}

