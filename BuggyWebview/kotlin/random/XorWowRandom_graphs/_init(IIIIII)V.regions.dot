digraph "CFG forkotlin.random.XorWowRandom.\<init\>(IIIIII)V" {
subgraph cluster_Region_748051274 {
label = "R(2:1|(2:(1:12)|(1:(1:7))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|r4.f207x = r5\lr4.f208y = r6\lr4.f209z = r7\lr4.f206w = r8\lr4.f205v = r9\lr4.addend = r10\lint r1 = 0\l}"];
subgraph cluster_Region_1879645694 {
label = "R(2:(1:12)|(1:(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_755778550 {
label = "IF [B:6:0x001b] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x001b|PHI: r0 \l  PHI: (r0v5 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((((((r5 \| r6) \| r7) \| r8) \| r9) != 0) != true) goto L11\l}"];
subgraph cluster_Region_1605889893 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0038|throw new java.lang.IllegalArgumentException(\"Initial state must have at least one non\-zero element.\".toString())\l}"];
}
}
subgraph cluster_Region_290023311 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1372749466 {
label = "LOOP:0: (1:7)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_START\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\lPHI: r1 \l  PHI: (r1v3 int) = (r1v0 int), (r1v4 int) binds: [B:7:0x001d, B:9:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< 64) goto L7\l}"];
subgraph cluster_Region_167713606 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0021|LOOP_END\lLOOP:0: B:8:0x001f\-\>B:9:0x0021\l|nextInt()\lr1++\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0016}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001d}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002a|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002a}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002b}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001a}"];
MethodNode[shape=record,label="{public void kotlin.random.XorWowRandom.\<init\>((r4v0 'this' kotlin.random.XorWowRandom A[IMMUTABLE_TYPE, THIS]), (r5v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'z' int A[D('z' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'v' int A[D('v' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'addend' int A[D('addend' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0021 \-\> B:8:0x001f, CROSS_EDGE: B:13:0x0038 \-\> B:1:?, CROSS_EDGE: B:5:0x001a \-\> B:6:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_13 -> Node_1;
Node_8 -> Node_9;
Node_8 -> Node_14[style=dashed];
Node_9 -> Node_8;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_7 -> Node_8;
Node_14 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_5 -> Node_6;
}

