digraph "CFG forkotlin.random.XorWowRandom.nextBits(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r1 I:kotlin.random.XorWowRandom) type: VIRTUAL call: kotlin.random.XorWowRandom.nextInt():int A[MD:():int (m)] (LINE:54)\l0x0004: INVOKE  (r0 I:int) = (r0 I:int), (r2 I:int A[D('bitCount' int)]) type: STATIC call: kotlin.random.RandomKt.takeUpperBits(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int kotlin.random.XorWowRandom.nextBits((r1 'this' I:kotlin.random.XorWowRandom A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('bitCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0008: r2 'bitCount' I\lMETHOD_OVERRIDE: [kotlin.random.Random.nextBits(int):int]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

