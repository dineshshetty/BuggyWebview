digraph "CFG forkotlin.random.Random.Default.nextBytes(I)[B" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.random.Random) =  type: STATIC call: kotlin.random.Random.access$getDefaultRandom$cp():kotlin.random.Random A[MD:():kotlin.random.Random (m)] (LINE:299)\l0x0004: INVOKE  (r0 I:byte[]) = (r0 I:kotlin.random.Random), (r2 I:int A[D('size' int)]) type: VIRTUAL call: kotlin.random.Random.nextBytes(int):byte[] A[MD:(int):byte[] (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:byte[]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public byte[] kotlin.random.Random.Default.nextBytes((r1 'this' I:kotlin.random.Random$Default A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r2 'size' I\lMETHOD_OVERRIDE: [kotlin.random.Random.nextBytes(int):byte[]]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

