digraph "CFG forkotlin.random.RandomKt.nextInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/IntRange;)I" {
subgraph cluster_Region_77565873 {
label = "R(2:1|(2:(1:4)|(2:14|15)))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"range\")\l}"];
subgraph cluster_Region_1710536866 {
label = "R(2:(1:4)|(2:14|15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1992534510 {
label = "IF [B:19:0x000f] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r4.isEmpty() != true) goto L3\l}"];
subgraph cluster_Region_1625805042 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0018|RETURN\l|return r4.getLast() \< Integer.MAX_VALUE ? r3.nextInt(r4.getFirst(), r4.getLast() + 1) : r4.getFirst() \> Integer.MIN_VALUE ? r3.nextInt(r4.getFirst() \- 1, r4.getLast()) + 1 : r3.nextInt()\l}"];
}
}
subgraph cluster_Region_419244376 {
label = "R(2:14|15)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0047}"];
Node_29 [shape=record,label="{29\:\ 0x005d|throw new java.lang.IllegalArgumentException(\"Cannot get random in empty range: \" + r4)\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0011}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x001a}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0029}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x002f}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0031}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0042}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0046|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.RandomKt.nextInt((r3v0 '$this$nextInt' kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'range' kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0031 \-\> B:27:0x0046, CROSS_EDGE: B:26:0x0042 \-\> B:27:0x0046, CROSS_EDGE: B:29:0x005d \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_28[style=dashed];
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_16 -> Node_18;
Node_20 -> Node_21;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_31;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
}

