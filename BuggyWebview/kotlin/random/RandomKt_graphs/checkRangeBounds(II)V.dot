digraph "CFG forkotlin.random.RandomKt.checkRangeBounds(II)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|if (r4 \<= r3) goto L8\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|r0 = true\l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v5 boolean) binds: [B:13:0x0004, B:12:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008}"];
Node_17 [shape=record,label="{17\:\ 0x001e|throw new java.lang.IllegalArgumentException(boundsErrorMessage(java.lang.Integer.valueOf(r3), java.lang.Integer.valueOf(r4)).toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|r0 = false\l}"];
MethodNode[shape=record,label="{public static final void kotlin.random.RandomKt.checkRangeBounds((r3v0 'from' int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'until' int A[D('until' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001e \-\> B:10:?, CROSS_EDGE: B:13:0x0004 \-\> B:14:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_13 -> Node_14;
}

