digraph "CFG forkotlin.random.RandomKt.checkRangeBounds(II)V" {
subgraph cluster_Region_469718569 {
label = "R(1:(1:(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1718486611 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1760927031 {
label = "IF [B:14:0x0005] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r4 \> r3) != true) goto L6\l}"];
subgraph cluster_Region_1218376975 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x001e|throw new java.lang.IllegalArgumentException(boundsErrorMessage(java.lang.Integer.valueOf(r3), java.lang.Integer.valueOf(r4)).toString())\l}"];
}
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0002}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0007}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0004}"];
MethodNode[shape=record,label="{public static final void kotlin.random.RandomKt.checkRangeBounds((r3v0 'from' int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'until' int A[D('until' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001e \-\> B:10:?, CROSS_EDGE: B:13:0x0004 \-\> B:14:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_13 -> Node_14;
}

