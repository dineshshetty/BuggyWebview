digraph "CFG forkotlin.random.RandomKt.checkRangeBounds(II)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r4 I:??[int, byte, short, char] A[D('until' int)]) \<= (r3 I:??[int, byte, short, char] A[D('from' int)])  \-\> B:13:0x0004  (LINE:378)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0008 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:384)\l0x0009: INVOKE  (r1 I:java.lang.Integer) = (r3 I:int A[D('from' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:378)\l0x000d: INVOKE  (r2 I:java.lang.Integer) = (r4 I:int A[D('until' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0011: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-RandomKt$checkRangeBounds$1' int)]) = (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.random.RandomKt.boundsErrorMessage(java.lang.Object, java.lang.Object):java.lang.String A[MD:(java.lang.Object, java.lang.Object):java.lang.String (m)]\l0x0015: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0017: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001b: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|0x001e: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.random.RandomKt.checkRangeBounds((r3 I:int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('until' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001e \-\> B:10:?, CROSS_EDGE: B:13:0x0004 \-\> B:14:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0015: r0 '$i$a$\-require\-RandomKt$checkRangeBounds$1' I\l  \-1 \-0x001e: r3 'from' I\l  \-1 \-0x001e: r4 'until' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_13 -> Node_14;
}

