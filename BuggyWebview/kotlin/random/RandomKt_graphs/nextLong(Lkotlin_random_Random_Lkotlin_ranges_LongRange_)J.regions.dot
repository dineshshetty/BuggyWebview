digraph "CFG forkotlin.random.RandomKt.nextLong(Lkotlin\/random\/Random;Lkotlin\/ranges\/LongRange;)J" {
subgraph cluster_Region_1485615949 {
label = "R(2:1|(2:(1:4)|(2:14|15)))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"range\")\l}"];
subgraph cluster_Region_871099755 {
label = "R(2:(1:4)|(2:14|15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1834343332 {
label = "IF [B:19:0x000f] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r8.isEmpty() != true) goto L3\l}"];
subgraph cluster_Region_471042239 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x001e|RETURN\l|return r8.getLast() \< Long.MAX_VALUE ? r7.nextLong(r8.getFirst(), r8.getLast() + 1) : r8.getFirst() \> Long.MIN_VALUE ? r7.nextLong(r8.getFirst() \- 1, r8.getLast()) + 1 : r7.nextLong()\l}"];
}
}
subgraph cluster_Region_557340331 {
label = "R(2:14|15)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x004c}"];
Node_29 [shape=record,label="{29\:\ 0x0062|throw new java.lang.IllegalArgumentException(\"Cannot get random in empty range: \" + r8)\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0011}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0020}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x002e}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0036}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0038}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0047}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x004b|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final long kotlin.random.RandomKt.nextLong((r7v0 '$this$nextLong' kotlin.random.Random A[D('$this$nextLong' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'range' kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0038 \-\> B:27:0x004b, CROSS_EDGE: B:26:0x0047 \-\> B:27:0x004b, CROSS_EDGE: B:29:0x0062 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_28[style=dashed];
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_16 -> Node_18;
Node_20 -> Node_21;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_31;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
}

