digraph "CFG forkotlin.random.RandomKt.checkRangeBounds(JJ)V" {
subgraph cluster_Region_699509803 {
label = "R(1:(1:(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1073441744 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2065913149 {
label = "IF [B:16:0x0007] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0007|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \> r3) != true) goto L7\l}"];
subgraph cluster_Region_1152053723 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0020|throw new java.lang.IllegalArgumentException(boundsErrorMessage(java.lang.Long.valueOf(r3), java.lang.Long.valueOf(r5)).toString())\l}"];
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0002}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0004}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0009}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000a}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006}"];
MethodNode[shape=record,label="{public static final void kotlin.random.RandomKt.checkRangeBounds((r3v0 'from' long A[D('from' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'until' long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0020 \-\> B:11:?, CROSS_EDGE: B:15:0x0006 \-\> B:16:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_15 -> Node_16;
}

