digraph "CFG forkotlin.random.RandomKt.nextInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/IntRange;)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"range\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r4.isEmpty() != false) goto L14\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011}"];
Node_21 [shape=record,label="{21\:\ 0x0018|if (r4.getLast() \>= Integer.MAX_VALUE) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return r3.nextInt(r4.getFirst(), r4.getLast() + 1)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029}"];
Node_24 [shape=record,label="{24\:\ 0x002f|if (r4.getFirst() \<= Integer.MIN_VALUE) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0031}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return r3.nextInt(r4.getFirst() + (\-1), r4.getLast()) + 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0042}"];
Node_27 [shape=record,label="{27\:\ 0x0046|RETURN\lORIG_RETURN\l|return r3.nextInt()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0047|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot get random in empty range: \")\lr1.append(r4)\l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.RandomKt.nextInt((r3v0 '$this$nextInt' kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'range' kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0031 \-\> B:27:0x0046, CROSS_EDGE: B:26:0x0042 \-\> B:27:0x0046, CROSS_EDGE: B:29:0x005d \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_31;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
}

