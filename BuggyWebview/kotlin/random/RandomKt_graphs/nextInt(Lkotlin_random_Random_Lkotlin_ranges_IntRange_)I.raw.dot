digraph "CFG forkotlin.random.RandomKt.nextInt(Lkotlin\/random\/Random;Lkotlin\/ranges\/IntRange;)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$nextInt' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('range' kotlin.ranges.IntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:346)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0047 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getLast():int A[MD:():int (m)] (LINE:347)\l0x0015: CONST  (r1 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|0x0018: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:23:0x0029 \l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|0x001a: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getFirst():int A[MD:():int (m)]\l0x001e: INVOKE  (r1 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getLast():int A[MD:():int (m)]\l0x0022: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0024: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random)]), (r0 I:int), (r1 I:int) type: VIRTUAL call: kotlin.random.Random.nextInt(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:350)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029|0x0029: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getFirst():int A[MD:():int (m)] (LINE:348)\l0x002d: CONST  (r1 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002f|0x002f: IF  (r0 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:26:0x0042 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0031|0x0031: INVOKE  (r0 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getFirst():int A[MD:():int (m)]\l0x0035: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0037: INVOKE  (r1 I:int) = (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getLast():int A[MD:():int (m)]\l0x003b: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random)]), (r0 I:int), (r1 I:int) type: VIRTUAL call: kotlin.random.Random.nextInt(int, int):int A[MD:(int, int):int (m)]\l0x003f: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:350)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0042|0x0042: INVOKE  (r0 I:int) = (r3 I:kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random)]) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)] (LINE:349)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0046|RETURN\lORIG_RETURN\l|0x0046: RETURN  (r0 I:int)  (LINE:350)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0047|0x0047: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:346)\l0x0049: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004b: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x004e: CONST_STR  (r2 I:java.lang.String) =  \"Cannot get random in empty range: \" \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0053: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('range' kotlin.ranges.IntRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0056: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005a: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x005d|0x005d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.random.RandomKt.nextInt((r3 I:kotlin.random.Random A[D('$this$nextInt' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.ranges.IntRange A[D('range' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0031 \-\> B:27:0x0046, CROSS_EDGE: B:26:0x0042 \-\> B:27:0x0046, CROSS_EDGE: B:29:0x005d \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x005d: r3 '$this$nextInt' Lkotlin\/random\/Random;\l  \-1 \-0x005d: r4 'range' Lkotlin\/ranges\/IntRange;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_31;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
}

