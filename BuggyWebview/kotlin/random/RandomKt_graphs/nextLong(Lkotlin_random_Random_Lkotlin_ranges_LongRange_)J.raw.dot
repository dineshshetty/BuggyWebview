digraph "CFG forkotlin.random.RandomKt.nextLong(Lkotlin\/random\/Random;Lkotlin\/ranges\/LongRange;)J" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$nextLong' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('range' kotlin.ranges.LongRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:boolean) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:362)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x004c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: INVOKE  (r0 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getLast():long A[MD:():long (m)] (LINE:363)\l0x0015: CONST  (r2 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l0x001a: CONST  (r4 I:??[long, double]) = (1 ??[long, double]) \l0x001c: CMP_L  (r6 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x001e|0x001e: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:23:0x002e \l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|0x0020: INVOKE  (r0 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getFirst():long A[MD:():long (m)]\l0x0024: INVOKE  (r2 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getLast():long A[MD:():long (m)]\l0x0028: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0029: INVOKE  (r0 I:long) = (r7 I:kotlin.random.Random A[D('$this$nextLong' kotlin.random.Random)]), (r0 I:long), (r2 I:long) type: VIRTUAL call: kotlin.random.Random.nextLong(long, long):long A[MD:(long, long):long (m)]\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x004b: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:366)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x002e|0x002e: INVOKE  (r0 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getFirst():long A[MD:():long (m)] (LINE:364)\l0x0032: CONST  (r2 I:??[long, double]) = (\-9223372036854775808 ??[long, double]) \l0x0034: CMP_L  (r6 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0036|0x0036: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:26:0x0047 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|0x0038: INVOKE  (r0 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getFirst():long A[MD:():long (m)]\l0x003c: ARITH  (r0 I:long) = (r0 I:long) \- (r4 I:long) \l0x003d: INVOKE  (r2 I:long) = (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: kotlin.ranges.LongRange.getLast():long A[MD:():long (m)]\l0x0041: INVOKE  (r0 I:long) = (r7 I:kotlin.random.Random A[D('$this$nextLong' kotlin.random.Random)]), (r0 I:long), (r2 I:long) type: VIRTUAL call: kotlin.random.Random.nextLong(long, long):long A[MD:(long, long):long (m)]\l0x0045: ARITH  (r0 I:long) = (r0 I:long) + (r4 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x004b: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:366)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0047|0x0047: INVOKE  (r0 I:long) = (r7 I:kotlin.random.Random A[D('$this$nextLong' kotlin.random.Random)]) type: VIRTUAL call: kotlin.random.Random.nextLong():long A[MD:():long (m)] (LINE:365)\l}"];
Node_27 [shape=record,label="{27\:\ 0x004b|RETURN\lORIG_RETURN\l|0x004b: RETURN  (r0 I:long)  (LINE:366)\l}"];
Node_28 [shape=record,label="{28\:\ 0x004c|0x004c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:362)\l0x004e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0053: CONST_STR  (r2 I:java.lang.String) =  \"Cannot get random in empty range: \" \l0x0055: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0058: INVOKE  (r1 I:java.lang.StringBuilder), (r8 I:java.lang.Object A[D('range' kotlin.ranges.LongRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x005b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0062|0x0062: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.random.RandomKt.nextLong((r7 I:kotlin.random.Random A[D('$this$nextLong' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.ranges.LongRange A[D('range' kotlin.ranges.LongRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0038 \-\> B:27:0x004b, CROSS_EDGE: B:26:0x0047 \-\> B:27:0x004b, CROSS_EDGE: B:29:0x0062 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0062: r7 '$this$nextLong' Lkotlin\/random\/Random;\l  \-1 \-0x0062: r8 'range' Lkotlin\/ranges\/LongRange;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_31;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
}

