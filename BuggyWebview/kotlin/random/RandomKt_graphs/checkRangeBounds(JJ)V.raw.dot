digraph "CFG forkotlin.random.RandomKt.checkRangeBounds(JJ)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CMP_L  (r0 I:int) = (r5 I:long A[D('until' long)]), (r3 I:long A[D('from' long)])  (LINE:379)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:15:0x0006 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:384)\l0x000b: INVOKE  (r1 I:java.lang.Long) = (r3 I:long A[D('from' long)]) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)] (LINE:379)\l0x000f: INVOKE  (r2 I:java.lang.Long) = (r5 I:long A[D('until' long)]) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l0x0013: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-RandomKt$checkRangeBounds$2' int)]) = (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.random.RandomKt.boundsErrorMessage(java.lang.Object, java.lang.Object):java.lang.String A[MD:(java.lang.Object, java.lang.Object):java.lang.String (m)]\l0x0017: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0019: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001d: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.random.RandomKt.checkRangeBounds((r3 I:long A[D('from' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0020 \-\> B:11:?, CROSS_EDGE: B:15:0x0006 \-\> B:16:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0017: r0 '$i$a$\-require\-RandomKt$checkRangeBounds$2' I\l  \-1 \-0x0020: r3 'from' J\l  \-1 \-0x0020: r5 'until' J\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

