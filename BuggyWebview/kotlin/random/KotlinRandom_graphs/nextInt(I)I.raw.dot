digraph "CFG forkotlin.random.KotlinRandom.nextInt(I)I" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.random.Random) = (r1 I:kotlin.random.KotlinRandom) kotlin.random.KotlinRandom.impl kotlin.random.Random  (LINE:68)\l0x0002: INVOKE  (r0 I:int) = (r0 I:kotlin.random.Random), (r2 I:int A[D('bound' int)]) type: VIRTUAL call: kotlin.random.Random.nextInt(int):int A[MD:(int):int (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int kotlin.random.KotlinRandom.nextInt((r1 'this' I:kotlin.random.KotlinRandom A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('bound' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0006: r2 'bound' I\lMETHOD_OVERRIDE: [ClspMth\{java.util.Random.nextInt(int):int\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

