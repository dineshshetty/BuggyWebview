digraph "CFG forkotlin.random.KotlinRandom.setSeed(J)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:kotlin.random.KotlinRandom) kotlin.random.KotlinRandom.seedInitialized boolean  (LINE:81)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:83)\l0x0005: IPUT  (r0 I:boolean), (r2 I:kotlin.random.KotlinRandom) kotlin.random.KotlinRandom.seedInitialized boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:87)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException  (LINE:85)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"Setting seed is not supported.\" \l0x000c: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.random.KotlinRandom.setSeed((r2 'this' I:kotlin.random.KotlinRandom A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[D('seed' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r3 'seed' J\lMETHOD_OVERRIDE: [ClspMth\{java.util.Random.setSeed(long):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

