digraph "CFG forkotlin.random.Random.nextDouble(DD)D" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: INVOKE  (r9 I:double A[D('from' double)]), (r11 I:double A[D('until' double)]) type: STATIC call: kotlin.random.RandomKt.checkRangeBounds(double, double):void A[MD:(double, double):void (m)] (LINE:195)\l0x0003: ARITH  (r0 I:double) = (r11 I:double A[D('until' double)]) \- (r9 I:double A[D('from' double)])  (LINE:196)\l0x0005: INVOKE  (r2 I:boolean) = (r0 I:double A[D('size' double)]) type: STATIC call: java.lang.Double.isInfinite(double):boolean A[MD:(double):boolean (c)] (LINE:197)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|0x0009: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x003f \l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|0x000b: INVOKE  (r2 I:boolean) = (r9 I:double A[D('from' double)]) type: STATIC call: java.lang.Double.isInfinite(double):boolean A[MD:(double):boolean (c)]\l0x000f: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001b \l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: INVOKE  (r2 I:boolean) = (r9 I:double A[D('from' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001b \l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|0x0019: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x003f \l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|0x001e: INVOKE  (r2 I:boolean) = (r11 I:double A[D('until' double)]) type: STATIC call: java.lang.Double.isInfinite(double):boolean A[MD:(double):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x002b \l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|0x0024: INVOKE  (r2 I:boolean) = (r11 I:double A[D('until' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x002b \l}"];
Node_43 [shape=record,label="{43\:\ 0x002c|0x002c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x003f \l}"];
Node_44 [shape=record,label="{44\:\ 0x002e|0x002e: INVOKE  (r2 I:double) = (r8 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextDouble():double A[MD:():double (m)] (LINE:198)\l0x0032: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0033: CAST (r4 I:double) = (double) (r4 I:int) \l0x0034: ARITH  (r6 I:double) = (r11 I:double A[D('until' double)]) \/ (r4 I:double) \l0x0036: ARITH  (r4 I:double) = (r9 I:double A[D('from' double)]) \/ (r4 I:double) \l0x0038: ARITH  (r6 I:double) = (r6 I:double) \- (r4 I:double) \l0x0039: ARITH  (r2 I:double) = (r2 I:double) * (r6 I:double) \l0x003b: ARITH  (r4 I:double) = (r9 I:double A[D('from' double)]) + (r2 I:double A[D('r1' double)])  (LINE:199)\l0x003d: ARITH  (r4 I:double) = (r4 I:double) + (r2 I:double A[D('r1' double)]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0047|0x0047: MOVE  (r2 I:??[long, double]) = (r4 I:??[long, double])  (LINE:197)\l0x0048: CMP_L  (r4 I:int) = (r2 I:double A[D('r' double)]), (r11 I:double A[D('until' double)])  (LINE:203)\l}"];
Node_47 [shape=record,label="{47\:\ 0x004a|0x004a: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:49:0x0053 \l}"];
Node_48 [shape=record,label="{48\:\ 0x004c|0x004c: CONST  (r4 I:??[long, double]) = (\-4503599627370496(0xfff0000000000000, double:\-Infinity) ??[long, double]) \l0x004e: INVOKE  (r4 I:double) = (r11 I:double A[D('until' double)]), (r4 I:double) type: STATIC call: java.lang.Math.nextAfter(double, double):double A[MD:(double, double):double (c)]\l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|0x0054: RETURN  (r4 I:double) A[SYNTHETIC]\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0053|0x0053: MOVE  (r4 I:??[long, double]) = (r2 I:??[long, double] A[D('r' double)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0054|RETURN\lORIG_RETURN\l|0x0054: RETURN  (r4 I:double) \l}"];
Node_42 [shape=record,label="{42\:\ 0x002b|0x002b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x003f|0x003f: INVOKE  (r2 I:double) = (r8 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextDouble():double A[MD:():double (m)] (LINE:201)\l0x0043: ARITH  (r2 I:double) = (r2 I:double) * (r0 I:double A[D('size' double)]) \l0x0045: ARITH  (r4 I:double) = (r9 I:double A[D('from' double)]) + (r2 I:double) \l}"];
MethodNode[shape=record,label="{public double kotlin.random.Random.nextDouble((r8 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r9 I:double A[D('from' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double A[D('until' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:49:0x0053 \-\> B:50:0x0054, CROSS_EDGE: B:45:0x003f \-\> B:46:0x0047, CROSS_EDGE: B:40:0x0028 \-\> B:43:0x002c, CROSS_EDGE: B:38:0x0022 \-\> B:42:0x002b, CROSS_EDGE: B:36:0x001c \-\> B:45:0x003f, CROSS_EDGE: B:35:0x001b \-\> B:36:0x001c, CROSS_EDGE: B:31:0x0011 \-\> B:35:0x001b, CROSS_EDGE: B:29:0x0009 \-\> B:45:0x003f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003b\-0x003e: r2 'r1' D\l  0x0005\-0x0054: r0 'size' D\l  0x0048\-0x0054: r2 'r' D\l  \-1 \-0x0054: r9 'from' D\l  \-1 \-0x0054: r11 'until' D\lMETHOD_OVERRIDE: [kotlin.random.Random.nextDouble(double, double):double]\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_45;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_51;
Node_51 -> Node_27;
Node_49 -> Node_50;
Node_50 -> Node_27;
Node_42 -> Node_43;
Node_35 -> Node_36;
Node_45 -> Node_46;
}

