digraph "CFG forkotlin.random.Random.nextBytes([B)[B" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('array' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r3 I:??[] A[D('array' byte[])])  (LINE:253)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:byte[]) = (r2 I:kotlin.random.Random), (r3 I:byte[] A[D('array' byte[])]), (r1 I:int), (r0 I:int) type: VIRTUAL call: kotlin.random.Random.nextBytes(byte[], int, int):byte[] A[MD:(byte[], int, int):byte[] (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:byte[]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public byte[] kotlin.random.Random.nextBytes((r2 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r3 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r3 'array' [B\lMETHOD_OVERRIDE: [kotlin.random.Random.nextBytes(byte[]):byte[]]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

