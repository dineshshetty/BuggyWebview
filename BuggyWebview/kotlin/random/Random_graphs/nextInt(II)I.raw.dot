digraph "CFG forkotlin.random.Random.nextInt(II)I" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: INVOKE  (r7 I:int A[D('from' int)]), (r8 I:int A[D('until' int)]) type: STATIC call: kotlin.random.RandomKt.checkRangeBounds(int, int):void A[MD:(int, int):void (m)] (LINE:65)\l0x0003: ARITH  (r0 I:int) = (r8 I:int A[D('until' int)]) \- (r7 I:int A[D('from' int)])  (LINE:66)\l0x0005: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:67)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \> (0 ??[int, byte, short, char])  \-\> B:40:0x001b \l}"];
Node_31 [shape=record,label="{31\:\ 0x0008|0x0008: CONST  (r2 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x000d \l}"];
Node_34 [shape=record,label="{34\:\ 0x000d|LOOP_START\lLOOP:0: B:34:0x000d\-\>B:38:0x0018\l|0x000e: INVOKE  (r2 I:int) = (r6 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)] (LINE:82)\l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:83)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0013|0x0013: IF  (r7 I:??[int, byte, short, char] A[D('from' int)]) \> (r2 I:??[int, byte, short, char] A[D('rnd' int)])  \-\> B:51:0x0018 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0015|0x0015: IF  (r2 I:??[int, byte, short, char] A[D('rnd' int)]) \>= (r8 I:??[int, byte, short, char] A[D('until' int)])  \-\> B:52:0x0018 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0017|0x0017: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0018|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|LOOP_END\lLOOP:0: B:34:0x000d\-\>B:38:0x0018\l|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x000d \l}"];
Node_49 [shape=record,label="{49\:\ 0x001a|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x001a|RETURN\l|0x001a: RETURN  (r2 I:int A[D('rnd' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ 0x0018|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0018|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x001b|0x001b: NEG  (r2 I:int A[D('rnd' int)]) = (r0 I:int A[D('n' int)])  (LINE:68)\l0x001c: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) & (r0 I:??[int, boolean, short, byte, char] A[D('n' int)]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)])  \-\> B:43:0x0028 \l}"];
Node_42 [shape=record,label="{42\:\ 0x001f|0x001f: INVOKE  (r1 I:int) = (r0 I:int A[D('n' int)]) type: STATIC call: kotlin.random.RandomKt.fastLog2(int):int A[MD:(int):int (m)] (LINE:69)\l0x0023: INVOKE  (r1 I:int A[D('bitCount' int)]) = (r6 I:kotlin.random.Random), (r1 I:int A[D('bitCount' int)]) type: VIRTUAL call: kotlin.random.Random.nextBits(int):int A[MD:(int):int (m)] (LINE:70)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0038|0x0039: ARITH  (r2 I:int) = (r7 I:int A[D('from' int)]) + (r1 I:int A[D('rnd' int)])  (LINE:79)\l}"];
Node_48 [shape=record,label="{48\:\ 0x003b|RETURN\l|0x003b: RETURN  (r2 I:int) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0028|0x0028: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0029|LOOP_START\lLOOP:1: B:44:0x0029\-\>B:45:0x0035\l|0x0029: INVOKE  (r3 I:int) = (r6 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)] (LINE:74)\l0x002d: ARITH  (r3 I:int) = (r3 I:int) \>\>\> (r1 I:int) \l0x002e: ARITH  (r2 I:int A[D('v' int)]) = (r3 I:int A[D('bits' int)]) % (r0 I:int A[D('n' int)])  (LINE:75)\l0x0030: ARITH  (r4 I:int) = (r3 I:int A[D('bits' int)]) \- (r2 I:int A[D('v' int)])  (LINE:76)\l0x0032: ARITH  (r5 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int) \l0x0034: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0035|LOOP_END\lLOOP:1: B:44:0x0029\-\>B:45:0x0035\l|0x0035: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:44:0x0029 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0037|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0037|0x0037: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v' int)])  (LINE:77)\l}"];
MethodNode[shape=record,label="{public int kotlin.random.Random.nextInt((r6 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('until' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x0018 \-\> B:34:0x000d, CROSS_EDGE: B:36:0x0015 \-\> B:38:0x0018, CROSS_EDGE: B:35:0x0013 \-\> B:38:0x0018, CROSS_EDGE: B:48:0x003b \-\> B:28:?, BACK_EDGE: B:45:0x0035 \-\> B:44:0x0029, CROSS_EDGE: B:46:0x0037 \-\> B:47:0x0038, CROSS_EDGE: B:30:0x0006 \-\> B:40:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x001b: r2 'rnd' I\l  0x0023\-0x0027: r1 'bitCount' I\l  0x002e\-0x0037: r3 'bits' I\l  0x0029\-0x0038: r2 'v' I\l  0x0005\-0x003b: r0 'n' I\l  0x0039\-0x003b: r1 'rnd' I\l  \-1 \-0x003b: r7 'from' I\l  \-1 \-0x003b: r8 'until' I\lMETHOD_OVERRIDE: [kotlin.random.Random.nextInt(int, int):int]\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_40;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_40[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_51;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_52;
Node_37 -> Node_50;
Node_50 -> Node_38;
Node_38 -> Node_34;
Node_38 -> Node_49[style=dashed];
Node_49 -> Node_39;
Node_39 -> Node_28;
Node_52 -> Node_38;
Node_51 -> Node_38;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_28;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_44;
Node_45 -> Node_53[style=dashed];
Node_53 -> Node_46;
Node_46 -> Node_47;
}

