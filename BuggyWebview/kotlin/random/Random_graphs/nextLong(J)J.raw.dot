digraph "CFG forkotlin.random.Random.nextLong(J)J" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:108)\l0x0002: INVOKE  (r0 I:long) = (r2 I:kotlin.random.Random), (r0 I:long), (r3 I:long A[D('until' long)]) type: VIRTUAL call: kotlin.random.Random.nextLong(long, long):long A[MD:(long, long):long (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public long kotlin.random.Random.nextLong((r2 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0006: r3 'until' J\lMETHOD_OVERRIDE: [kotlin.random.Random.nextLong(long):long]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

