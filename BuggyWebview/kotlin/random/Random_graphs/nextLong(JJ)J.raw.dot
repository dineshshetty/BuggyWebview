digraph "CFG forkotlin.random.Random.nextLong(JJ)J" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:120)\l0x0002: INVOKE  (r17 I:long A[D('from' long)]), (r19 I:long A[D('until' long)]) type: STATIC call: kotlin.random.RandomKt.checkRangeBounds(long, long):void A[MD:(long, long):void (m)]\l0x0005: ARITH  (r1 I:long) = (r19 I:long A[D('until' long)]) \- (r17 I:long A[D('from' long)])  (LINE:121)\l0x0007: CONST  (r3 I:??[long, double]) = (0 ??[long, double])  (LINE:122)\l0x0009: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000a: CMP_L  (r6 I:int) = (r1 I:long A[D('n' long)]), (r3 I:long) \l}"];
Node_34 [shape=record,label="{34\:\ 0x000c|0x000c: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x0065 \l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|0x000e: CONST  (r6 I:??[long, double]) = (0 ??[long, double]) \l0x0010: NEG  (r8 I:long) = (r1 I:long A[D('n' long)])  (LINE:124)\l0x0011: ARITH  (r8 I:long) = (r8 I:long) & (r1 I:long A[D('n' long)]) \l0x0012: CMP_L  (r10 I:int) = (r8 I:long), (r1 I:long A[D('n' long)]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0014|0x0014: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x004d \l}"];
Node_37 [shape=record,label="{37\:\ 0x0016|0x0016: CAST (r3 I:int) = (int) (r1 I:long A[D('n' long)])  (LINE:125)\l0x0017: CONST  (r4 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char])  (LINE:126)\l0x0019: ARITH  (r8 I:long) = (r1 I:long A[D('n' long)]) \>\>\> (r4 I:long) \l0x001b: CAST (r9 I:int) = (int) (r8 I:long) \l0x001d: CONST  (r10 I:??[long, double]) = (4294967295(0xffffffff, double:2.1219957905E\-314) ??[long, double])  (LINE:128)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0022|0x0022: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nLow' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0030 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|0x0024: INVOKE  (r4 I:int) = (r3 I:int A[D('nLow' int)]) type: STATIC call: kotlin.random.RandomKt.fastLog2(int):int A[MD:(int):int (m)] (LINE:129)\l0x0028: INVOKE  (r5 I:int) = (r0 I:kotlin.random.Random), (r4 I:int A[D('bitCount' int)]) type: VIRTUAL call: kotlin.random.Random.nextBits(int):int A[MD:(int):int (m)] (LINE:131)\l0x002c: CAST (r12 I:long) = (long) (r5 I:int) \l0x002d: ARITH  (r4 I:long A[D('bitCount' int)]) = (r12 I:long) & (r10 I:long) \l}"];
Node_43 [shape=record,label="{43\:\ 0x004b|0x004b: MOVE  (r3 I:??[long, double] A[D('nLow' int)]) = (r4 I:??[long, double])  (LINE:127)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0062|0x0062: ARITH  (r5 I:long) = (r17 I:long A[D('from' long)]) + (r3 I:long A[D('rnd' long)])  (LINE:149)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0064|RETURN\l|0x0064: RETURN  (r5 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0030|0x0030: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nHigh' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0039  (LINE:133)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0032|0x0032: INVOKE  (r4 I:int) = (r16 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)] (LINE:135)\l0x0036: CAST (r4 I:long) = (long) (r4 I:int) \l0x0037: ARITH  (r4 I:long) = (r4 I:long) & (r10 I:long) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0039|0x0039: INVOKE  (r5 I:int) = (r9 I:int A[D('nHigh' int)]) type: STATIC call: kotlin.random.RandomKt.fastLog2(int):int A[MD:(int):int (m)] (LINE:137)\l0x003d: INVOKE  (r8 I:int) = (r0 I:kotlin.random.Random), (r5 I:int A[D('bitCount' int)]) type: VIRTUAL call: kotlin.random.Random.nextBits(int):int A[MD:(int):int (m)] (LINE:138)\l0x0041: CAST (r12 I:long) = (long) (r8 I:int) \l0x0042: ARITH  (r12 I:long) = (r12 I:long) \<\< (r4 I:long) \l0x0043: INVOKE  (r4 I:int) = (r16 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)]\l0x0047: CAST (r14 I:long) = (long) (r4 I:int) \l0x0048: ARITH  (r10 I:long) = (r10 I:long) & (r14 I:long) \l0x0049: ARITH  (r10 I:long) = (r10 I:long) + (r12 I:long) \l0x004a: MOVE  (r4 I:??[long, double]) = (r10 I:??[long, double]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x004d|0x004d: CONST  (r8 I:??[long, double]) = (0 ??[long, double]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x004f|LOOP_START\lLOOP:0: B:45:0x004f\-\>B:46:0x005f\l|0x004f: INVOKE  (r10 I:long) = (r16 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextLong():long A[MD:():long (m)] (LINE:144)\l0x0053: ARITH  (r10 I:long) = (r10 I:long) \>\>\> (r5 I:long) \l0x0054: ARITH  (r8 I:long A[D('v' long)]) = (r10 I:long A[D('bits' long)]) % (r1 I:long A[D('n' long)])  (LINE:145)\l0x0056: ARITH  (r12 I:long) = (r10 I:long A[D('bits' long)]) \- (r8 I:long A[D('v' long)])  (LINE:146)\l0x0058: CONST  (r14 I:??[long, double]) = (1 ??[long, double]) \l0x005a: ARITH  (r14 I:long) = (r1 I:long A[D('n' long)]) \- (r14 I:long) \l0x005c: ARITH  (r12 I:long) = (r12 I:long) + (r14 I:long) \l0x005d: CMP_L  (r14 I:int) = (r12 I:long), (r3 I:long) \l}"];
Node_46 [shape=record,label="{46\:\ 0x005f|LOOP_END\lLOOP:0: B:45:0x004f\-\>B:46:0x005f\l|0x005f: IF  (r14 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:45:0x004f \l}"];
Node_57 [shape=record,label="{57\:\ 0x0061|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0061|0x0061: MOVE  (r3 I:??[long, double]) = (r8 I:??[long, double] A[D('v' long)])  (LINE:147)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0065|LOOP_START\lLOOP:1: B:50:0x0065\-\>B:55:0x0074\l|0x0066: INVOKE  (r3 I:long) = (r16 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextLong():long A[MD:():long (m)] (LINE:152)\l0x006a: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:153)\l0x006b: CMP_L  (r7 I:int) = (r17 I:long A[D('from' long)]), (r3 I:long A[D('rnd' long)]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x006d|0x006d: IF  (r7 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:60:0x0074 \l}"];
Node_52 [shape=record,label="{52\:\ 0x006f|0x006f: CMP_L  (r7 I:int) = (r3 I:long A[D('rnd' long)]), (r19 I:long A[D('until' long)]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0071|0x0071: IF  (r7 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:61:0x0074 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0073|0x0073: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x0074|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0074|LOOP_END\lLOOP:1: B:50:0x0065\-\>B:55:0x0074\l|0x0074: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0065 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0076|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0076|RETURN\l|0x0076: RETURN  (r3 I:long A[D('rnd' long)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0074|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0074|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public long kotlin.random.Random.nextLong((r16 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r17 I:long A[D('from' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:long A[D('until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x0032 \-\> B:43:0x004b, CROSS_EDGE: B:42:0x0039 \-\> B:43:0x004b, BACK_EDGE: B:46:0x005f \-\> B:45:0x004f, CROSS_EDGE: B:47:0x0061 \-\> B:48:0x0062, BACK_EDGE: B:55:0x0074 \-\> B:50:0x0065, CROSS_EDGE: B:56:0x0076 \-\> B:32:?, CROSS_EDGE: B:53:0x0071 \-\> B:55:0x0074, CROSS_EDGE: B:51:0x006d \-\> B:55:0x0074\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x002f: r4 'bitCount' I\l  0x003d\-0x004b: r5 'bitCount' I\l  0x0010\-0x004c: r6 'rnd' J\l  0x001c\-0x004c: r9 'nHigh' I\l  0x0017\-0x004c: r3 'nLow' I\l  0x004c\-0x004d: r3 'rnd' J\l  0x0054\-0x0061: r10 'bits' J\l  0x004d\-0x0062: r6 'rnd' J\l  0x004f\-0x0062: r8 'v' J\l  0x0062\-0x0065: r3 'rnd' J\l  0x0007\-0x0076: r1 'n' J\l  0x006a\-0x0076: r3 'rnd' J\l  \-1 \-0x0076: r17 'from' J\l  \-1 \-0x0076: r19 'until' J\lMETHOD_OVERRIDE: [kotlin.random.Random.nextLong(long, long):long]\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_50;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_44;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_43;
Node_43 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_32;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_43;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_45;
Node_46 -> Node_57[style=dashed];
Node_57 -> Node_47;
Node_47 -> Node_48;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_60;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_61;
Node_54 -> Node_59;
Node_59 -> Node_55;
Node_55 -> Node_50;
Node_55 -> Node_58[style=dashed];
Node_58 -> Node_56;
Node_56 -> Node_32;
Node_61 -> Node_55;
Node_60 -> Node_55;
}

