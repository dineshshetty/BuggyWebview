digraph "CFG forkotlin.random.Random.nextDouble(DD)D" {
subgraph cluster_Region_2086325478 {
label = "R(5:1|(2:3|(1:(3:14|15|16)))|24|15|(0)(0)) | DECL_VAR: double null\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.random.RandomKt.checkRangeBounds(r9, r11)\ldouble double r0 = r11 \- r9\l}"];
subgraph cluster_IfRegion_631743149 {
label = "IF [B:29:0x0009] THEN: R(2:3|(1:(3:14|15|16))) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0009|if (java.lang.Double.isInfinite(r0) != false) goto L3\l}"];
subgraph cluster_Region_2044224382 {
label = "R(2:3|(1:(3:14|15|16)))";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x000b|boolean r3 = true\l}"];
subgraph cluster_IfRegion_1114305142 {
label = "IF [B:36:0x001c] THEN: R(1:(3:14|15|16)) ELSE: null";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x001c|PHI: r2 \l  PHI: (r2v6 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (((java.lang.Double.isInfinite(r9) \|\| java.lang.Double.isNaN(r9)) ? false : true) != false) goto L9\l}"];
subgraph cluster_Region_155062599 {
label = "R(1:(3:14|15|16))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_617070955 {
label = "IF [B:43:0x002c] THEN: R(3:14|15|16) ELSE: null";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x002c|PHI: r3 \l  PHI: (r3v2 boolean A[REMOVE]) = (r3v0 boolean) binds: [B:40:0x0028] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if (((java.lang.Double.isInfinite(r11) \|\| java.lang.Double.isNaN(r11)) ? false : false) != false) goto L14\l}"];
subgraph cluster_Region_113223982 {
label = "R(3:14|15|16)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x002e|double double r4 = 2\ldouble double r2 = nextDouble() * ((r11 \/ r4) \- (r9 \/ r4))\ldouble r4 = r9 + r2 + r2\l}"];
Node_46 [shape=record,label="{46\:\ 0x0047|PHI: r4 \l  PHI: (r4v1 double) = (r4v0 double), (r4v11 double) binds: [B:45:0x003f, B:44:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|double r2 = r4\l}"];
Node_47 [shape=record,label="{47\:\ 0x004a|RETURN\l|return r2 \< r11 ? java.lang.Math.nextAfter(r11, Double.NEGATIVE_INFINITY) : r2\l}"];
}
}
}
}
}
}
Node_45 [shape=record,label="{45\:\ 0x003f|double r4 = r9 + (nextDouble() * r0)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0047|PHI: r4 \l  PHI: (r4v1 double) = (r4v0 double), (r4v11 double) binds: [B:45:0x003f, B:44:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|double r2 = r4\l}"];
subgraph cluster_IfRegion_1406117917 {
label = "IF [B:47:0x004a] THEN: R(0) ELSE: R(0)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x004a|RETURN\l|return r2 \< r11 ? java.lang.Math.nextAfter(r11, Double.NEGATIVE_INFINITY) : r2\l}"];
subgraph cluster_Region_2006046001 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_1660776695 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0011}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0013}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0017|REMOVE\lADDED_TO_REGION\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0019}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x001e}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0022}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0024}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0028|REMOVE\lADDED_TO_REGION\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x004c}"];
Node_51 [shape=record,color=red,label="{51\:\ ?|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0053}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x0054|ORIG_RETURN\l}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x002b}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x001b}"];
MethodNode[shape=record,label="{public double kotlin.random.Random.nextDouble((r8v0 'this' kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r9v0 'from' double A[D('from' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'until' double A[D('until' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:49:0x0053 \-\> B:50:0x0054, CROSS_EDGE: B:45:0x003f \-\> B:46:0x0047, CROSS_EDGE: B:40:0x0028 \-\> B:43:0x002c, CROSS_EDGE: B:38:0x0022 \-\> B:42:0x002b, CROSS_EDGE: B:36:0x001c \-\> B:45:0x003f, CROSS_EDGE: B:35:0x001b \-\> B:36:0x001c, CROSS_EDGE: B:31:0x0011 \-\> B:35:0x001b, CROSS_EDGE: B:29:0x0009 \-\> B:45:0x003f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Removed duplicated region for block: B:49:0x0053 \l \-\> Removed duplicated region for block: B:48:0x004c \}\lMETHOD_OVERRIDE: [kotlin.random.Random.nextDouble(double, double):double]\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_45[style=dashed];
Node_30 -> Node_31;
Node_36 -> Node_37;
Node_36 -> Node_45[style=dashed];
Node_43 -> Node_44;
Node_43 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_47 -> Node_49;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_47 -> Node_49;
Node_26 -> Node_28;
Node_31 -> Node_32;
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43;
Node_48 -> Node_51;
Node_51 -> Node_27;
Node_49 -> Node_50;
Node_50 -> Node_27;
Node_42 -> Node_43;
Node_35 -> Node_36;
}

