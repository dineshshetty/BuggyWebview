digraph "CFG forkotlin.random.Random.nextDouble(DD)D" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.random.RandomKt.checkRangeBounds(r9, r11)\ldouble r0 = r11 \- r9\l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|if (java.lang.Double.isInfinite(r0) == false) goto L24\l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|r3 = true\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|if (java.lang.Double.isInfinite(r9) != false) goto L23\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013}"];
Node_33 [shape=record,label="{33\:\ 0x0017|if (java.lang.Double.isNaN(r9) != false) goto L23\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|r2 = true\l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|PHI: r2 \l  PHI: (r2v6 boolean) = (r2v5 boolean), (r2v12 boolean) binds: [B:35:0x001b, B:34:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L24\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e}"];
Node_38 [shape=record,label="{38\:\ 0x0022|if (java.lang.Double.isInfinite(r11) != false) goto L22\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024}"];
Node_40 [shape=record,label="{40\:\ 0x0028|if (java.lang.Double.isNaN(r11) != false) goto L22\l}"];
Node_43 [shape=record,label="{43\:\ 0x002c|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v0 boolean) binds: [B:42:0x002b, B:40:0x0028] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L24\l}"];
Node_44 [shape=record,label="{44\:\ 0x002e|double r4 = (double) 2\ldouble r2 = nextDouble() * ((r11 \/ r4) \- (r9 \/ r4))\ldouble r4 = (r9 + r2) + r2\l}"];
Node_46 [shape=record,label="{46\:\ 0x0047|PHI: r4 \l  PHI: (r4v1 double) = (r4v0 double), (r4v11 double) binds: [B:45:0x003f, B:44:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r4\l}"];
Node_47 [shape=record,label="{47\:\ 0x004a|if ((r2 \> r11 ? 1 : (r2 == r11 ? 0 : \-1)) \< 0) goto L20\l}"];
Node_48 [shape=record,label="{48\:\ 0x004c}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.nextAfter(r11, Double.NEGATIVE_INFINITY)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0053}"];
Node_50 [shape=record,label="{50\:\ 0x0054|RETURN\lORIG_RETURN\l|return r2\l}"];
Node_42 [shape=record,label="{42\:\ 0x002b|r3 = false\l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|r2 = false\l}"];
Node_45 [shape=record,label="{45\:\ 0x003f|double r4 = r9 + (nextDouble() * r0)\l}"];
MethodNode[shape=record,label="{public double kotlin.random.Random.nextDouble((r8v0 'this' kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r9v0 'from' double A[D('from' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'until' double A[D('until' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:49:0x0053 \-\> B:50:0x0054, CROSS_EDGE: B:45:0x003f \-\> B:46:0x0047, CROSS_EDGE: B:40:0x0028 \-\> B:43:0x002c, CROSS_EDGE: B:38:0x0022 \-\> B:42:0x002b, CROSS_EDGE: B:36:0x001c \-\> B:45:0x003f, CROSS_EDGE: B:35:0x001b \-\> B:36:0x001c, CROSS_EDGE: B:31:0x0011 \-\> B:35:0x001b, CROSS_EDGE: B:29:0x0009 \-\> B:45:0x003f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.random.Random.nextDouble(double, double):double]\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_45;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_51;
Node_51 -> Node_27;
Node_49 -> Node_50;
Node_50 -> Node_27;
Node_42 -> Node_43;
Node_35 -> Node_36;
Node_45 -> Node_46;
}

