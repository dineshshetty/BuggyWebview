digraph "CFG forkotlin.random.Random.nextBytes([BII)[B" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('array' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:222)\l0x0007: ARRAY_LENGTH  (r1 I:int) = (r9 I:??[] A[D('array' byte[])]) \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:kotlin.ranges.IntRange), (r2 I:int), (r1 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x000c: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r10 I:int A[D('fromIndex' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l0x0010: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0021 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0015: ARRAY_LENGTH  (r3 I:int) = (r9 I:??[] A[D('array' byte[])]) \l0x0016: INVOKE  (r0 I:kotlin.ranges.IntRange), (r2 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0019: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r11 I:int A[D('toIndex' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0021 \l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: CONST_STR  (r3 I:java.lang.String) =  \"fromIndex (\" \l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|0x0024: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0098 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|0x0026: IF  (r10 I:??[int, byte, short, char] A[D('fromIndex' int)]) \> (r11 I:??[int, byte, short, char] A[D('toIndex' int)])  \-\> B:39:0x0029  (LINE:223)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x002a|0x002a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0071 \l}"];
Node_41 [shape=record,label="{41\:\ 0x002c|0x002c: ARITH  (r0 I:int) = (r11 I:int A[D('toIndex' int)]) \- (r10 I:int A[D('fromIndex' int)])  (LINE:225)\l0x002e: ARITH  (r0 I:int) = (r0 I:int) \/ (4 int) \l0x0030: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:227)\l0x0031: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('position' int)]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fromIndex' int)]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0033|LOOP_START\lLOOP:0: B:42:0x0033\-\>B:43:0x0035\l|0x0033: IF  (r2 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char] A[D('steps' int)])  \-\> B:52:0x0059 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0035|LOOP_END\lLOOP:0: B:42:0x0033\-\>B:43:0x0035\l|0x0035: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0036: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0037: INVOKE  (r5 I:int) = (r8 I:kotlin.random.Random) type: VIRTUAL call: kotlin.random.Random.nextInt():int A[MD:():int (m)] (LINE:229)\l0x003b: CAST (r6 I:byte) = (byte) (r5 I:int A[D('v' int)])  (LINE:230)\l0x003c: APUT  \l  (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE])\l  (r1 I:??[int, short, byte, char] A[D('position' int)])\l  (r6 I:byte A[IMMUTABLE_TYPE])\l \l0x003e: ARITH  (r6 I:int) = (r1 I:int A[D('position' int)]) + (1 int)  (LINE:231)\l0x0040: ARITH  (r7 I:int) = (r5 I:int A[D('v' int)]) \>\>\> (8 int) \l0x0042: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0043: APUT  (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE]), (r6 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0045: ARITH  (r6 I:int) = (r1 I:int A[D('position' int)]) + (2 int)  (LINE:232)\l0x0047: ARITH  (r7 I:int) = (r5 I:int A[D('v' int)]) \>\>\> (16 int) \l0x0049: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x004a: APUT  (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE]), (r6 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x004c: ARITH  (r6 I:int) = (r1 I:int A[D('position' int)]) + (3 int)  (LINE:233)\l0x004e: ARITH  (r7 I:int) = (r5 I:int A[D('v' int)]) \>\>\> (24 int) \l0x0050: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0051: APUT  (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE]), (r6 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0053: ARITH  (r1 I:int) = (r1 I:int A[D('position' int)]) + (4 int)  (LINE:234)\l0x0056: ARITH  (r2 I:int) = (r2 I:int) + (1 int)  (LINE:228)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0059|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0059|0x0059: ARITH  (r2 I:int) = (r11 I:int A[D('toIndex' int)]) \- (r1 I:int A[D('position' int)])  (LINE:237)\l0x005b: ARITH  (r3 I:int) = (r2 I:int A[D('remainder' int)]) * (8 int)  (LINE:238)\l0x005d: INVOKE  (r3 I:int) = (r8 I:kotlin.random.Random), (r3 I:int) type: VIRTUAL call: kotlin.random.Random.nextBits(int):int A[MD:(int):int (m)]\l0x0061: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:239)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0062|LOOP_START\lLOOP:1: B:45:0x0062\-\>B:46:0x0064\l|0x0062: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('remainder' int)])  \-\> B:53:0x0070 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0064|LOOP_END\lLOOP:1: B:45:0x0062\-\>B:46:0x0064\l|0x0064: ARITH  (r5 I:int) = (r1 I:int A[D('position' int)]) + (r4 I:int A[D('i' int)])  (LINE:240)\l0x0066: ARITH  (r6 I:int) = (r4 I:int A[D('i' int)]) * (8 int) \l0x0068: ARITH  (r6 I:int) = (r3 I:int A[D('vr' int)]) \>\>\> (r6 I:int) \l0x006a: CAST (r6 I:byte) = (byte) (r6 I:int) \l0x006b: APUT  (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE]), (r5 I:??[int, short, byte, char]), (r6 I:byte A[IMMUTABLE_TYPE]) \l0x006d: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:239)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0070|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0070|RETURN\l|0x0070: RETURN  (r9 I:byte[] A[D('array' byte[])])  (LINE:243)\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0071|0x0071: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('steps' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:384)\l0x0072: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:223)\l0x0074: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0077: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x007a: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:int A[D('fromIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x007d: CONST_STR  (r2 I:java.lang.String) =  \") must be not greater than toIndex (\" \l0x007f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0082: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:int A[D('toIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0085: CONST_STR  (r2 I:java.lang.String) =  \").\" \l0x0087: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x008a: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-Random$nextBytes$2' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x008e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0090: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0094: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0097|0x0097: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0098|0x0098: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:384)\l0x0099: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:222)\l0x009b: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x009e: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00a1: INVOKE  (r1 I:java.lang.StringBuilder), (r10 I:int A[D('fromIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00a4: CONST_STR  (r2 I:java.lang.String) =  \") or toIndex (\" \l0x00a6: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00a9: INVOKE  (r1 I:java.lang.StringBuilder), (r11 I:int A[D('toIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00ac: CONST_STR  (r2 I:java.lang.String) =  \") are out of range: 0..\" \l0x00ae: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00b1: ARRAY_LENGTH  (r2 I:int) = (r9 I:??[] A[D('array' byte[])]) \l0x00b2: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00b5: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x00b7: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x00ba: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-Random$nextBytes$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00be: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00c0: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00c4: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x00c7|0x00c7: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public byte[] kotlin.random.Random.nextBytes((r8 'this' I:kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r9 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:43:0x0035 \-\> B:42:0x0033, BACK_EDGE: B:46:0x0064 \-\> B:45:0x0062, CROSS_EDGE: B:49:0x0097 \-\> B:28:?, CROSS_EDGE: B:37:0x0026 \-\> B:40:0x002a, CROSS_EDGE: B:51:0x00c7 \-\> B:28:?, CROSS_EDGE: B:34:0x0021 \-\> B:35:0x0022, CROSS_EDGE: B:30:0x0011 \-\> B:34:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0036\-0x0056: r3 'it' I\l  0x0037\-0x0056: r4 '$i$a$\-repeat\-Random$nextBytes$3' I\l  0x003b\-0x0056: r5 'v' I\l  0x0062\-0x0070: r4 'i' I\l  0x0030\-0x0071: r0 'steps' I\l  0x0031\-0x0071: r1 'position' I\l  0x005b\-0x0071: r2 'remainder' I\l  0x0061\-0x0071: r3 'vr' I\l  0x0072\-0x008e: r0 '$i$a$\-require\-Random$nextBytes$2' I\l  0x0099\-0x00be: r0 '$i$a$\-require\-Random$nextBytes$1' I\l  \-1 \-0x00c7: r9 'array' [B\l  \-1 \-0x00c7: r10 'fromIndex' I\l  \-1 \-0x00c7: r11 'toIndex' I\lMETHOD_OVERRIDE: [kotlin.random.Random.nextBytes(byte[], int, int):byte[]]\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_50;
Node_37 -> Node_39;
Node_37 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_48;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_52;
Node_43 -> Node_42;
Node_52 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_53;
Node_46 -> Node_45;
Node_53 -> Node_47;
Node_47 -> Node_28;
Node_48 -> Node_49;
Node_49 -> Node_28;
Node_50 -> Node_51;
Node_51 -> Node_28;
Node_34 -> Node_35;
}

