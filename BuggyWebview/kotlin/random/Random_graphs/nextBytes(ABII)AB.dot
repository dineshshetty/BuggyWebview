digraph "CFG forkotlin.random.Random.nextBytes([BII)[B" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"array\")\lr2 = 0\lr1 = true\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|if (new kotlin.ranges.IntRange(0, r9.length).contains(r10) == false) goto L25\l}"];
Node_31 [shape=record,label="{31\:\ 0x0013}"];
Node_32 [shape=record,label="{32\:\ 0x001d|if (new kotlin.ranges.IntRange(0, r9.length).contains(r11) == false) goto L25\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|r0 = true\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v15 boolean) binds: [B:34:0x0021, B:33:0x001f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|if (r0 == false) goto L23\l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|if (r10 \> r11) goto L9\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|r1 = false\l}"];
Node_40 [shape=record,label="{40\:\ 0x002a|PHI: r1 \l  PHI: (r1v4 boolean) = (r1v1 boolean), (r1v11 boolean) binds: [B:37:0x0026, B:39:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L21\l}"];
Node_41 [shape=record,label="{41\:\ 0x002c|int r0 = (r11 \- r10) \/ 4\lr1 = r10\l}"];
Node_42 [shape=record,label="{42\:\ 0x0033|LOOP_START\lLOOP:0: B:42:0x0033\-\>B:43:0x0035\lPHI: r1 r2 \l  PHI: (r1v9 'position' int) = (r1v8 'position' int), (r1v10 'position' int) binds: [B:41:0x002c, B:43:0x0035] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v7 int) = (r2v0 int), (r2v9 int) binds: [B:41:0x002c, B:43:0x0035] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r0) goto L14\l}"];
Node_43 [shape=record,label="{43\:\ 0x0035|LOOP_END\lLOOP:0: B:42:0x0033\-\>B:43:0x0035\l|int r5 = nextInt()\lr9[r1] = (byte) r5\lr9[r1 + 1] = (byte) (r5 \>\>\> 8)\lr9[r1 + 2] = (byte) (r5 \>\>\> 16)\lr9[r1 + 3] = (byte) (r5 \>\>\> 24)\lint r1 = r1 + 4\lint r2 = r2 + 1\l}"];
Node_52 [shape=record,label="{52\:\ 0x0059|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0059|int r2 = r11 \- r1\lint r3 = nextBits(r2 * 8)\lr4 = 0\l}"];
Node_45 [shape=record,label="{45\:\ 0x0062|LOOP_START\lLOOP:1: B:45:0x0062\-\>B:46:0x0064\lPHI: r4 \l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v2 'i' int) binds: [B:44:0x0059, B:46:0x0064] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r2) goto L18\l}"];
Node_46 [shape=record,label="{46\:\ 0x0064|LOOP_END\lLOOP:1: B:45:0x0062\-\>B:46:0x0064\l|r9[r1 + r4] = (byte) (r3 \>\>\> (r4 * 8))\lint r4 = r4 + 1\l}"];
Node_53 [shape=record,label="{53\:\ 0x0070|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0070|RETURN\l|return r9\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0071|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"fromIndex (\")\lr1.append(r10)\lr1.append(\") must be not greater than toIndex (\")\lr1.append(r11)\lr1.append(\").\")\l}"];
Node_49 [shape=record,label="{49\:\ 0x0097|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_50 [shape=record,label="{50\:\ 0x0098|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"fromIndex (\")\lr1.append(r10)\lr1.append(\") or toIndex (\")\lr1.append(r11)\lr1.append(\") are out of range: 0..\")\lr1.append(r9.length)\lr1.append('.')\l}"];
Node_51 [shape=record,label="{51\:\ 0x00c7|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|r0 = false\l}"];
MethodNode[shape=record,label="{public byte[] kotlin.random.Random.nextBytes((r8v0 'this' kotlin.random.Random A[IMMUTABLE_TYPE, THIS]), (r9v0 'array' byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'fromIndex' int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'toIndex' int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:43:0x0035 \-\> B:42:0x0033, BACK_EDGE: B:46:0x0064 \-\> B:45:0x0062, CROSS_EDGE: B:49:0x0097 \-\> B:28:?, CROSS_EDGE: B:37:0x0026 \-\> B:40:0x002a, CROSS_EDGE: B:51:0x00c7 \-\> B:28:?, CROSS_EDGE: B:34:0x0021 \-\> B:35:0x0022, CROSS_EDGE: B:30:0x0011 \-\> B:34:0x0021\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.random.Random.nextBytes(byte[], int, int):byte[]]\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_50;
Node_37 -> Node_39;
Node_37 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_48;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_52;
Node_43 -> Node_42;
Node_52 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_53;
Node_46 -> Node_45;
Node_53 -> Node_47;
Node_47 -> Node_28;
Node_48 -> Node_49;
Node_49 -> Node_28;
Node_50 -> Node_51;
Node_51 -> Node_28;
Node_34 -> Node_35;
}

