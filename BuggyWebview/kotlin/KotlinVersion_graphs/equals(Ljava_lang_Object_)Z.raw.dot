digraph "CFG forkotlin.KotlinVersion.equals(Ljava\/lang\/Object;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:38)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.Object)])  \-\> B:23:0x0004 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlin.KotlinVersion  (LINE:39)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000c \l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0009: CHECK_CAST (r1 I:kotlin.KotlinVersion) = (kotlin.KotlinVersion) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0011 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|RETURN\l|0x0010: RETURN  (r2 I:boolean) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: IGET  (r3 I:int) = (r5 I:kotlin.KotlinVersion) kotlin.KotlinVersion.version int  (LINE:40)\l0x0013: IGET  (r4 I:int) = (r1 I:kotlin.KotlinVersion A[D('otherVersion' kotlin.KotlinVersion)]) kotlin.KotlinVersion.version int \l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0018 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: RETURN  (r0 I:boolean) \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.KotlinVersion.equals((r5 'this' I:kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0010 \-\> B:19:?, CROSS_EDGE: B:34:0x0019 \-\> B:19:?, CROSS_EDGE: B:31:0x0015 \-\> B:34:0x0019, CROSS_EDGE: B:26:0x000c \-\> B:27:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0019: r1 'otherVersion' Lkotlin\/KotlinVersion;\l  \-1 \-0x0019: r6 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_19;
Node_35 -> Node_19;
Node_26 -> Node_27;
}

