digraph "CFG forkotlin.KotlinVersion.equals(Ljava\/lang\/Object;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000}"];
Node_21 [shape=record,label="{21\:\ 0x0001|if (r5 != r6) goto L5\l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|RETURN\l|return true\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004}"];
Node_24 [shape=record,label="{24\:\ 0x0006|if ((r6 instanceof kotlin.KotlinVersion) == false) goto L15\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|kotlin.KotlinVersion r1 = (kotlin.KotlinVersion) r6\l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|PHI: r1 \l  PHI: (r1v2 'otherVersion' kotlin.KotlinVersion) = (r1v1 'otherVersion' kotlin.KotlinVersion), (r1v4 'otherVersion' kotlin.KotlinVersion) binds: [B:26:0x000c, B:25:0x0008] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|if (r1 != null) goto L11\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|RETURN\l|return false\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011}"];
Node_31 [shape=record,label="{31\:\ 0x0015|if (r5.version != r1.version) goto L13\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|RETURN\lORIG_RETURN\l|return false\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|r1 = null\l}"];
MethodNode[shape=record,label="{public boolean kotlin.KotlinVersion.equals((r5v0 'this' kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r6v0 'other' java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0010 \-\> B:19:?, CROSS_EDGE: B:34:0x0019 \-\> B:19:?, CROSS_EDGE: B:31:0x0015 \-\> B:34:0x0019, CROSS_EDGE: B:26:0x000c \-\> B:27:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_19;
Node_35 -> Node_19;
Node_26 -> Node_27;
}

