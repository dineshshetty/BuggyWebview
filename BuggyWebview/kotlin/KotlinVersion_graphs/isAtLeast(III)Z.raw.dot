digraph "CFG forkotlin.KotlinVersion.isAtLeast(III)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:kotlin.KotlinVersion) kotlin.KotlinVersion.major int  (LINE:60)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|0x0002: IF  (r0 I:??[int, byte, short, char]) \> (r2 I:??[int, byte, short, char] A[D('major' int)])  \-\> B:27:0x0013 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('major' int)])  \-\> B:26:0x0011 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r1 I:kotlin.KotlinVersion) kotlin.KotlinVersion.minor int  (LINE:61)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \> (r3 I:??[int, byte, short, char] A[D('minor' int)])  \-\> B:27:0x0013 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('minor' int)])  \-\> B:26:0x0011 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: IGET  (r0 I:int) = (r1 I:kotlin.KotlinVersion) kotlin.KotlinVersion.patch int  (LINE:62)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: IF  (r0 I:??[int, byte, short, char]) \< (r4 I:??[int, byte, short, char] A[D('patch' int)])  \-\> B:26:0x0011 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|SYNTHETIC\lRETURN\l|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.KotlinVersion.isAtLeast((r1 'this' I:kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('major' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('minor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('patch' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0013 \-\> B:28:0x0014, CROSS_EDGE: B:22:0x000a \-\> B:26:0x0011, CROSS_EDGE: B:21:0x0008 \-\> B:27:0x0013, CROSS_EDGE: B:19:0x0004 \-\> B:26:0x0011, CROSS_EDGE: B:18:0x0002 \-\> B:27:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r2 'major' I\l  \-1 \-0x0014: r3 'minor' I\l  \-1 \-0x0014: r4 'patch' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_16;
Node_27 -> Node_16;
}

