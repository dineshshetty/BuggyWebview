digraph "CFG forkotlin.KotlinVersion.versionOf(III)I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:26)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0008: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r4 I:int A[D('major' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0025 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0010: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0013: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r5 I:int A[D('minor' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0025 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x001b: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x001e: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r6 I:int A[D('patch' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0025 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|0x0024: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|0x0025: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x002e \l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|0x0027: ARITH  (r0 I:int) = (r4 I:int A[D('major' int)]) \<\< (16 int)  (LINE:29)\l0x0029: ARITH  (r1 I:int) = (r5 I:int A[D('minor' int)]) \<\< (8 int) \l0x002b: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x002c: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int A[D('patch' int)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x002e|0x002e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:26)\l0x002f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:27)\l0x0031: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0034: CONST_STR  (r2 I:java.lang.String) =  \"Version components are out of range: \" \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0039: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('major' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x003c: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x003e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0041: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('minor' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0047: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('patch' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x004a: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-KotlinVersion$versionOf$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:26)\l0x0050: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0054: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0057|0x0057: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final int kotlin.KotlinVersion.versionOf((r3 'this' I:kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('major' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('minor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('patch' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0057 \-\> B:15:?, CROSS_EDGE: B:21:0x0022 \-\> B:23:0x0025, CROSS_EDGE: B:19:0x0017 \-\> B:23:0x0025, CROSS_EDGE: B:17:0x000c \-\> B:23:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002f\-0x004e: r0 '$i$a$\-require\-KotlinVersion$versionOf$1' I\l  \-1 \-0x0057: r4 'major' I\l  \-1 \-0x0057: r5 'minor' I\l  \-1 \-0x0057: r6 'patch' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

