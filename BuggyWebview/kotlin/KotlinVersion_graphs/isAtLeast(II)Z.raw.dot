digraph "CFG forkotlin.KotlinVersion.isAtLeast(II)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:kotlin.KotlinVersion) kotlin.KotlinVersion.major int  (LINE:52)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, byte, short, char]) \> (r2 I:??[int, byte, short, char] A[D('major' int)])  \-\> B:21:0x000d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('major' int)])  \-\> B:20:0x000b \l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r1 I:kotlin.KotlinVersion) kotlin.KotlinVersion.minor int  (LINE:53)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char] A[D('minor' int)])  \-\> B:20:0x000b \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|SYNTHETIC\lRETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.KotlinVersion.isAtLeast((r1 'this' I:kotlin.KotlinVersion A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('major' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('minor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x000d \-\> B:22:0x000e, CROSS_EDGE: B:16:0x0004 \-\> B:20:0x000b, CROSS_EDGE: B:15:0x0002 \-\> B:21:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'major' I\l  \-1 \-0x000e: r3 'minor' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_21[style=dashed];
Node_20 -> Node_13;
Node_21 -> Node_13;
}

